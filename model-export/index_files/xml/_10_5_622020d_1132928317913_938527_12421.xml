<?xml version="1.0" encoding="UTF-8"?><magicdraw><comment classType="Comment" humanType="Comment" icon="index_files/icon_comment_841774062.jpg" id="_10_5_622020d_1132928317913_938527_12421" refElementId="_10_5_622020d_1132928317913_938527_12421"><annotatedElement humanName="Annotated Element" mode="s,e"><class classType="Class" humanType="Class" icon="index_files/icon_class_555864569.jpg" name="JEditorPane" refElementId="_9_5_f720368_1110473546799_766828_10725" refid="_9_5_f720368_1110473546799_766828_10725"/></annotatedElement><body humanName="Body" mode="s,e">A text component to edit various kinds of content.
You can find how-to information and examples of using editor panes in
&lt;a href="http://java.sun.com/docs/books/tutorial/uiswing/components/text.html"&gt;Using Text Components&lt;/a&gt;,
a section in &lt;em&gt;The Java Tutorial.&lt;/em&gt;

&lt;p&gt;
This component uses implementations of the
&lt;code&gt;EditorKit&lt;/code&gt; to accomplish its behavior. It effectively
morphs into the proper kind of text editor for the kind
of content it is given.  The content type that editor is bound
to at any given time is determined by the &lt;code&gt;EditorKit&lt;/code&gt; currently
installed.  If the content is set to a new URL, its type is used
to determine the &lt;code&gt;EditorKit&lt;/code&gt; that should be used to
load the content.
&lt;p&gt;
By default, the following types of content are known:
&lt;dl&gt;
&lt;dt&gt;&lt;b&gt;text/plain&lt;/b&gt;
&lt;dd&gt;Plain text, which is the default the type given isn't
recognized.  The kit used in this case is an extension of
&lt;code&gt;DefaultEditorKit&lt;/code&gt; that produces a wrapped plain text view.
&lt;dt&gt;&lt;b&gt;text/html&lt;/b&gt;
&lt;dd&gt;HTML text.  The kit used in this case is the class
&lt;code&gt;javax.swing.text.html.HTMLEditorKit&lt;/code&gt;
which provides HTML 3.2 support.
&lt;dt&gt;&lt;b&gt;text/rtf&lt;/b&gt;
&lt;dd&gt;RTF text.  The kit used in this case is the class
&lt;code&gt;javax.swing.text.rtf.RTFEditorKit&lt;/code&gt;
which provides a limited support of the Rich Text Format.
&lt;/dl&gt;
&lt;p&gt;
There are several ways to load content into this component.
&lt;ol&gt;
&lt;li&gt;
The &lt;a href="#setText"&gt;setText&lt;/a&gt; method can be used to initialize
the component from a string.  In this case the current
&lt;code&gt;EditorKit&lt;/code&gt; will be used, and the content type will be
expected to be of this type.
&lt;li&gt;
The &lt;a href="#read"&gt;read&lt;/a&gt; method can be used to initialize the
component from a &lt;code&gt;Reader&lt;/code&gt;.  Note that if the content type is HTML,
relative references (e.g. for things like images) can't be resolved
unless the &lt;base&gt; tag is used or the &lt;em&gt;Base&lt;/em&gt; property
on &lt;code&gt;HTMLDocument&lt;/code&gt; is set.
In this case the current &lt;code&gt;EditorKit&lt;/code&gt; will be used,
and the content type will be expected to be of this type.
&lt;li&gt;
The &lt;a href="#setPage"&gt;setPage&lt;/a&gt; method can be used to initialize
the component from a URL.  In this case, the content type will be
determined from the URL, and the registered &lt;code&gt;EditorKit&lt;/code&gt;
for that content type will be set.
&lt;/ol&gt;
&lt;p&gt;
Some kinds of content may provide hyperlink support by generating
hyperlink events.  The HTML &lt;code&gt;EditorKit&lt;/code&gt; will generate
hyperlink events if the &lt;code&gt;JEditorPane&lt;/code&gt; is &lt;em&gt;not editable&lt;/em&gt;
(&lt;code&gt;JEditorPane.setEditable(false);&lt;/code&gt; has been called).
If HTML frames are embedded in the document, the typical response would be
to change a portion of the current document.  The following code
fragment is a possible hyperlink listener implementation, that treats
HTML frame events specially, and simply displays any other activated
hyperlinks.
&lt;code&gt;&lt;pre&gt;
&amp;nbsp;    class Hyperactive implements HyperlinkListener {
&amp;nbsp;
&amp;nbsp;        public void hyperlinkUpdate(HyperlinkEvent e) {
&amp;nbsp;	          if (e.getEventType() == HyperlinkEvent.EventType.ACTIVATED) {
&amp;nbsp;		      JEditorPane pane = (JEditorPane) e.getSource();
&amp;nbsp;		      if (e instanceof HTMLFrameHyperlinkEvent) {
&amp;nbsp;		          HTMLFrameHyperlinkEvent  evt = (HTMLFrameHyperlinkEvent)e;
&amp;nbsp;		          HTMLDocument doc = (HTMLDocument)pane.getDocument();
&amp;nbsp;		          doc.processHTMLFrameHyperlinkEvent(evt);
&amp;nbsp;		      } else {
&amp;nbsp;		          try {
&amp;nbsp;			      pane.setPage(e.getURL());
&amp;nbsp;		          } catch (Throwable t) {
&amp;nbsp;			      t.printStackTrace();
&amp;nbsp;		          }
&amp;nbsp;		      }
&amp;nbsp;	          }
&amp;nbsp;	      }
&amp;nbsp;    }
&lt;/pre&gt;&lt;/code&gt;
&lt;p&gt;
For information on customizing how &lt;b&gt;text/html&lt;/b&gt; is rendered please see
{@link #W3C_LENGTH_UNITS} and {@link #HONOR_DISPLAY_PROPERTIES}
&lt;p&gt;
Culturally dependent information in some documents is handled through
a mechanism called character encoding.  Character encoding is an
unambiguous mapping of the members of a character set (letters, ideographs,
digits, symbols, or control functions) to specific numeric code values. It
represents the way the file is stored. Example character encodings are
ISO-8859-1, ISO-8859-5, Shift-jis, Euc-jp, and UTF-8. When the file is
passed to an user agent (&lt;code&gt;JEditorPane&lt;/code&gt;) it is converted to
the document character set (ISO-10646 aka Unicode).
&lt;p&gt;
There are multiple ways to get a character set mapping to happen
with &lt;code&gt;JEditorPane&lt;/code&gt;.
&lt;ol&gt;
&lt;li&gt;
One way is to specify the character set as a parameter of the MIME
type.  This will be established by a call to the
&lt;a href="#setContentType"&gt;setContentType&lt;/a&gt; method.  If the content
is loaded by the &lt;a href="#setPage"&gt;setPage&lt;/a&gt; method the content
type will have been set according to the specification of the URL.
It the file is loaded directly, the content type would be expected to
have been set prior to loading.
&lt;li&gt;
Another way the character set can be specified is in the document itself.
This requires reading the document prior to determining the character set
that is desired.  To handle this, it is expected that the
&lt;code&gt;EditorKit&lt;/code&gt;.read operation throw a
&lt;code&gt;ChangedCharSetException&lt;/code&gt; which will
be caught.  The read is then restarted with a new Reader that uses
the character set specified in the &lt;code&gt;ChangedCharSetException&lt;/code&gt;
(which is an &lt;code&gt;IOException&lt;/code&gt;).
&lt;/ol&gt;
&lt;p&gt;
&lt;dt&gt;&lt;b&gt;&lt;font size=+1&gt;Newlines&lt;/font&gt;&lt;/b&gt;
&lt;dd&gt;
For a discussion on how newlines are handled, see
&lt;a href="text/DefaultEditorKit.html"&gt;DefaultEditorKit&lt;/a&gt;.
&lt;/dl&gt;

&lt;p&gt;
&lt;strong&gt;Warning:&lt;/strong&gt;
Serialized objects of this class will not be compatible with
future Swing releases. The current serialization support is
appropriate for short term storage or RMI between applications running
the same version of Swing.  As of 1.4, support for long term storage
of all JavaBeans&lt;sup&gt;&lt;font size="-2"&gt;TM&lt;/font&gt;&lt;/sup&gt;
has been added to the &lt;code&gt;java.beans&lt;/code&gt; package.
Please see {@link java.beans.XMLEncoder}.

@beaninfo
attribute: isContainer false
description: A text component to edit various types of content.

@author  Timothy Prinzing
@version 1.125 07/23/04
</body><documentation humanName="Documentation"/><owner classType="Class" humanName="Owner" humanType="Class" icon="index_files/icon_class_555864569.jpg" mode="s,e" name="JEditorPane" refElementId="_9_5_f720368_1110473546799_766828_10725" refid="_9_5_f720368_1110473546799_766828_10725"/><owningElement classType="Class" humanName="Owning Element" humanType="Class" icon="index_files/icon_class_555864569.jpg" name="JEditorPane" refElementId="_9_5_f720368_1110473546799_766828_10725" refid="_9_5_f720368_1110473546799_766828_10725"/><TO_DO humanName="To Do" mode="s,e"/></comment></magicdraw>