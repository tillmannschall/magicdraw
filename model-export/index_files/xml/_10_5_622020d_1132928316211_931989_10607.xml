<?xml version="1.0" encoding="UTF-8"?><magicdraw><comment classType="Comment" humanType="Comment" icon="index_files/icon_comment_841774062.jpg" id="_10_5_622020d_1132928316211_931989_10607" refElementId="_10_5_622020d_1132928316211_931989_10607"><annotatedElement humanName="Annotated Element" mode="s,e"><class classType="Class" humanType="Class" icon="index_files/icon_class_555864569.jpg" name="AudioFormat" refElementId="_9_5_f720368_1110473546737_670677_9709" refid="_9_5_f720368_1110473546737_670677_9709"/></annotatedElement><body humanName="Body" mode="s,e">&lt;code&gt;AudioFormat&lt;/code&gt; is the class that specifies a particular arrangement of data in a sound stream.
By examing the information stored in the audio format, you can discover how to interpret the bits in the
binary sound data.
&lt;p&gt;
Every data line has an audio format associated with its data stream. The audio format of a source (playback) data line indicates
what kind of data the data line expects to receive for output.  For a target (capture) data line, the audio format specifies the kind
of the data that can be read from the line.
Sound files also have audio formats, of course.  The &lt;code&gt;{@link AudioFileFormat}&lt;/code&gt;
class encapsulates an &lt;code&gt;AudioFormat&lt;/code&gt; in addition to other,
file-specific information.  Similarly, an &lt;code&gt;{@link AudioInputStream}&lt;/code&gt; has an
&lt;code&gt;AudioFormat&lt;/code&gt;.
&lt;p&gt;
The &lt;code&gt;AudioFormat&lt;/code&gt; class accommodates a number of common sound-file encoding techniques, including
pulse-code modulation (PCM), mu-law encoding, and a-law encoding.  These encoding techniques are predefined,
but service providers can create new encoding types.
The encoding that a specific format uses is named by its &lt;code&gt;encoding&lt;/code&gt; field.
&lt;p&gt;
In addition to the encoding, the audio format includes other properties that further specify the exact
arrangement of the data.
These include the number of channels, sample rate, sample size, byte order, frame rate, and frame size.
Sounds may have different numbers of audio channels: one for mono, two for stereo.
The sample rate measures how many "snapshots" (samples) of the sound pressure are taken per second, per channel.
(If the sound is stereo rather than mono, two samples are actually measured at each instant of time: one for the left channel,
and another for the right channel; however, the sample rate still measures the number per channel, so the rate is the same
regardless of the number of channels.   This is the standard use of the term.)
The sample size indicates how many bits are used to store each snapshot; 8 and 16 are typical values.
For 16-bit samples (or any other sample size larger than a byte),
byte order is important; the bytes in each sample are arranged in
either the "little-endian" or "big-endian" style.
For encodings like PCM, a frame consists of the set of samples for all channels at a given
point in time, and so the size of a frame (in bytes) is always equal to the size of a sample (in bytes) times
the number of channels.  However, with some other sorts of encodings a frame can contain
a bundle of compressed data for a whole series of samples, as well as additional, non-sample
data.  For such encodings, the sample rate and sample size refer to the data after it is decoded into PCM,
and so they are completely different from the frame rate and frame size.

&lt;p&gt;An &lt;code&gt;AudioFormat&lt;/code&gt; object can include a set of
properties. A property is a pair of key and value: the key
is of type &lt;code&gt;String&lt;/code&gt;, the associated property
value is an arbitrary object. Properties specify
additional format specifications, like the bit rate for
compressed formats. Properties are mainly used as a means
to transport additional information of the audio format
to and from the service providers. Therefore, properties
are ignored in the {@link #matches(AudioFormat)} method.
However, methods which rely on the installed service
providers, like {@link AudioSystem#isConversionSupported
(AudioFormat, AudioFormat) isConversionSupported} may consider
properties, depending on the respective service provider
implementation.

&lt;p&gt;The following table lists some common properties which
service providers should use, if applicable:

&lt;table border=0&gt;
&lt;tr&gt;
&lt;th&gt;Property key&lt;/th&gt;
&lt;th&gt;Value type&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;"bitrate"&lt;/td&gt;
&lt;td&gt;{@link java.lang.Integer Integer}&lt;/td&gt;
&lt;td&gt;average bit rate in bits per second&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;"vbr"&lt;/td&gt;
&lt;td&gt;{@link java.lang.Boolean Boolean}&lt;/td&gt;
&lt;td&gt;&lt;code&gt;true&lt;/code&gt;, if the file is encoded in variable bit
rate (VBR)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;"quality"&lt;/td&gt;
&lt;td&gt;{@link java.lang.Integer Integer}&lt;/td&gt;
&lt;td&gt;encoding/conversion quality, 1..100&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;

&lt;p&gt;Vendors of service providers (plugins) are encouraged
to seek information about other already established
properties in third party plugins, and follow the same
conventions.

@author Kara Kytle
@author Florian Bomers
@version 1.35 04/03/15
@see DataLine#getFormat
@see AudioInputStream#getFormat
@see AudioFileFormat
@see javax.sound.sampled.spi.FormatConversionProvider
@since 1.3
</body><documentation humanName="Documentation"/><owner classType="Class" humanName="Owner" humanType="Class" icon="index_files/icon_class_555864569.jpg" mode="s,e" name="AudioFormat" refElementId="_9_5_f720368_1110473546737_670677_9709" refid="_9_5_f720368_1110473546737_670677_9709"/><owningElement classType="Class" humanName="Owning Element" humanType="Class" icon="index_files/icon_class_555864569.jpg" name="AudioFormat" refElementId="_9_5_f720368_1110473546737_670677_9709" refid="_9_5_f720368_1110473546737_670677_9709"/><TO_DO humanName="To Do" mode="s,e"/></comment></magicdraw>