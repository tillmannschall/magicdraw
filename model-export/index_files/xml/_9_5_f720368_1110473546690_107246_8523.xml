<?xml version="1.0" encoding="UTF-8"?><magicdraw><class classType="Class" humanType="Class" icon="index_files/icon_class_555864569.jpg" id="_9_5_f720368_1110473546690_107246_8523" refElementId="_9_5_f720368_1110473546690_107246_8523"><documentation humanName="Documentation" mode="s">&lt;p&gt;This class provides a cryptographically strong random number
generator (RNG).  Many implementations are in the form of a pseudo-random
number generator (PRNG), which means they use a deterministic algorithm
to produce a pseudo-random sequence from a true random seed.
Other implementations may produce true random numbers
and yet others may use a combination of both techniques.

&lt;p&gt;A cryptographically strong random number
minimally complies with the statistical random number generator tests
specified in &lt;a href="http://csrc.nist.gov/cryptval/140-2.htm"&gt;
&lt;i&gt;FIPS 140-2, Security Requirements for Cryptographic Modules&lt;/i&gt;&lt;/a&gt;,
section 4.9.1.
Additionally, SecureRandom must produce non-deterministic
output and therefore it is required that the seed material be unpredictable
and that output of SecureRandom be cryptographically strong sequences as
described in &lt;a href="http://www.ietf.org/rfc/rfc1750.txt"&gt;
&lt;i&gt;RFC 1750: Randomness Recommendations for Security&lt;/i&gt;&lt;/a&gt;.

&lt;p&gt;Like other algorithm-based classes in Java Security, SecureRandom
provides implementation-independent algorithms, whereby a caller
(application code) requests a particular RNG algorithm
and is handed back a SecureRandom object for that algorithm. It is
also possible, if desired, to request a particular algorithm from a
particular provider. See the &lt;code&gt;getInstance&lt;/code&gt; methods.

&lt;p&gt;Thus, there are two ways to request a SecureRandom object: by
specifying either just an algorithm name, or both an algorithm name
and a package provider.

&lt;ul&gt;

&lt;li&gt;If just an algorithm name is specified, as in:
&lt;pre&gt;
SecureRandom random = SecureRandom.getInstance("SHA1PRNG");
&lt;/pre&gt;
the system will determine if there is an implementation of the algorithm
requested available in the environment, and if there is more than one, if
there is a preferred one.&lt;p&gt;

&lt;li&gt;If both an algorithm name and a package provider are specified, as in:
&lt;pre&gt;
SecureRandom random = SecureRandom.getInstance("SHA1PRNG", "SUN");
&lt;/pre&gt;
the system will determine if there is an implementation of the
algorithm in the package requested, and throw an exception if there
is not.

&lt;/ul&gt;

&lt;p&gt;The SecureRandom implementation attempts to completely
randomize the internal state of the generator itself unless
the caller follows the call to a &lt;code&gt;getInstance&lt;/code&gt; method
with a call to the &lt;code&gt;setSeed&lt;/code&gt; method:
&lt;pre&gt;
SecureRandom random = SecureRandom.getInstance("SHA1PRNG");
random.setSeed(seed);
&lt;/pre&gt;

&lt;p&gt;After the caller obtains the SecureRandom object from the
&lt;code&gt;getInstance&lt;/code&gt; call, it can call &lt;code&gt;nextBytes&lt;/code&gt;
to generate random bytes:
&lt;pre&gt;
byte bytes[] = new byte[20];
random.nextBytes(bytes);
&lt;/pre&gt;

&lt;p&gt;The caller may also invoke the &lt;code&gt;generateSeed&lt;/code&gt; method
to generate a given number of seed bytes (to seed other random number
generators, for example):
&lt;pre&gt;
byte seed[] = random.generateSeed(20);
&lt;/pre&gt;

@see java.security.SecureRandomSpi
@see java.util.Random

@version 1.47, 12/19/03
@author Benjamin Renaud
@author Josh Bloch
</documentation><generalization humanName="Generalization"><generalization classType="Generalization" humanType="Generalization" icon="index_files/icon_generalization_1454922150.jpg" isRelationship="true" name="Generalization[JDK 5.0 Classes::java::security::SecureRandom -&gt; JDK 5.0 Classes::java::util::Random]" refElementId="_10_5_622020d_1132928321899_461333_14236" refid="_10_5_622020d_1132928321899_461333_14236"/></generalization><isAbstract humanName="Is Abstract" mode="s,e">false</isAbstract><isActive humanName="Is Active" mode="s,e">false</isActive><isFinalSpecialization humanName="Is Final Specialization" mode="e">false</isFinalSpecialization><isLeaf humanName="Is Leaf" mode="e">false</isLeaf><name humanName="Name" mode="s,e">SecureRandom</name><namespace classType="Package" humanName="Namespace" humanType="Package" icon="index_files/icon_package_1518868172.jpg" name="security" refElementId="_9_5_f720368_1110473547706_6534_18577" refid="_9_5_f720368_1110473547706_6534_18577"/><ownedComment humanName="Owned Comment"><comment classType="Comment" humanType="Comment" icon="index_files/icon_comment_841774062.jpg" name="&lt;p&gt;This class provides a cryptographically strong ..." refElementId="_10_5_622020d_1132928309421_571244_6115" refid="_10_5_622020d_1132928309421_571244_6115"/></ownedComment><ownedElement humanName="Owned Element"><generalization classType="Generalization" humanType="Generalization" icon="index_files/icon_generalization_1454922150.jpg" isRelationship="true" name="Generalization[JDK 5.0 Classes::java::security::SecureRandom -&gt; JDK 5.0 Classes::java::util::Random]" refElementId="_10_5_622020d_1132928321899_461333_14236" refid="_10_5_622020d_1132928321899_461333_14236"/><comment classType="Comment" humanType="Comment" icon="index_files/icon_comment_841774062.jpg" name="&lt;p&gt;This class provides a cryptographically strong ..." refElementId="_10_5_622020d_1132928309421_571244_6115" refid="_10_5_622020d_1132928309421_571244_6115"/></ownedElement><owner classType="Package" humanName="Owner" humanType="Package" icon="index_files/icon_package_1518868172.jpg" mode="s,e" name="security" refElementId="_9_5_f720368_1110473547706_6534_18577" refid="_9_5_f720368_1110473547706_6534_18577"/><owningPackage classType="Package" humanName="Owning Package" humanType="Package" icon="index_files/icon_package_1518868172.jpg" name="security" refElementId="_9_5_f720368_1110473547706_6534_18577" refid="_9_5_f720368_1110473547706_6534_18577"/><package classType="Package" humanName="Package" humanType="Package" icon="index_files/icon_package_1518868172.jpg" name="security" refElementId="_9_5_f720368_1110473547706_6534_18577" refid="_9_5_f720368_1110473547706_6534_18577"/><qualifiedName humanName="Qualified Name" mode="e">JDK 5.0 Classes::java::security::SecureRandom</qualifiedName><superClass humanName="Super Class"><class classType="Class" humanType="Class" icon="index_files/icon_class_555864569.jpg" name="Random" refElementId="_9_5_f720368_1110473546706_483016_8911" refid="_9_5_f720368_1110473546706_483016_8911"/></superClass><TO_DO humanName="To Do" mode="s,e"/><visibility humanName="Visibility" mode="e">public</visibility></class></magicdraw>