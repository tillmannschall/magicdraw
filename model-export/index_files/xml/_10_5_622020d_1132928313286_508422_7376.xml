<?xml version="1.0" encoding="UTF-8"?><magicdraw><comment classType="Comment" humanType="Comment" icon="index_files/icon_comment_2051026490.jpg" id="_10_5_622020d_1132928313286_508422_7376"><annotatedElement humanName="Annotated Element" mode="s,e"><interface classType="Interface" humanType="Interface" icon="index_files/icon_interface_118881143.jpg" name="List" refid="_9_5_f720368_1110473546706_491640_8885"/></annotatedElement><body humanName="Body" mode="s,e">An ordered collection (also known as a &lt;i&gt;sequence&lt;/i&gt;).  The user of this
interface has precise control over where in the list each element is
inserted.  The user can access elements by their integer index (position in
the list), and search for elements in the list.&lt;p&gt;

Unlike sets, lists typically allow duplicate elements.  More formally,
lists typically allow pairs of elements &lt;tt&gt;e1&lt;/tt&gt; and &lt;tt&gt;e2&lt;/tt&gt;
such that &lt;tt&gt;e1.equals(e2)&lt;/tt&gt;, and they typically allow multiple
null elements if they allow null elements at all.  It is not inconceivable
that someone might wish to implement a list that prohibits duplicates, by
throwing runtime exceptions when the user attempts to insert them, but we
expect this usage to be rare.&lt;p&gt;

The &lt;tt&gt;List&lt;/tt&gt; interface places additional stipulations, beyond those
specified in the &lt;tt&gt;Collection&lt;/tt&gt; interface, on the contracts of the
&lt;tt&gt;iterator&lt;/tt&gt;, &lt;tt&gt;add&lt;/tt&gt;, &lt;tt&gt;remove&lt;/tt&gt;, &lt;tt&gt;equals&lt;/tt&gt;, and
&lt;tt&gt;hashCode&lt;/tt&gt; methods.  Declarations for other inherited methods are
also included here for convenience.&lt;p&gt;

The &lt;tt&gt;List&lt;/tt&gt; interface provides four methods for positional (indexed)
access to list elements.  Lists (like Java arrays) are zero based.  Note
that these operations may execute in time proportional to the index value
for some implementations (the &lt;tt&gt;LinkedList&lt;/tt&gt; class, for
example). Thus, iterating over the elements in a list is typically
preferable to indexing through it if the caller does not know the
implementation.&lt;p&gt;

The &lt;tt&gt;List&lt;/tt&gt; interface provides a special iterator, called a
&lt;tt&gt;ListIterator&lt;/tt&gt;, that allows element insertion and replacement, and
bidirectional access in addition to the normal operations that the
&lt;tt&gt;Iterator&lt;/tt&gt; interface provides.  A method is provided to obtain a
list iterator that starts at a specified position in the list.&lt;p&gt;

The &lt;tt&gt;List&lt;/tt&gt; interface provides two methods to search for a specified
object.  From a performance standpoint, these methods should be used with
caution.  In many implementations they will perform costly linear
searches.&lt;p&gt;

The &lt;tt&gt;List&lt;/tt&gt; interface provides two methods to efficiently insert and
remove multiple elements at an arbitrary point in the list.&lt;p&gt;

Note: While it is permissible for lists to contain themselves as elements,
extreme caution is advised: the &lt;tt&gt;equals&lt;/tt&gt; and &lt;tt&gt;hashCode&lt;/tt&gt;
methods are no longer well defined on a such a list.

&lt;p&gt;Some list implementations have restrictions on the elements that
they may contain.  For example, some implementations prohibit null elements,
and some have restrictions on the types of their elements.  Attempting to
add an ineligible element throws an unchecked exception, typically
&lt;tt&gt;NullPointerException&lt;/tt&gt; or &lt;tt&gt;ClassCastException&lt;/tt&gt;.  Attempting
to query the presence of an ineligible element may throw an exception,
or it may simply return false; some implementations will exhibit the former
behavior and some will exhibit the latter.  More generally, attempting an
operation on an ineligible element whose completion would not result in
the insertion of an ineligible element into the list may throw an
exception or it may succeed, at the option of the implementation.
Such exceptions are marked as "optional" in the specification for this
interface.

&lt;p&gt;This interface is a member of the
&lt;a href="{@docRoot}/../guide/collections/index.html"&gt;
Java Collections Framework&lt;/a&gt;.

@author  Josh Bloch
@author  Neal Gafter
@version 1.44, 12/19/03
@see Collection
@see Set
@see ArrayList
@see LinkedList
@see Vector
@see Arrays#asList(Object[])
@see Collections#nCopies(int, Object)
@see Collections#EMPTY_LIST
@see AbstractList
@see AbstractSequentialList
@since 1.2
</body><documentation humanName="Documentation"/><owner classType="Interface" humanName="Owner" humanType="Interface" icon="index_files/icon_interface_118881143.jpg" mode="s,e" name="List" refid="_9_5_f720368_1110473546706_491640_8885"/><owningElement classType="Interface" humanName="Owning Element" humanType="Interface" icon="index_files/icon_interface_118881143.jpg" name="List" refid="_9_5_f720368_1110473546706_491640_8885"/><TO_DO humanName="To Do" mode="s,e"/></comment></magicdraw>