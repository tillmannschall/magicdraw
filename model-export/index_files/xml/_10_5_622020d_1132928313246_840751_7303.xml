<?xml version="1.0" encoding="UTF-8"?><magicdraw><comment classType="Comment" humanType="Comment" icon="index_files/icon_comment_2051026490.jpg" id="_10_5_622020d_1132928313246_840751_7303"><annotatedElement humanName="Annotated Element" mode="s,e"><class classType="Class" humanType="Class" icon="index_files/icon_class_1555793073.jpg" name="IdentityHashMap" refid="_9_5_f720368_1110473546706_304513_8875"/></annotatedElement><body humanName="Body" mode="s,e">This class implements the &lt;tt&gt;Map&lt;/tt&gt; interface with a hash table, using
reference-equality in place of object-equality when comparing keys (and
values).  In other words, in an &lt;tt&gt;IdentityHashMap&lt;/tt&gt;, two keys
&lt;tt&gt;k1&lt;/tt&gt; and &lt;tt&gt;k2&lt;/tt&gt; are considered equal if and only if
&lt;tt&gt;(k1==k2)&lt;/tt&gt;.  (In normal &lt;tt&gt;Map&lt;/tt&gt; implementations (like
&lt;tt&gt;HashMap&lt;/tt&gt;) two keys &lt;tt&gt;k1&lt;/tt&gt; and &lt;tt&gt;k2&lt;/tt&gt; are considered equal
if and only if &lt;tt&gt;(k1==null ? k2==null : k1.equals(k2))&lt;/tt&gt;.)

&lt;p&gt;&lt;b&gt;This class is &lt;i&gt;not&lt;/i&gt; a general-purpose &lt;tt&gt;Map&lt;/tt&gt;
implementation!  While this class implements the &lt;tt&gt;Map&lt;/tt&gt; interface, it
intentionally violates &lt;tt&gt;Map's&lt;/tt&gt; general contract, which mandates the
use of the &lt;tt&gt;equals&lt;/tt&gt; method when comparing objects.  This class is
designed for use only in the rare cases wherein reference-equality
semantics are required.&lt;/b&gt;

&lt;p&gt;A typical use of this class is &lt;i&gt;topology-preserving object graph
transformations&lt;/i&gt;, such as serialization or deep-copying.  To perform such
a transformation, a program must maintain a "node table" that keeps track
of all the object references that have already been processed.  The node
table must not equate distinct objects even if they happen to be equal.
Another typical use of this class is to maintain &lt;i&gt;proxy objects&lt;/i&gt;.  For
example, a debugging facility might wish to maintain a proxy object for
each object in the program being debugged.

&lt;p&gt;This class provides all of the optional map operations, and permits
&lt;tt&gt;null&lt;/tt&gt; values and the &lt;tt&gt;null&lt;/tt&gt; key.  This class makes no
guarantees as to the order of the map; in particular, it does not guarantee
that the order will remain constant over time.

&lt;p&gt;This class provides constant-time performance for the basic
operations (&lt;tt&gt;get&lt;/tt&gt; and &lt;tt&gt;put&lt;/tt&gt;), assuming the system
identity hash function ({@link System#identityHashCode(Object)})
disperses elements properly among the buckets.

&lt;p&gt;This class has one tuning parameter (which affects performance but not
semantics): &lt;i&gt;expected maximum size&lt;/i&gt;.  This parameter is the maximum
number of key-value mappings that the map is expected to hold.  Internally,
this parameter is used to determine the number of buckets initially
comprising the hash table.  The precise relationship between the expected
maximum size and the number of buckets is unspecified.

&lt;p&gt;If the size of the map (the number of key-value mappings) sufficiently
exceeds the expected maximum size, the number of buckets is increased
Increasing the number of buckets ("rehashing") may be fairly expensive, so
it pays to create identity hash maps with a sufficiently large expected
maximum size.  On the other hand, iteration over collection views requires
time proportional to the number of buckets in the hash table, so it
pays not to set the expected maximum size too high if you are especially
concerned with iteration performance or memory usage.

&lt;p&gt;&lt;b&gt;Note that this implementation is not synchronized.&lt;/b&gt; If multiple
threads access this map concurrently, and at least one of the threads
modifies the map structurally, it &lt;i&gt;must&lt;/i&gt; be synchronized externally.
(A structural modification is any operation that adds or deletes one or
more mappings; merely changing the value associated with a key that an
instance already contains is not a structural modification.)  This is
typically accomplished by synchronizing on some object that naturally
encapsulates the map.  If no such object exists, the map should be
"wrapped" using the &lt;tt&gt;Collections.synchronizedMap&lt;/tt&gt; method.  This is
best done at creation time, to prevent accidental unsynchronized access to
the map: &lt;pre&gt;
Map m = Collections.synchronizedMap(new HashMap(...));
&lt;/pre&gt;

&lt;p&gt;The iterators returned by all of this class's "collection view methods"
are &lt;i&gt;fail-fast&lt;/i&gt;: if the map is structurally modified at any time after
the iterator is created, in any way except through the iterator's own
&lt;tt&gt;remove&lt;/tt&gt; or &lt;tt&gt;add&lt;/tt&gt; methods, the iterator will throw a
&lt;tt&gt;ConcurrentModificationException&lt;/tt&gt;.  Thus, in the face of concurrent
modification, the iterator fails quickly and cleanly, rather than risking
arbitrary, non-deterministic behavior at an undetermined time in the
future.

&lt;p&gt;Note that the fail-fast behavior of an iterator cannot be guaranteed
as it is, generally speaking, impossible to make any hard guarantees in the
presence of unsynchronized concurrent modification.  Fail-fast iterators
throw &lt;tt&gt;ConcurrentModificationException&lt;/tt&gt; on a best-effort basis.
Therefore, it would be wrong to write a program that depended on this
exception for its correctness: &lt;i&gt;fail-fast iterators should be used only
to detect bugs.&lt;/i&gt;

&lt;p&gt;Implementation note: This is a simple &lt;i&gt;linear-probe&lt;/i&gt; hash table,
as described for example in texts by Sedgewick and Knuth.  The array
alternates holding keys and values.  (This has better locality for large
tables than does using separate arrays.)  For many JRE implementations
and operation mixes, this class will yield better performance than
{@link HashMap} (which uses &lt;i&gt;chaining&lt;/i&gt; rather than linear-probing).

&lt;p&gt;This class is a member of the
&lt;a href="{@docRoot}/../guide/collections/index.html"&gt;
Java Collections Framework&lt;/a&gt;.

@see     System#identityHashCode(Object)
@see     Object#hashCode()
@see     Collection
@see	    Map
@see	    HashMap
@see	    TreeMap
@author  Doug Lea and Josh Bloch
@since   1.4
</body><documentation humanName="Documentation"/><owner classType="Class" humanName="Owner" humanType="Class" icon="index_files/icon_class_1555793073.jpg" mode="s,e" name="IdentityHashMap" refid="_9_5_f720368_1110473546706_304513_8875"/><owningElement classType="Class" humanName="Owning Element" humanType="Class" icon="index_files/icon_class_1555793073.jpg" name="IdentityHashMap" refid="_9_5_f720368_1110473546706_304513_8875"/><TO_DO humanName="To Do" mode="s,e"/></comment></magicdraw>