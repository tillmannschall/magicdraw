<?xml version="1.0" encoding="UTF-8"?><magicdraw><comment classType="Comment" humanType="Comment" icon="index_files/icon_comment_841774062.jpg" id="_10_5_622020d_1132928313337_875707_7398" refElementId="_10_5_622020d_1132928313337_875707_7398"><annotatedElement humanName="Annotated Element" mode="s,e"><interface classType="Interface" humanType="Interface" icon="index_files/icon_interface_1046467249.jpg" name="Map" refElementId="_9_5_f720368_1110473546706_995864_8893" refid="_9_5_f720368_1110473546706_995864_8893"/></annotatedElement><body humanName="Body" mode="s,e">An object that maps keys to values.  A map cannot contain duplicate keys;
each key can map to at most one value.

&lt;p&gt;This interface takes the place of the &lt;tt&gt;Dictionary&lt;/tt&gt; class, which
was a totally abstract class rather than an interface.

&lt;p&gt;The &lt;tt&gt;Map&lt;/tt&gt; interface provides three &lt;i&gt;collection views&lt;/i&gt;, which
allow a map's contents to be viewed as a set of keys, collection of values,
or set of key-value mappings.  The &lt;i&gt;order&lt;/i&gt; of a map is defined as
the order in which the iterators on the map's collection views return their
elements.  Some map implementations, like the &lt;tt&gt;TreeMap&lt;/tt&gt; class, make
specific guarantees as to their order; others, like the &lt;tt&gt;HashMap&lt;/tt&gt;
class, do not.

&lt;p&gt;Note: great care must be exercised if mutable objects are used as map
keys.  The behavior of a map is not specified if the value of an object is
changed in a manner that affects equals comparisons while the object is a
key in the map.  A special case of this prohibition is that it is not
permissible for a map to contain itself as a key.  While it is permissible
for a map to contain itself as a value, extreme caution is advised: the
equals and hashCode methods are no longer well defined on a such a map.

&lt;p&gt;All general-purpose map implementation classes should provide two
"standard" constructors: a void (no arguments) constructor which creates an
empty map, and a constructor with a single argument of type &lt;tt&gt;Map&lt;/tt&gt;,
which creates a new map with the same key-value mappings as its argument.
In effect, the latter constructor allows the user to copy any map,
producing an equivalent map of the desired class.  There is no way to
enforce this recommendation (as interfaces cannot contain constructors) but
all of the general-purpose map implementations in the JDK comply.

&lt;p&gt;The "destructive" methods contained in this interface, that is, the
methods that modify the map on which they operate, are specified to throw
&lt;tt&gt;UnsupportedOperationException&lt;/tt&gt; if this map does not support the
operation.  If this is the case, these methods may, but are not required
to, throw an &lt;tt&gt;UnsupportedOperationException&lt;/tt&gt; if the invocation would
have no effect on the map.  For example, invoking the {@link #putAll(Map)}
method on an unmodifiable map may, but is not required to, throw the
exception if the map whose mappings are to be "superimposed" is empty.

&lt;p&gt;Some map implementations have restrictions on the keys and values they
may contain.  For example, some implementations prohibit null keys and
values, and some have restrictions on the types of their keys.  Attempting
to insert an ineligible key or value throws an unchecked exception,
typically &lt;tt&gt;NullPointerException&lt;/tt&gt; or &lt;tt&gt;ClassCastException&lt;/tt&gt;.
Attempting to query the presence of an ineligible key or value may throw an
exception, or it may simply return false; some implementations will exhibit
the former behavior and some will exhibit the latter.  More generally,
attempting an operation on an ineligible key or value whose completion
would not result in the insertion of an ineligible element into the map may
throw an exception or it may succeed, at the option of the implementation.
Such exceptions are marked as "optional" in the specification for this
interface.

&lt;p&gt;This interface is a member of the
&lt;a href="{@docRoot}/../guide/collections/index.html"&gt;
Java Collections Framework&lt;/a&gt;.

&lt;p&gt;Many methods in Collections Framework interfaces are defined
in terms of the {@link Object#equals(Object) equals} method.  For
example, the specification for the {@link #containsKey(Object)
contains(Object key)} method says: "returns &lt;tt&gt;true&lt;/tt&gt; if and
only if this map contain a mapping for a key &lt;tt&gt;k&lt;/tt&gt; such that
&lt;tt&gt;(key==null ? k==null : key.equals(k))&lt;/tt&gt;." This specification should
&lt;i&gt;not&lt;/i&gt; be construed to imply that invoking &lt;tt&gt;Map.containsKey&lt;/tt&gt;
with a non-null argument &lt;tt&gt;key&lt;/tt&gt; will cause &lt;tt&gt;key.equals(k)&lt;/tt&gt; to
be invoked for any key &lt;tt&gt;k&lt;/tt&gt;.  Implementations are free to
implement optimizations whereby the &lt;tt&gt;equals&lt;/tt&gt; invocation is avoided,
for example, by first comparing the hash codes of the two keys.  (The
{@link Object#hashCode()} specification guarantees that two objects with
unequal hash codes cannot be equal.)  More generally, implementations of
the various Collections Framework interfaces are free to take advantage of
the specified behavior of underlying {@link Object} methods wherever the
implementor deems it appropriate.

@author  Josh Bloch
@version 1.48, 06/28/04
@see HashMap
@see TreeMap
@see Hashtable
@see SortedMap
@see Collection
@see Set
@since 1.2
</body><documentation humanName="Documentation"/><owner classType="Interface" humanName="Owner" humanType="Interface" icon="index_files/icon_interface_1046467249.jpg" mode="s,e" name="Map" refElementId="_9_5_f720368_1110473546706_995864_8893" refid="_9_5_f720368_1110473546706_995864_8893"/><owningElement classType="Interface" humanName="Owning Element" humanType="Interface" icon="index_files/icon_interface_1046467249.jpg" name="Map" refElementId="_9_5_f720368_1110473546706_995864_8893" refid="_9_5_f720368_1110473546706_995864_8893"/><TO_DO humanName="To Do" mode="s,e"/></comment></magicdraw>