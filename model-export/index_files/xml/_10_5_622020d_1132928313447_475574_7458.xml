<?xml version="1.0" encoding="UTF-8"?><magicdraw><comment classType="Comment" humanType="Comment" icon="index_files/icon_comment_841774062.jpg" id="_10_5_622020d_1132928313447_475574_7458" refElementId="_10_5_622020d_1132928313447_475574_7458"><annotatedElement humanName="Annotated Element" mode="s,e"><class classType="Class" humanType="Class" icon="index_files/icon_class_555864569.jpg" name="Scanner" refElementId="_10_5_622020d_1132928313407_337116_7456" refid="_10_5_622020d_1132928313407_337116_7456"/></annotatedElement><body humanName="Body" mode="s,e">A simple text scanner which can parse primitive types and strings using
regular expressions.

&lt;p&gt;A &lt;code&gt;Scanner&lt;/code&gt; breaks its input into tokens using a
delimiter pattern, which by default matches whitespace. The resulting
tokens may then be converted into values of different types using the
various &lt;tt&gt;next&lt;/tt&gt; methods.

&lt;p&gt;For example, this code allows a user to read a number from
&lt;tt&gt;System.in&lt;/tt&gt;:
&lt;blockquote&gt;&lt;pre&gt;
Scanner sc = new Scanner(System.in);
int i = sc.nextInt();
&lt;/pre&gt;&lt;/blockquote&gt;

&lt;p&gt;As another example, this code allows &lt;code&gt;long&lt;/code&gt; types to be
assigned from entries in a file &lt;code&gt;myNumbers&lt;/code&gt;:
&lt;blockquote&gt;&lt;pre&gt;
Scanner sc = new Scanner(new File("myNumbers"));
while (sc.hasNextLong()) {
long aLong = sc.nextLong();
}&lt;/pre&gt;&lt;/blockquote&gt;

&lt;p&gt;The scanner can also use delimiters other than whitespace. This
example reads several items in from a string:
&lt;blockquote&gt;&lt;pre&gt;
String input = "1 fish 2 fish red fish blue fish";
Scanner s = new Scanner(input).useDelimiter("\\s*fish\\s*");
System.out.println(s.nextInt());
System.out.println(s.nextInt());
System.out.println(s.next());
System.out.println(s.next());
s.close(); &lt;/pre&gt;&lt;/blockquote&gt;
&lt;p&gt;
prints the following output:
&lt;blockquote&gt;&lt;pre&gt;
1
2
red
blue &lt;/pre&gt;&lt;/blockquote&gt;

&lt;p&gt;The same output can be generated with this code, which uses a regular
expression to parse all four tokens at once:
&lt;blockquote&gt;&lt;pre&gt;
String input = "1 fish 2 fish red fish blue fish";
Scanner s = new Scanner(input);
s.findInLine("(\\d+) fish (\\d+) fish (\\w+) fish (\\w+)");
MatchResult result = s.match();
for (int i=1; i&lt;=result.groupCount(); i++)
System.out.println(result.group(i);
s.close(); &lt;/pre&gt;&lt;/blockquote&gt;

&lt;p&gt;The default whitespace delimiter used by a scanner is as
recognized by {@link java.lang.Character}.{@link
java.lang.Character#isWhitespace(char) isWhitespace}.

&lt;p&gt;A scanning operation may block waiting for input.

&lt;p&gt;The {@link #next} and {@link #hasNext} methods and their
primitive-type companion methods (such as {@link #nextInt} and
{@link #hasNextInt}) first skip any input that matches the delimiter
pattern, and then attempt to return the next token. Both &lt;tt&gt;hasNext&lt;/tt&gt;
and &lt;tt&gt;next&lt;/tt&gt; methods may block waiting for further input.  Whether a
&lt;tt&gt;hasNext&lt;/tt&gt; method blocks has no connection to whether or not its
associated &lt;tt&gt;next&lt;/tt&gt; method will block.

&lt;p&gt; The {@link #findInLine}, {@link #findWithinHorizon}, and {@link #skip}
methods operate independently of the delimiter pattern. These methods will
attempt to match the specified pattern with no regard to delimiters in the
input and thus can be used in special circumstances where delimiters are
not relevant. These methods may block waiting for more input.

&lt;p&gt;When a scanner throws an {@link InputMismatchException}, the scanner
will not pass the token that caused the exception, so that it may be
retrieved or skipped via some other method.

&lt;p&gt;Depending upon the type of delimiting pattern, empty tokens may be
returned. For example, the pattern &lt;tt&gt;"\\s+"&lt;/tt&gt; will return no empty
tokens since it matches multiple instances of the delimiter. The delimiting
pattern &lt;tt&gt;"\\s"&lt;/tt&gt; could return empty tokens since it only passes one
space at a time.

&lt;p&gt; A scanner can read text from any object which implements the {@link
java.lang.Readable} interface.  If an invocation of the underlying
readable's {@link java.lang.Readable#read} method throws an {@link
java.io.IOException} then the scanner assumes that the end of the input
has been reached.  The most recent &lt;tt&gt;IOException&lt;/tt&gt; thrown by the
underlying readable can be retrieved via the {@link #ioException} method.

&lt;p&gt;When a &lt;code&gt;Scanner&lt;/code&gt; is closed, it will close its input source
if the source implements the {@link java.io.Closeable} interface.

&lt;p&gt;A &lt;code&gt;Scanner&lt;/code&gt; is not safe for multithreaded use without
external synchronization.

&lt;p&gt;Unless otherwise mentioned, passing a &lt;code&gt;null&lt;/code&gt; parameter into
any method of a &lt;code&gt;Scanner&lt;/code&gt; will cause a
&lt;code&gt;NullPointerException&lt;/code&gt; to be thrown.

&lt;p&gt;A scanner will default to interpreting numbers as decimal unless a
different radix has been set by using the {@link #useRadix} method.

&lt;a name="localized-numbers"&gt;
&lt;h4&gt; Localized numbers &lt;/h4&gt;

&lt;p&gt; An instance of this class is capable of scanning numbers in the standard
formats as well as in the formats of the scanner's locale. A scanner's
initial locale is the value returned by the {@link
java.util.Locale#getDefault} method; it may be changed via the {@link
#useLocale} method.

&lt;p&gt;The localized formats are defined in terms of the following parameters,
which for a particular locale are taken from that locale's {@link
java.text.DecimalFormat DecimalFormat} object, &lt;tt&gt;df&lt;/tt&gt;, and its and
{@link java.text.DecimalFormatSymbols DecimalFormatSymbols} object,
&lt;tt&gt;dfs&lt;/tt&gt;.

&lt;blockquote&gt;&lt;table&gt;
&lt;tr&gt;&lt;td valign="top"&gt;&lt;i&gt;LocalGroupSeparator&amp;nbsp;&amp;nbsp;&lt;/i&gt;&lt;/td&gt;
&lt;td valign="top"&gt;The character used to separate thousands groups,
&lt;i&gt;i.e.,&lt;/i&gt;&amp;nbsp;&lt;tt&gt;dfs.&lt;/tt&gt;{@link
java.text.DecimalFormatSymbols#getGroupingSeparator
getGroupingSeparator()}&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top"&gt;&lt;i&gt;LocalDecimalSeparator&amp;nbsp;&amp;nbsp;&lt;/i&gt;&lt;/td&gt;
&lt;td valign="top"&gt;The character used for the decimal point,
&lt;i&gt;i.e.,&lt;/i&gt;&amp;nbsp;&lt;tt&gt;dfs.&lt;/tt&gt;{@link
java.text.DecimalFormatSymbols#getDecimalSeparator
getDecimalSeparator()}&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top"&gt;&lt;i&gt;LocalPositivePrefix&amp;nbsp;&amp;nbsp;&lt;/i&gt;&lt;/td&gt;
&lt;td valign="top"&gt;The string that appears before a positive number (may
be empty), &lt;i&gt;i.e.,&lt;/i&gt;&amp;nbsp;&lt;tt&gt;df.&lt;/tt&gt;{@link
java.text.DecimalFormat#getPositivePrefix
getPositivePrefix()}&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top"&gt;&lt;i&gt;LocalPositiveSuffix&amp;nbsp;&amp;nbsp;&lt;/i&gt;&lt;/td&gt;
&lt;td valign="top"&gt;The string that appears after a positive number (may be
empty), &lt;i&gt;i.e.,&lt;/i&gt;&amp;nbsp;&lt;tt&gt;df.&lt;/tt&gt;{@link
java.text.DecimalFormat#getPositiveSuffix
getPositiveSuffix()}&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top"&gt;&lt;i&gt;LocalNegativePrefix&amp;nbsp;&amp;nbsp;&lt;/i&gt;&lt;/td&gt;
&lt;td valign="top"&gt;The string that appears before a negative number (may
be empty), &lt;i&gt;i.e.,&lt;/i&gt;&amp;nbsp;&lt;tt&gt;df.&lt;/tt&gt;{@link
java.text.DecimalFormat#getNegativePrefix
getNegativePrefix()}&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top"&gt;&lt;i&gt;LocalNegativeSuffix&amp;nbsp;&amp;nbsp;&lt;/i&gt;&lt;/td&gt;
&lt;td valign="top"&gt;The string that appears after a negative number (may be
empty), &lt;i&gt;i.e.,&lt;/i&gt;&amp;nbsp;&lt;tt&gt;df.&lt;/tt&gt;{@link
java.text.DecimalFormat#getNegativeSuffix
getNegativeSuffix()}&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top"&gt;&lt;i&gt;LocalNaN&amp;nbsp;&amp;nbsp;&lt;/i&gt;&lt;/td&gt;
&lt;td valign="top"&gt;The string that represents not-a-number for
floating-point values,
&lt;i&gt;i.e.,&lt;/i&gt;&amp;nbsp;&lt;tt&gt;dfs.&lt;/tt&gt;{@link
java.text.DecimalFormatSymbols#getInfinity
getInfinity()}&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top"&gt;&lt;i&gt;LocalInfinity&amp;nbsp;&amp;nbsp;&lt;/i&gt;&lt;/td&gt;
&lt;td valign="top"&gt;The string that represents infinity for floating-point
values, &lt;i&gt;i.e.,&lt;/i&gt;&amp;nbsp;&lt;tt&gt;dfs.&lt;/tt&gt;{@link
java.text.DecimalFormatSymbols#getInfinity
getInfinity()}&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;&lt;/blockquote&gt;

&lt;a name="number-syntax"&gt;
&lt;h4&gt; Number syntax &lt;/h4&gt;

&lt;p&gt; The strings that can be parsed as numbers by an instance of this class
are specified in terms of the following regular-expression grammar, where
Rmax is the highest digit in the radix being used (for example, Rmax is 9
in base 10).

&lt;p&gt;
&lt;table cellspacing=0 cellpadding=0 align=center&gt;

&lt;tr&gt;&lt;td valign=top align=right&gt;&lt;i&gt;NonASCIIDigit&lt;/i&gt;&amp;nbsp;&amp;nbsp;::&lt;/td&gt;
&lt;td valign=top&gt;= A non-ASCII character c for which
{@link java.lang.Character#isDigit Character.isDigit}&lt;tt&gt;(c)&lt;/tt&gt;
returns&amp;nbsp;true&lt;/td&gt;&lt;/tr&gt;

&lt;tr&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;/tr&gt;

&lt;tr&gt;&lt;td align=right&gt;&lt;i&gt;Non0Digit&lt;/i&gt;&amp;nbsp;&amp;nbsp;::&lt;/td&gt;
&lt;td&gt;&lt;tt&gt;= [1-&lt;/tt&gt;&lt;i&gt;Rmax&lt;/i&gt;&lt;tt&gt;] | &lt;/tt&gt;&lt;i&gt;NonASCIIDigit&lt;/i&gt;&lt;/td&gt;&lt;/tr&gt;

&lt;tr&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;/tr&gt;

&lt;tr&gt;&lt;td align=right&gt;&lt;i&gt;Digit&lt;/i&gt;&amp;nbsp;&amp;nbsp;::&lt;/td&gt;
&lt;td&gt;&lt;tt&gt;= [0-&lt;/tt&gt;&lt;i&gt;Rmax&lt;/i&gt;&lt;tt&gt;] | &lt;/tt&gt;&lt;i&gt;NonASCIIDigit&lt;/i&gt;&lt;/td&gt;&lt;/tr&gt;

&lt;tr&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;/tr&gt;

&lt;tr&gt;&lt;td valign=top align=right&gt;&lt;i&gt;GroupedNumeral&lt;/i&gt;&amp;nbsp;&amp;nbsp;::&lt;/td&gt;
&lt;td valign=top&gt;
&lt;table cellpadding=0 cellspacing=0&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt&gt;= (&amp;nbsp;&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;&lt;i&gt;Non0Digit&lt;/i&gt;&lt;tt&gt;
&lt;/tt&gt;&lt;i&gt;Digit&lt;/i&gt;&lt;tt&gt;?
&lt;/tt&gt;&lt;i&gt;Digit&lt;/i&gt;&lt;tt&gt;?&lt;/tt&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;tt&gt;(&amp;nbsp;&lt;/tt&gt;&lt;i&gt;LocalGroupSeparator&lt;/i&gt;&lt;tt&gt;
&lt;/tt&gt;&lt;i&gt;Digit&lt;/i&gt;&lt;tt&gt;
&lt;/tt&gt;&lt;i&gt;Digit&lt;/i&gt;&lt;tt&gt;
&lt;/tt&gt;&lt;i&gt;Digit&lt;/i&gt;&lt;tt&gt; )+ )&lt;/tt&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;&lt;/td&gt;&lt;/tr&gt;

&lt;tr&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;/tr&gt;

&lt;tr&gt;&lt;td align=right&gt;&lt;i&gt;Numeral&lt;/i&gt;&amp;nbsp;&amp;nbsp;::&lt;/td&gt;
&lt;td&gt;&lt;tt&gt;= ( ( &lt;/tt&gt;&lt;i&gt;Digit&lt;/i&gt;&lt;tt&gt;+ )
| &lt;/tt&gt;&lt;i&gt;GroupedNumeral&lt;/i&gt;&lt;tt&gt; )&lt;/tt&gt;&lt;/td&gt;&lt;/tr&gt;

&lt;tr&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;/tr&gt;

&lt;tr&gt;&lt;td valign=top align=right&gt;
&lt;a name="Integer-regex"&gt;&lt;i&gt;Integer&lt;/i&gt;&amp;nbsp;&amp;nbsp;::&lt;/td&gt;
&lt;td valign=top&gt;&lt;tt&gt;= ( [-+]? ( &lt;/tt&gt;&lt;i&gt;Numeral&lt;/i&gt;&lt;tt&gt;
) )&lt;/tt&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;tt&gt;| &lt;/tt&gt;&lt;i&gt;LocalPositivePrefix&lt;/i&gt;&lt;tt&gt; &lt;/tt&gt;&lt;i&gt;Numeral&lt;/i&gt;&lt;tt&gt;
&lt;/tt&gt;&lt;i&gt;LocalPositiveSuffix&lt;/i&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;tt&gt;| &lt;/tt&gt;&lt;i&gt;LocalNegativePrefix&lt;/i&gt;&lt;tt&gt; &lt;/tt&gt;&lt;i&gt;Numeral&lt;/i&gt;&lt;tt&gt;
&lt;/tt&gt;&lt;i&gt;LocalNegativeSuffix&lt;/i&gt;&lt;/td&gt;&lt;/tr&gt;

&lt;tr&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;/tr&gt;

&lt;tr&gt;&lt;td align=right&gt;&lt;i&gt;DecimalNumeral&lt;/i&gt;&amp;nbsp;&amp;nbsp;::&lt;/td&gt;
&lt;td&gt;&lt;tt&gt;= &lt;/tt&gt;&lt;i&gt;Numeral&lt;/i&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;tt&gt;| &lt;/tt&gt;&lt;i&gt;Numeral&lt;/i&gt;&lt;tt&gt;
&lt;/tt&gt;&lt;i&gt;LocalDecimalSeparator&lt;/i&gt;&lt;tt&gt;
&lt;/tt&gt;&lt;i&gt;Digit&lt;/i&gt;&lt;tt&gt;*&lt;/tt&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;tt&gt;| &lt;/tt&gt;&lt;i&gt;LocalDecimalSeparator&lt;/i&gt;&lt;tt&gt;
&lt;/tt&gt;&lt;i&gt;Digit&lt;/i&gt;&lt;tt&gt;+&lt;/tt&gt;&lt;/td&gt;&lt;/tr&gt;

&lt;tr&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;/tr&gt;

&lt;tr&gt;&lt;td align=right&gt;&lt;i&gt;Exponent&lt;/i&gt;&amp;nbsp;&amp;nbsp;::&lt;/td&gt;
&lt;td&gt;&lt;tt&gt;= ( [eE] [+-]? &lt;/tt&gt;&lt;i&gt;Digit&lt;/i&gt;&lt;tt&gt;+ )&lt;/tt&gt;&lt;/td&gt;&lt;/tr&gt;

&lt;tr&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;/tr&gt;

&lt;tr&gt;&lt;td align=right&gt;
&lt;a name="Decimal-regex"&gt;&lt;i&gt;Decimal&lt;/i&gt;&amp;nbsp;&amp;nbsp;::&lt;/td&gt;
&lt;td&gt;&lt;tt&gt;= ( [-+]? &lt;/tt&gt;&lt;i&gt;DecimalNumeral&lt;/i&gt;&lt;tt&gt;
&lt;/tt&gt;&lt;i&gt;Exponent&lt;/i&gt;&lt;tt&gt;? )&lt;/tt&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;tt&gt;| &lt;/tt&gt;&lt;i&gt;LocalPositivePrefix&lt;/i&gt;&lt;tt&gt;
&lt;/tt&gt;&lt;i&gt;DecimalNumeral&lt;/i&gt;&lt;tt&gt;
&lt;/tt&gt;&lt;i&gt;LocalPositiveSuffix&lt;/i&gt;
&lt;/tt&gt;&lt;i&gt;Exponent&lt;/i&gt;&lt;tt&gt;?&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;tt&gt;| &lt;/tt&gt;&lt;i&gt;LocalNegativePrefix&lt;/i&gt;&lt;tt&gt;
&lt;/tt&gt;&lt;i&gt;DecimalNumeral&lt;/i&gt;&lt;tt&gt;
&lt;/tt&gt;&lt;i&gt;LocalNegativeSuffix&lt;/i&gt;
&lt;/tt&gt;&lt;i&gt;Exponent&lt;/i&gt;&lt;tt&gt;?&lt;/td&gt;&lt;/tr&gt;

&lt;tr&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;/tr&gt;

&lt;tr&gt;&lt;td align=right&gt;&lt;i&gt;HexFloat&lt;/i&gt;&amp;nbsp;&amp;nbsp;::&lt;/td&gt;
&lt;td&gt;&lt;tt&gt;= [-+]? 0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+
([pP][-+]?[0-9]+)?&lt;/tt&gt;&lt;/td&gt;&lt;/tr&gt;

&lt;tr&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;/tr&gt;

&lt;tr&gt;&lt;td align=right&gt;&lt;i&gt;NonNumber&lt;/i&gt;&amp;nbsp;&amp;nbsp;::&lt;/td&gt;
&lt;td valign=top&gt;&lt;tt&gt;= NaN
| &lt;/tt&gt;&lt;i&gt;LocalNan&lt;/i&gt;&lt;tt&gt;
| Infinity
| &lt;/tt&gt;&lt;i&gt;LocalInfinity&lt;/i&gt;&lt;/td&gt;&lt;/tr&gt;

&lt;tr&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;/tr&gt;

&lt;tr&gt;&lt;td align=right&gt;&lt;i&gt;SignedNonNumber&lt;/i&gt;&amp;nbsp;&amp;nbsp;::&lt;/td&gt;
&lt;td&gt;&lt;tt&gt;= ( [-+]? &lt;/tt&gt;&lt;i&gt;NonNumber&lt;/i&gt;&lt;tt&gt; )&lt;/tt&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;tt&gt;| &lt;/tt&gt;&lt;i&gt;LocalPositivePrefix&lt;/i&gt;&lt;tt&gt;
&lt;/tt&gt;&lt;i&gt;NonNumber&lt;/i&gt;&lt;tt&gt;
&lt;/tt&gt;&lt;i&gt;LocalPositiveSuffix&lt;/i&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;tt&gt;| &lt;/tt&gt;&lt;i&gt;LocalNegativePrefix&lt;/i&gt;&lt;tt&gt;
&lt;/tt&gt;&lt;i&gt;NonNumber&lt;/i&gt;&lt;tt&gt;
&lt;/tt&gt;&lt;i&gt;LocalNegativeSuffix&lt;/i&gt;&lt;/td&gt;&lt;/tr&gt;

&lt;tr&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;/tr&gt;

&lt;tr&gt;&lt;td valign=top align=right&gt;
&lt;a name="Float-regex"&gt;&lt;i&gt;Float&lt;/i&gt;&amp;nbsp;&amp;nbsp;::&lt;/td&gt;
&lt;td valign=top&gt;&lt;tt&gt;= &lt;/tt&gt;&lt;i&gt;Decimal&lt;/i&gt;&lt;tt&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;tt&gt;| &lt;/tt&gt;&lt;i&gt;HexFloat&lt;/i&gt;&lt;tt&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;tt&gt;| &lt;/tt&gt;&lt;i&gt;SignedNonNumber&lt;/i&gt;&lt;tt&gt;&lt;/td&gt;&lt;/tr&gt;

&lt;/table&gt;
&lt;/center&gt;

&lt;p&gt; Whitespace is not significant in the above regular expressions.

@version 1.15, 07/15/04
@since   1.5
</body><documentation humanName="Documentation"/><owner classType="Class" humanName="Owner" humanType="Class" icon="index_files/icon_class_555864569.jpg" mode="s,e" name="Scanner" refElementId="_10_5_622020d_1132928313407_337116_7456" refid="_10_5_622020d_1132928313407_337116_7456"/><owningElement classType="Class" humanName="Owning Element" humanType="Class" icon="index_files/icon_class_555864569.jpg" name="Scanner" refElementId="_10_5_622020d_1132928313407_337116_7456" refid="_10_5_622020d_1132928313407_337116_7456"/><TO_DO humanName="To Do" mode="s,e"/></comment></magicdraw>