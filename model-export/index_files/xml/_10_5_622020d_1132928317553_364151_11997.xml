<?xml version="1.0" encoding="UTF-8"?><magicdraw><comment classType="Comment" humanType="Comment" icon="index_files/icon_comment_841774062.jpg" id="_10_5_622020d_1132928317553_364151_11997" refElementId="_10_5_622020d_1132928317553_364151_11997"><annotatedElement humanName="Annotated Element" mode="s,e"><class classType="Class" humanType="Class" icon="index_files/icon_class_555864569.jpg" name="ComponentView" refElementId="_9_5_f720368_1110473546784_352959_10433" refid="_9_5_f720368_1110473546784_352959_10433"/></annotatedElement><body humanName="Body" mode="s,e">Component decorator that implements the view interface.  The
entire element is used to represent the component.  This acts
as a gateway from the display-only View implementations to
interactive lightweight components (ie it allows components
to be embedded into the View hierarchy).
&lt;p&gt;
The component is placed relative to the text baseline
according to the value returned by
&lt;code&gt;Component.getAlignmentY&lt;/code&gt;.  For Swing components
this value can be conveniently set using the method
&lt;code&gt;JComponent.setAlignmentY&lt;/code&gt;.  For example, setting
a value of &lt;code&gt;0.75&lt;/code&gt; will cause 75 percent of the
component to be above the baseline, and 25 percent of the
component to be below the baseline.
&lt;p&gt;
This class is implemented to do the extra work necessary to
work properly in the presence of multiple threads (i.e. from
asynchronous notification of model changes for example) by
ensuring that all component access is done on the event thread.
&lt;p&gt;
The component used is determined by the return value of the
createComponent method.  The default implementation of this
method is to return the component held as an attribute of
the element (by calling StyleConstants.getComponent).  A
limitation of this behavior is that the component cannot
be used by more than one text component (i.e. with a shared
model).  Subclasses can remove this constraint by implementing
the createComponent to actually create a component based upon
some kind of specification contained in the attributes.  The
ObjectView class in the html package is an example of a
ComponentView implementation that supports multiple component
views of a shared model.

@author Timothy Prinzing
@version 1.54 12/19/03
</body><documentation humanName="Documentation"/><owner classType="Class" humanName="Owner" humanType="Class" icon="index_files/icon_class_555864569.jpg" mode="s,e" name="ComponentView" refElementId="_9_5_f720368_1110473546784_352959_10433" refid="_9_5_f720368_1110473546784_352959_10433"/><owningElement classType="Class" humanName="Owning Element" humanType="Class" icon="index_files/icon_class_555864569.jpg" name="ComponentView" refElementId="_9_5_f720368_1110473546784_352959_10433" refid="_9_5_f720368_1110473546784_352959_10433"/><TO_DO humanName="To Do" mode="s,e"/></comment></magicdraw>