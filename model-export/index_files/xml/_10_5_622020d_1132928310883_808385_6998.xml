<?xml version="1.0" encoding="UTF-8"?><magicdraw><comment classType="Comment" humanType="Comment" icon="index_files/icon_comment_841774062.jpg" id="_10_5_622020d_1132928310883_808385_6998" refElementId="_10_5_622020d_1132928310883_808385_6998"><annotatedElement humanName="Annotated Element" mode="s,e"><interface classType="Interface" humanType="Interface" icon="index_files/icon_interface_1046467249.jpg" name="Collection" refElementId="_9_5_f720368_1110473546706_555617_8841" refid="_9_5_f720368_1110473546706_555617_8841"/></annotatedElement><body humanName="Body" mode="s,e">The root interface in the &lt;i&gt;collection hierarchy&lt;/i&gt;.  A collection
represents a group of objects, known as its &lt;i&gt;elements&lt;/i&gt;.  Some
collections allow duplicate elements and others do not.  Some are ordered
and others unordered.  The JDK does not provide any &lt;i&gt;direct&lt;/i&gt;
implementations of this interface: it provides implementations of more
specific subinterfaces like &lt;tt&gt;Set&lt;/tt&gt; and &lt;tt&gt;List&lt;/tt&gt;.  This interface
is typically used to pass collections around and manipulate them where
maximum generality is desired.

&lt;p&gt;&lt;i&gt;Bags&lt;/i&gt; or &lt;i&gt;multisets&lt;/i&gt; (unordered collections that may contain
duplicate elements) should implement this interface directly.

&lt;p&gt;All general-purpose &lt;tt&gt;Collection&lt;/tt&gt; implementation classes (which
typically implement &lt;tt&gt;Collection&lt;/tt&gt; indirectly through one of its
subinterfaces) should provide two "standard" constructors: a void (no
arguments) constructor, which creates an empty collection, and a
constructor with a single argument of type &lt;tt&gt;Collection&lt;/tt&gt;, which
creates a new collection with the same elements as its argument.  In
effect, the latter constructor allows the user to copy any collection,
producing an equivalent collection of the desired implementation type.
There is no way to enforce this convention (as interfaces cannot contain
constructors) but all of the general-purpose &lt;tt&gt;Collection&lt;/tt&gt;
implementations in the Java platform libraries comply.

&lt;p&gt;The "destructive" methods contained in this interface, that is, the
methods that modify the collection on which they operate, are specified to
throw &lt;tt&gt;UnsupportedOperationException&lt;/tt&gt; if this collection does not
support the operation.  If this is the case, these methods may, but are not
required to, throw an &lt;tt&gt;UnsupportedOperationException&lt;/tt&gt; if the
invocation would have no effect on the collection.  For example, invoking
the {@link #addAll(Collection)} method on an unmodifiable collection may,
but is not required to, throw the exception if the collection to be added
is empty.

&lt;p&gt;Some collection implementations have restrictions on the elements that
they may contain.  For example, some implementations prohibit null elements,
and some have restrictions on the types of their elements.  Attempting to
add an ineligible element throws an unchecked exception, typically
&lt;tt&gt;NullPointerException&lt;/tt&gt; or &lt;tt&gt;ClassCastException&lt;/tt&gt;.  Attempting
to query the presence of an ineligible element may throw an exception,
or it may simply return false; some implementations will exhibit the former
behavior and some will exhibit the latter.  More generally, attempting an
operation on an ineligible element whose completion would not result in
the insertion of an ineligible element into the collection may throw an
exception or it may succeed, at the option of the implementation.
Such exceptions are marked as "optional" in the specification for this
interface.

&lt;p&gt;This interface is a member of the
&lt;a href="{@docRoot}/../guide/collections/index.html"&gt;
Java Collections Framework&lt;/a&gt;.

&lt;p&gt;Many methods in Collections Framework interfaces are defined in
terms of the {@link Object#equals(Object) equals} method.  For example,
the specification for the {@link #contains(Object) contains(Object o)}
method says: "returns &lt;tt&gt;true&lt;/tt&gt; if and only if this collection
contains at least one element &lt;tt&gt;e&lt;/tt&gt; such that
&lt;tt&gt;(o==null ? e==null : o.equals(e))&lt;/tt&gt;."  This specification should
&lt;i&gt;not&lt;/i&gt; be construed to imply that invoking &lt;tt&gt;Collection.contains&lt;/tt&gt;
with a non-null argument &lt;tt&gt;o&lt;/tt&gt; will cause &lt;tt&gt;o.equals(e)&lt;/tt&gt; to be
invoked for any element &lt;tt&gt;e&lt;/tt&gt;.  Implementations are free to implement
optimizations whereby the &lt;tt&gt;equals&lt;/tt&gt; invocation is avoided, for
example, by first comparing the hash codes of the two elements.  (The
{@link Object#hashCode()} specification guarantees that two objects with
unequal hash codes cannot be equal.)  More generally, implementations of
the various Collections Framework interfaces are free to take advantage of
the specified behavior of underlying {@link Object} methods wherever the
implementor deems it appropriate.

@author  Josh Bloch
@author  Neal Gafter
@version 1.49, 06/28/04
@see	    Set
@see	    List
@see	    Map
@see	    SortedSet
@see	    SortedMap
@see	    HashSet
@see	    TreeSet
@see	    ArrayList
@see	    LinkedList
@see	    Vector
@see     Collections
@see	    Arrays
@see	    AbstractCollection
@since 1.2
</body><documentation humanName="Documentation"/><owner classType="Interface" humanName="Owner" humanType="Interface" icon="index_files/icon_interface_1046467249.jpg" mode="s,e" name="Collection" refElementId="_9_5_f720368_1110473546706_555617_8841" refid="_9_5_f720368_1110473546706_555617_8841"/><owningElement classType="Interface" humanName="Owning Element" humanType="Interface" icon="index_files/icon_interface_1046467249.jpg" name="Collection" refElementId="_9_5_f720368_1110473546706_555617_8841" refid="_9_5_f720368_1110473546706_555617_8841"/><TO_DO humanName="To Do" mode="s,e"/></comment></magicdraw>