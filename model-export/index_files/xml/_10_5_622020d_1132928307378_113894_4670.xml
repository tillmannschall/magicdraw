<?xml version="1.0" encoding="UTF-8"?><magicdraw><comment classType="Comment" humanType="Comment" icon="index_files/icon_comment_841774062.jpg" id="_10_5_622020d_1132928307378_113894_4670" refElementId="_10_5_622020d_1132928307378_113894_4670"><annotatedElement humanName="Annotated Element" mode="s,e"><class classType="Class" humanType="Class" icon="index_files/icon_class_555864569.jpg" name="PipedOutputStream" refElementId="_9_5_f720368_1110473546612_932881_7461" refid="_9_5_f720368_1110473546612_932881_7461"/></annotatedElement><body humanName="Body" mode="s,e">A piped output stream can be connected to a piped input stream
to create a communications pipe. The piped output stream is the
sending end of the pipe. Typically, data is written to a
&lt;code&gt;PipedOutputStream&lt;/code&gt; object by one thread and data is
read from the connected &lt;code&gt;PipedInputStream&lt;/code&gt; by some
other thread. Attempting to use both objects from a single thread
is not recommended as it may deadlock the thread.

@author  James Gosling
@version 1.26, 12/19/03
@see     java.io.PipedInputStream
@since   JDK1.0
</body><documentation humanName="Documentation"/><owner classType="Class" humanName="Owner" humanType="Class" icon="index_files/icon_class_555864569.jpg" mode="s,e" name="PipedOutputStream" refElementId="_9_5_f720368_1110473546612_932881_7461" refid="_9_5_f720368_1110473546612_932881_7461"/><owningElement classType="Class" humanName="Owning Element" humanType="Class" icon="index_files/icon_class_555864569.jpg" name="PipedOutputStream" refElementId="_9_5_f720368_1110473546612_932881_7461" refid="_9_5_f720368_1110473546612_932881_7461"/><TO_DO humanName="To Do" mode="s,e"/></comment></magicdraw>