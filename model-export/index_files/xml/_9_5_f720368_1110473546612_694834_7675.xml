<?xml version="1.0" encoding="UTF-8"?><magicdraw><class classType="Class" humanType="Class" icon="index_files/icon_class_555864569.jpg" id="_9_5_f720368_1110473546612_694834_7675" refElementId="_9_5_f720368_1110473546612_694834_7675"><documentation humanName="Documentation" mode="s">This class is for runtime permissions. A RuntimePermission
contains a name (also referred to as a "target name") but
no actions list; you either have the named permission
or you don't.

&lt;P&gt;
The target name is the name of the runtime permission (see below). The
naming convention follows the  hierarchical property naming convention.
Also, an asterisk
may appear at the end of the name, following a ".", or by itself, to
signify a wildcard match. For example: "loadLibrary.*" or "*" is valid,
"*loadLibrary" or "a*b" is not valid.
&lt;P&gt;
The following table lists all the possible RuntimePermission target names,
and for each provides a description of what the permission allows
and a discussion of the risks of granting code the permission.
&lt;P&gt;

&lt;table border=1 cellpadding=5 summary="permission target name,
what the target allows,and associated risks"&gt;
&lt;tr&gt;
&lt;th&gt;Permission Target Name&lt;/th&gt;
&lt;th&gt;What the Permission Allows&lt;/th&gt;
&lt;th&gt;Risks of Allowing this Permission&lt;/th&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;createClassLoader&lt;/td&gt;
&lt;td&gt;Creation of a class loader&lt;/td&gt;
&lt;td&gt;This is an extremely dangerous permission to grant.
Malicious applications that can instantiate their own class
loaders could then load their own rogue classes into the system.
These newly loaded classes could be placed into any protection
domain by the class loader, thereby automatically granting the
classes the permissions for that domain.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;getClassLoader&lt;/td&gt;
&lt;td&gt;Retrieval of a class loader (e.g., the class loader for the calling
class)&lt;/td&gt;
&lt;td&gt;This would grant an attacker permission to get the
class loader for a particular class. This is dangerous because
having access to a class's class loader allows the attacker to
load other classes available to that class loader. The attacker
would typically otherwise not have access to those classes.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;setContextClassLoader&lt;/td&gt;
&lt;td&gt;Setting of the context class loader used by a thread&lt;/td&gt;
&lt;td&gt;The context class loader is used by system code and extensions
when they need to lookup resources that might not exist in the system
class loader. Granting setContextClassLoader permission would allow
code to change which context class loader is used
for a particular thread, including system threads.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;enableContextClassLoaderOverride&lt;/td&gt;
&lt;td&gt;Subclass implementation of the thread context class loader methods&lt;/td&gt;
&lt;td&gt;The context class loader is used by system code and extensions
when they need to lookup resources that might not exist in the system
class loader. Granting enableContextClassLoaderOverride permission would allow
a subclass of Thread to override the methods that are used
to get or set the context class loader for a particular thread.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;setSecurityManager&lt;/td&gt;
&lt;td&gt;Setting of the security manager (possibly replacing an existing one)
&lt;/td&gt;
&lt;td&gt;The security manager is a class that allows
applications to implement a security policy. Granting the setSecurityManager
permission would allow code to change which security manager is used by
installing a different, possibly less restrictive security manager,
thereby bypassing checks that would have been enforced by the original
security manager.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;createSecurityManager&lt;/td&gt;
&lt;td&gt;Creation of a new security manager&lt;/td&gt;
&lt;td&gt;This gives code access to protected, sensitive methods that may
disclose information about other classes or the execution stack.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;getenv.{variable name}&lt;/td&gt;
&lt;td&gt;Reading of the value of the specified environment variable&lt;/td&gt;
&lt;td&gt;This would allow code to read the value, or determine the
existence, of a particular environment variable.  This is
dangerous if the variable contains confidential data.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;exitVM&lt;/td&gt;
&lt;td&gt;Halting of the Java Virtual Machine&lt;/td&gt;
&lt;td&gt;This allows an attacker to mount a denial-of-service attack
by automatically forcing the virtual machine to halt.
Note: The "exitVM" permission is automatically granted to all code
loaded from the application class path, thus enabling applications
to terminate themselves.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;shutdownHooks&lt;/td&gt;
&lt;td&gt;Registration and cancellation of virtual-machine shutdown hooks&lt;/td&gt;
&lt;td&gt;This allows an attacker to register a malicious shutdown
hook that interferes with the clean shutdown of the virtual machine.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;setFactory&lt;/td&gt;
&lt;td&gt;Setting of the socket factory used by ServerSocket or Socket,
or of the stream handler factory used by URL&lt;/td&gt;
&lt;td&gt;This allows code to set the actual implementation
for the socket, server socket, stream handler, or RMI socket factory.
An attacker may set a faulty implementation which mangles the data
stream.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;setIO&lt;/td&gt;
&lt;td&gt;Setting of System.out, System.in, and System.err&lt;/td&gt;
&lt;td&gt;This allows changing the value of the standard system streams.
An attacker may change System.in to monitor and
steal user input, or may set System.err to a "null" OutputStream,
which would hide any error messages sent to System.err. &lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;modifyThread&lt;/td&gt;
&lt;td&gt;Modification of threads, e.g., via calls to Thread
&lt;tt&gt;interrupt&lt;/tt&gt;, &lt;tt&gt;stop&lt;/tt&gt;, &lt;tt&gt;suspend&lt;/tt&gt;,
&lt;tt&gt;resume&lt;/tt&gt;, &lt;tt&gt;setDaemon&lt;/tt&gt;, &lt;tt&gt;setPriority&lt;/tt&gt;,
&lt;tt&gt;setName&lt;/tt&gt; and &lt;tt&gt;setUncaughtExceptionHandler&lt;/tt&gt;
methods&lt;/td&gt;
&lt;td&gt;This allows an attacker to modify the behaviour of
any thread in the system.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;stopThread&lt;/td&gt;
&lt;td&gt;Stopping of threads via calls to the Thread &lt;code&gt;stop&lt;/code&gt;
method&lt;/td&gt;
&lt;td&gt;This allows code to stop any thread in the system provided that it is
already granted permission to access that thread.
This poses as a threat, because that code may corrupt the system by
killing existing threads.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;modifyThreadGroup&lt;/td&gt;
&lt;td&gt;modification of thread groups, e.g., via calls to ThreadGroup
&lt;code&gt;destroy&lt;/code&gt;, &lt;code&gt;getParent&lt;/code&gt;, &lt;code&gt;resume&lt;/code&gt;,
&lt;code&gt;setDaemon&lt;/code&gt;, &lt;code&gt;setMaxPriority&lt;/code&gt;, &lt;code&gt;stop&lt;/code&gt;,
and &lt;code&gt;suspend&lt;/code&gt; methods&lt;/td&gt;
&lt;td&gt;This allows an attacker to create thread groups and
set their run priority.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;getProtectionDomain&lt;/td&gt;
&lt;td&gt;Retrieval of the ProtectionDomain for a class&lt;/td&gt;
&lt;td&gt;This allows code to obtain policy information
for a particular code source. While obtaining policy information
does not compromise the security of the system, it does give
attackers additional information, such as local file names for
example, to better aim an attack.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;readFileDescriptor&lt;/td&gt;
&lt;td&gt;Reading of file descriptors&lt;/td&gt;
&lt;td&gt;This would allow code to read the particular file associated
with the file descriptor read. This is dangerous if the file
contains confidential data.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;writeFileDescriptor&lt;/td&gt;
&lt;td&gt;Writing to file descriptors&lt;/td&gt;
&lt;td&gt;This allows code to write to a particular file associated
with the descriptor. This is dangerous because it may allow
malicious code to plant viruses or at the very least, fill up
your entire disk.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;loadLibrary.{library name}&lt;/td&gt;
&lt;td&gt;Dynamic linking of the specified library&lt;/td&gt;
&lt;td&gt;It is dangerous to allow an applet permission to load native code
libraries, because the Java security architecture is not designed to and
does not prevent malicious behavior at the level of native code.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;accessClassInPackage.{package name}&lt;/td&gt;
&lt;td&gt;Access to the specified package via a class loader's
&lt;code&gt;loadClass&lt;/code&gt; method when that class loader calls
the SecurityManager &lt;code&gt;checkPackageAccess&lt;/code&gt; method&lt;/td&gt;
&lt;td&gt;This gives code access to classes in packages
to which it normally does not have access. Malicious code
may use these classes to help in its attempt to compromise
security in the system.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;defineClassInPackage.{package name}&lt;/td&gt;
&lt;td&gt;Definition of classes in the specified package, via a class
loader's &lt;code&gt;defineClass&lt;/code&gt; method when that class loader calls
the SecurityManager &lt;code&gt;checkPackageDefinition&lt;/code&gt; method.&lt;/td&gt;
&lt;td&gt;This grants code permission to define a class
in a particular package. This is dangerous because malicious
code with this permission may define rogue classes in
trusted packages like &lt;code&gt;java.security&lt;/code&gt; or &lt;code&gt;java.lang&lt;/code&gt;,
for example.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;accessDeclaredMembers&lt;/td&gt;
&lt;td&gt;Access to the declared members of a class&lt;/td&gt;
&lt;td&gt;This grants code permission to query a class for its public,
protected, default (package) access, and private fields and/or
methods. Although the code would have
access to the private and protected field and method names, it would not
have access to the private/protected field data and would not be able
to invoke any private methods. Nevertheless, malicious code
may use this information to better aim an attack.
Additionally, it may invoke any public methods and/or access public fields
in the class.  This could be dangerous if
the code would normally not be able to invoke those methods and/or
access the fields  because
it can't cast the object to the class/interface with those methods
and fields.
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;queuePrintJob&lt;/td&gt;
&lt;td&gt;Initiation of a print job request&lt;/td&gt;
&lt;td&gt;This could print sensitive information to a printer,
or simply waste paper.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;getStackTrace&lt;/td&gt;
&lt;td&gt;Retrieval of the stack trace information of another thread.&lt;/td&gt;
&lt;td&gt;This allows retrieval of the stack trace information of
another thread.  This might allow malicious code to monitor the
execution of threads and discover vulnerabilities in applications.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;setDefaultUncaughtExceptionHandler&lt;/td&gt;
&lt;td&gt;Setting the default handler to be used when a thread
terminates abruptly due to an uncaught exception&lt;/td&gt;
&lt;td&gt;This allows an attacker to register a malicious
uncaught exception handler that could interfere with termination
of a thread&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;preferences&lt;/td&gt;
&lt;td&gt;Represents the permission required to get access to the
java.util.prefs.Preferences implementations user or system root
which in turn allows retrieval or update operations within the
Preferences persistent backing store.) &lt;/td&gt;
&lt;td&gt;This permission allows the user to read from or write to the
preferences backing store if the user running the code has
sufficient OS privileges to read/write to that backing store.
The actual backing store may reside within a traditional filesystem
directory or within a registry depending on the platform OS&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;

@see java.security.BasicPermission
@see java.security.Permission
@see java.security.Permissions
@see java.security.PermissionCollection
@see java.lang.SecurityManager

@version 1.53 04/04/20

@author Marianne Mueller
@author Roland Schemers
</documentation><generalization humanName="Generalization"><generalization classType="Generalization" humanType="Generalization" icon="index_files/icon_generalization_1454922150.jpg" isRelationship="true" name="Generalization[JDK 5.0 Classes::java::lang::RuntimePermission -&gt; JDK 5.0 Classes::java::security::BasicPermission]" refElementId="_10_5_622020d_1132928321689_357934_13731" refid="_10_5_622020d_1132928321689_357934_13731"/></generalization><isAbstract humanName="Is Abstract" mode="s,e">false</isAbstract><isActive humanName="Is Active" mode="s,e">false</isActive><isFinalSpecialization humanName="Is Final Specialization" mode="e">true</isFinalSpecialization><isLeaf humanName="Is Leaf" mode="e">true</isLeaf><name humanName="Name" mode="s,e">RuntimePermission</name><namespace classType="Package" humanName="Namespace" humanType="Package" icon="index_files/icon_package_1518868172.jpg" name="lang" refElementId="_9_5_f720368_1110473547503_52464_17780" refid="_9_5_f720368_1110473547503_52464_17780"/><ownedComment humanName="Owned Comment"><comment classType="Comment" humanType="Comment" icon="index_files/icon_comment_841774062.jpg" name="This class is for runtime permissions. A RuntimePe..." refElementId="_10_5_622020d_1132928308109_195264_5135" refid="_10_5_622020d_1132928308109_195264_5135"/></ownedComment><ownedElement humanName="Owned Element"><generalization classType="Generalization" humanType="Generalization" icon="index_files/icon_generalization_1454922150.jpg" isRelationship="true" name="Generalization[JDK 5.0 Classes::java::lang::RuntimePermission -&gt; JDK 5.0 Classes::java::security::BasicPermission]" refElementId="_10_5_622020d_1132928321689_357934_13731" refid="_10_5_622020d_1132928321689_357934_13731"/><comment classType="Comment" humanType="Comment" icon="index_files/icon_comment_841774062.jpg" name="This class is for runtime permissions. A RuntimePe..." refElementId="_10_5_622020d_1132928308109_195264_5135" refid="_10_5_622020d_1132928308109_195264_5135"/></ownedElement><owner classType="Package" humanName="Owner" humanType="Package" icon="index_files/icon_package_1518868172.jpg" mode="s,e" name="lang" refElementId="_9_5_f720368_1110473547503_52464_17780" refid="_9_5_f720368_1110473547503_52464_17780"/><owningPackage classType="Package" humanName="Owning Package" humanType="Package" icon="index_files/icon_package_1518868172.jpg" name="lang" refElementId="_9_5_f720368_1110473547503_52464_17780" refid="_9_5_f720368_1110473547503_52464_17780"/><package classType="Package" humanName="Package" humanType="Package" icon="index_files/icon_package_1518868172.jpg" name="lang" refElementId="_9_5_f720368_1110473547503_52464_17780" refid="_9_5_f720368_1110473547503_52464_17780"/><qualifiedName humanName="Qualified Name" mode="e">JDK 5.0 Classes::java::lang::RuntimePermission</qualifiedName><superClass humanName="Super Class"><class classType="Class" humanType="Class" icon="index_files/icon_class_795627831.jpg" name="BasicPermission" refElementId="_9_5_f720368_1110473546674_30641_8429" refid="_9_5_f720368_1110473546674_30641_8429"/></superClass><TO_DO humanName="To Do" mode="s,e"/><visibility humanName="Visibility" mode="e">public</visibility></class></magicdraw>