<?xml version="1.0" encoding="UTF-8"?><magicdraw><comment classType="Comment" humanType="Comment" icon="index_files/icon_comment_841774062.jpg" id="_10_5_622020d_1132928307068_898290_4583" refElementId="_10_5_622020d_1132928307068_898290_4583"><annotatedElement humanName="Annotated Element" mode="s,e"><class classType="Class" humanType="Class" icon="index_files/icon_class_555864569.jpg" name="FilePermission" refElementId="_9_5_f720368_1110473546596_800173_7397" refid="_9_5_f720368_1110473546596_800173_7397"/></annotatedElement><body humanName="Body" mode="s,e">This class represents access to a file or directory.  A FilePermission consists
of a pathname and a set of actions valid for that pathname.
&lt;P&gt;
Pathname is the pathname of the file or directory granted the specified
actions. A pathname that ends in "/*" (where "/" is
the file separator character, &lt;code&gt;File.separatorChar&lt;/code&gt;) indicates
all the files and directories contained in that directory. A pathname
that ends with "/-" indicates (recursively) all files
and subdirectories contained in that directory. A pathname consisting of
the special token "&lt;&lt;ALL FILES&gt;&gt;" matches &lt;b&gt;any&lt;/b&gt; file.
&lt;P&gt;
Note: A pathname consisting of a single "*" indicates all the files
in the current directory, while a pathname consisting of a single "-"
indicates all the files in the current directory and
(recursively) all files and subdirectories contained in the current
directory.
&lt;P&gt;
The actions to be granted are passed to the constructor in a string containing
a list of one or more comma-separated keywords. The possible keywords are
"read", "write", "execute", and "delete". Their meaning is defined as follows:
&lt;P&gt;
&lt;DL&gt;
&lt;DT&gt; read &lt;DD&gt; read permission
&lt;DT&gt; write &lt;DD&gt; write permission
&lt;DT&gt; execute
&lt;DD&gt; execute permission. Allows &lt;code&gt;Runtime.exec&lt;/code&gt; to
be called. Corresponds to &lt;code&gt;SecurityManager.checkExec&lt;/code&gt;.
&lt;DT&gt; delete
&lt;DD&gt; delete permission. Allows &lt;code&gt;File.delete&lt;/code&gt; to
be called. Corresponds to &lt;code&gt;SecurityManager.checkDelete&lt;/code&gt;.
&lt;/DL&gt;
&lt;P&gt;
The actions string is converted to lowercase before processing.
&lt;P&gt;
Be careful when granting FilePermissions. Think about the implications
of granting read and especially write access to various files and
directories. The "&lt;&lt;ALL FILES&gt;&gt;" permission with write action is
especially dangerous. This grants permission to write to the entire
file system. One thing this effectively allows is replacement of the
system binary, including the JVM runtime environment.

&lt;p&gt;Please note: Code can always read a file from the same
directory it's in (or a subdirectory of that directory); it does not
need explicit permission to do so.

@see java.security.Permission
@see java.security.Permissions
@see java.security.PermissionCollection

@version 1.76 04/01/12

@author Marianne Mueller
@author Roland Schemers
@since 1.2

@serial exclude
</body><documentation humanName="Documentation"/><owner classType="Class" humanName="Owner" humanType="Class" icon="index_files/icon_class_555864569.jpg" mode="s,e" name="FilePermission" refElementId="_9_5_f720368_1110473546596_800173_7397" refid="_9_5_f720368_1110473546596_800173_7397"/><owningElement classType="Class" humanName="Owning Element" humanType="Class" icon="index_files/icon_class_555864569.jpg" name="FilePermission" refElementId="_9_5_f720368_1110473546596_800173_7397" refid="_9_5_f720368_1110473546596_800173_7397"/><TO_DO humanName="To Do" mode="s,e"/></comment></magicdraw>