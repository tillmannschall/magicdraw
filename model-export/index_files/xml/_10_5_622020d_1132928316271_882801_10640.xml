<?xml version="1.0" encoding="UTF-8"?><magicdraw><comment classType="Comment" humanType="Comment" icon="index_files/icon_comment_841774062.jpg" id="_10_5_622020d_1132928316271_882801_10640" refElementId="_10_5_622020d_1132928316271_882801_10640"><annotatedElement humanName="Annotated Element" mode="s,e"><class classType="Class" humanType="Class" icon="index_files/icon_class_555864569.jpg" name="LineEvent" refElementId="_9_5_f720368_1110473546737_342069_9733" refid="_9_5_f720368_1110473546737_342069_9733"/></annotatedElement><body humanName="Body" mode="s,e">The &lt;code&gt;LineEvent&lt;/code&gt; class encapsulates information that a line
sends its listeners whenever the line opens, closes, starts, or stops.
Each of these four state changes is represented by a corresponding
type of event.  A listener receives the event as a parameter to its
{@link LineListener#update update} method.  By querying the event,
the listener can learn the type of event, the line responsible for
the event, and how much data the line had processed when the event occurred.

&lt;p&gt;Although this class implements Serializable, attempts to
serialize a &lt;code&gt;LineEvent&lt;/code&gt; object will fail.

@author Kara Kytle
@version 1.26, 03/12/19

@see Line
@see LineListener#update
@since 1.3

@serial exclude
</body><documentation humanName="Documentation"/><owner classType="Class" humanName="Owner" humanType="Class" icon="index_files/icon_class_555864569.jpg" mode="s,e" name="LineEvent" refElementId="_9_5_f720368_1110473546737_342069_9733" refid="_9_5_f720368_1110473546737_342069_9733"/><owningElement classType="Class" humanName="Owning Element" humanType="Class" icon="index_files/icon_class_555864569.jpg" name="LineEvent" refElementId="_9_5_f720368_1110473546737_342069_9733" refid="_9_5_f720368_1110473546737_342069_9733"/><TO_DO humanName="To Do" mode="s,e"/></comment></magicdraw>