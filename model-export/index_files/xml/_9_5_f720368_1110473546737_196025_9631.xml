<?xml version="1.0" encoding="UTF-8"?><magicdraw><class classType="Class" humanType="Class" icon="index_files/icon_class_795627831.jpg" id="_9_5_f720368_1110473546737_196025_9631" refElementId="_9_5_f720368_1110473546737_196025_9631"><appliedStereotype humanName="Applied Stereotype" mode="s,e"><stereotype classType="Stereotype" humanType="Stereotype" icon="index_files/icon_stereotype_1510162775.jpg" name="JavaElement" refElementId="_622020d_1094808063737_359220_22" refid="_622020d_1094808063737_359220_22"/></appliedStereotype><report_appliedStereotype_tags humanName="Applied Stereotype" mode="s,e"><stereotype classType="Stereotype" humanType="Stereotype" icon="index_files/icon_stereotype_1510162775.jpg" name="JavaElement" refElementId="_622020d_1094808063737_359220_22" refid="_622020d_1094808063737_359220_22"><property classType="Property" humanName="Base_ Element" humanType="Property" icon="index_files/icon_property_699664027.jpg" name="base_Element" refElementId="_10_0EAPbeta2_be00301_1123760461861_180156_245" refid="_10_0EAPbeta2_be00301_1123760461861_180156_245"/><property classType="Property" humanName="Java Annotations" humanType="Property" icon="index_files/icon_property_699664027.jpg" name="JavaAnnotations" refElementId="_622020d_1094808990539_635117_1756" refid="_622020d_1094808990539_635117_1756"><String>@Deprecated</String></property></stereotype></report_appliedStereotype_tags><documentation humanName="Documentation" mode="s">&lt;p&gt; This is an abstract class for representing the system policy for
Subject-based authorization.  A subclass implementation
of this class provides a means to specify a Subject-based
access control &lt;code&gt;Policy&lt;/code&gt;.

&lt;p&gt; A &lt;code&gt;Policy&lt;/code&gt; object can be queried for the set of
Permissions granted to code running as a
&lt;code&gt;Principal&lt;/code&gt; in the following manner:

&lt;pre&gt;
policy = Policy.getPolicy();
PermissionCollection perms = policy.getPermissions(subject,
codeSource);
&lt;/pre&gt;

The &lt;code&gt;Policy&lt;/code&gt; object consults the local policy and returns
and appropriate &lt;code&gt;Permissions&lt;/code&gt; object with the
Permissions granted to the Principals associated with the
provided &lt;i&gt;subject&lt;/i&gt;, and granted to the code specified
by the provided &lt;i&gt;codeSource&lt;/i&gt;.

&lt;p&gt; A &lt;code&gt;Policy&lt;/code&gt; contains the following information.
Note that this example only represents the syntax for the default
&lt;code&gt;Policy&lt;/code&gt; implementation. Subclass implementations of this class
may implement alternative syntaxes and may retrieve the
&lt;code&gt;Policy&lt;/code&gt; from any source such as files, databases,
or servers.

&lt;p&gt; Each entry in the &lt;code&gt;Policy&lt;/code&gt; is represented as
a &lt;b&gt;&lt;i&gt;grant&lt;/i&gt;&lt;/b&gt; entry.  Each &lt;b&gt;&lt;i&gt;grant&lt;/i&gt;&lt;/b&gt; entry
specifies a codebase, code signers, and Principals triplet,
as well as the Permissions granted to that triplet.

&lt;pre&gt;
grant CodeBase ["URL"], Signedby ["signers"],
Principal [Principal_Class] "Principal_Name" {
Permission Permission_Class ["Target_Name"]
[, "Permission_Actions"]
[, signedBy "SignerName"];
};
&lt;/pre&gt;

The CodeBase and Signedby components of the triplet name/value pairs
are optional.  If they are not present, then any any codebase will match,
and any signer (including unsigned code) will match.
For Example,

&lt;pre&gt;
grant CodeBase "foo.com", Signedby "foo",
Principal com.sun.security.auth.SolarisPrincipal "duke" {
permission java.io.FilePermission "/home/duke", "read, write";
};
&lt;/pre&gt;

This &lt;b&gt;&lt;i&gt;grant&lt;/i&gt;&lt;/b&gt; entry specifies that code from "foo.com",
signed by "foo', and running as a &lt;code&gt;SolarisPrincipal&lt;/code&gt; with the
name, duke, has one &lt;code&gt;Permission&lt;/code&gt;.  This &lt;code&gt;Permission&lt;/code&gt;
permits the executing code to read and write files in the directory,
"/home/duke".

&lt;p&gt; To "run" as a particular &lt;code&gt;Principal&lt;/code&gt;,
code invokes the &lt;code&gt;Subject.doAs(subject, ...)&lt;/code&gt; method.
After invoking that method, the code runs as all the Principals
associated with the specified &lt;code&gt;Subject&lt;/code&gt;.
Note that this &lt;code&gt;Policy&lt;/code&gt; (and the Permissions
granted in this &lt;code&gt;Policy&lt;/code&gt;) only become effective
after the call to &lt;code&gt;Subject.doAs&lt;/code&gt; has occurred.

&lt;p&gt; Multiple Principals may be listed within one &lt;b&gt;&lt;i&gt;grant&lt;/i&gt;&lt;/b&gt; entry.
All the Principals in the grant entry must be associated with
the &lt;code&gt;Subject&lt;/code&gt; provided to &lt;code&gt;Subject.doAs&lt;/code&gt;
for that &lt;code&gt;Subject&lt;/code&gt; to be granted the specified Permissions.

&lt;pre&gt;
grant Principal com.sun.security.auth.SolarisPrincipal "duke",
Principal com.sun.security.auth.SolarisNumericUserPrincipal "0" {
permission java.io.FilePermission "/home/duke", "read, write";
permission java.net.SocketPermission "duke.com", "connect";
};
&lt;/pre&gt;

This entry grants any code running as both "duke" and "0"
permission to read and write files in duke's home directory,
as well as permission to make socket connections to "duke.com".

&lt;p&gt; Note that non Principal-based grant entries are not permitted
in this &lt;code&gt;Policy&lt;/code&gt;.  Therefore, grant entries such as:

&lt;pre&gt;
grant CodeBase "foo.com", Signedby "foo" {
permission java.io.FilePermission "/tmp/scratch", "read, write";
};
&lt;/pre&gt;

are rejected.  Such permission must be listed in the
&lt;code&gt;java.security.Policy&lt;/code&gt;.

&lt;p&gt; The default &lt;code&gt;Policy&lt;/code&gt; implementation can be changed by
setting the value of the "auth.policy.provider" security property
(in the Java security properties file) to the fully qualified name of
the desired &lt;code&gt;Policy&lt;/code&gt; implementation class.
The Java security properties file is located in the file named
&lt;JAVA_HOME&gt;/lib/security/java.security, where &lt;JAVA_HOME&gt;
refers to the directory where the JDK was installed.

@deprecated	as of JDK version 1.4 -- Replaced by java.security.Policy.
java.security.Policy has a method:
&lt;pre&gt;
public PermissionCollection getPermissions
(java.security.ProtectionDomain pd)

&lt;/pre&gt;
and ProtectionDomain has a constructor:
&lt;pre&gt;
public ProtectionDomain
(CodeSource cs,
PermissionCollection permissions,
ClassLoader loader,
Principal[] principals)
&lt;/pre&gt;

These two APIs provide callers the means to query the
Policy for Principal-based Permission entries.


@version 1.50, 05/18/04
</documentation><isAbstract humanName="Is Abstract" mode="s,e">true</isAbstract><isActive humanName="Is Active" mode="s,e">false</isActive><isFinalSpecialization humanName="Is Final Specialization" mode="e">false</isFinalSpecialization><isLeaf humanName="Is Leaf" mode="e">false</isLeaf><name humanName="Name" mode="s,e">Policy</name><namespace classType="Package" humanName="Namespace" humanType="Package" icon="index_files/icon_package_1518868172.jpg" name="auth" refElementId="_9_5_f720368_1110473548065_581421_20682" refid="_9_5_f720368_1110473548065_581421_20682"/><ownedComment humanName="Owned Comment"><comment classType="Comment" humanType="Comment" icon="index_files/icon_comment_841774062.jpg" name="&lt;p&gt; This is an abstract class for representing the..." refElementId="_10_5_622020d_1132928316121_685119_10487" refid="_10_5_622020d_1132928316121_685119_10487"/></ownedComment><ownedElement humanName="Owned Element"><comment classType="Comment" humanType="Comment" icon="index_files/icon_comment_841774062.jpg" name="&lt;p&gt; This is an abstract class for representing the..." refElementId="_10_5_622020d_1132928316121_685119_10487" refid="_10_5_622020d_1132928316121_685119_10487"/><stringtaggedvalue classType="StringTaggedValue" humanType="String Tagged Value" icon="index_files/icon_stringtaggedvalue_1155336626.jpg" name="JavaAnnotations = &quot;@Deprecated&quot;" refElementId="_10_5_622020d_1132928316111_801601_10484application_622020d_1094808990539_635117_1756" refid="_10_5_622020d_1132928316111_801601_10484application_622020d_1094808990539_635117_1756"/></ownedElement><owner classType="Package" humanName="Owner" humanType="Package" icon="index_files/icon_package_1518868172.jpg" mode="s,e" name="auth" refElementId="_9_5_f720368_1110473548065_581421_20682" refid="_9_5_f720368_1110473548065_581421_20682"/><owningPackage classType="Package" humanName="Owning Package" humanType="Package" icon="index_files/icon_package_1518868172.jpg" name="auth" refElementId="_9_5_f720368_1110473548065_581421_20682" refid="_9_5_f720368_1110473548065_581421_20682"/><package classType="Package" humanName="Package" humanType="Package" icon="index_files/icon_package_1518868172.jpg" name="auth" refElementId="_9_5_f720368_1110473548065_581421_20682" refid="_9_5_f720368_1110473548065_581421_20682"/><qualifiedName humanName="Qualified Name" mode="e">JDK 5.0 Classes::javax::security::auth::Policy</qualifiedName><taggedValue humanName="Tagged Value"><stringtaggedvalue classType="StringTaggedValue" humanType="String Tagged Value" icon="index_files/icon_stringtaggedvalue_1155336626.jpg" name="JavaAnnotations = &quot;@Deprecated&quot;" refElementId="_10_5_622020d_1132928316111_801601_10484application_622020d_1094808990539_635117_1756" refid="_10_5_622020d_1132928316111_801601_10484application_622020d_1094808990539_635117_1756"/></taggedValue><TO_DO humanName="To Do" mode="s,e"/><visibility humanName="Visibility" mode="e">public</visibility></class></magicdraw>