<?xml version="1.0" encoding="UTF-8"?><magicdraw><comment classType="Comment" humanType="Comment" icon="index_files/icon_comment_2051026490.jpg" id="_10_5_622020d_1132928309461_951964_6130"><annotatedElement humanName="Annotated Element" mode="s,e"><class classType="Class" humanType="Class" icon="index_files/icon_class_1555793073.jpg" name="SignedObject" refid="_9_5_f720368_1110473546690_607561_8537"/></annotatedElement><body humanName="Body" mode="s,e">&lt;p&gt; SignedObject is a class for the purpose of creating authentic
runtime objects whose integrity cannot be compromised without being
detected.

&lt;p&gt; More specifically, a SignedObject contains another Serializable
object, the (to-be-)signed object and its signature.

&lt;p&gt; The signed object is a "deep copy" (in serialized form) of an
original object.  Once the copy is made, further manipulation of
the original object has no side effect on the copy.

&lt;p&gt; The underlying signing algorithm is designated by the Signature
object passed to the constructor and the &lt;code&gt;verify&lt;/code&gt; method.
A typical usage for signing is the following:

&lt;p&gt; &lt;code&gt; &lt;pre&gt;
Signature signingEngine = Signature.getInstance(algorithm,
provider);
SignedObject so = new SignedObject(myobject, signingKey,
signingEngine);
&lt;/pre&gt; &lt;/code&gt;

&lt;p&gt; A typical usage for verification is the following (having
received SignedObject &lt;code&gt;so&lt;/code&gt;):

&lt;p&gt; &lt;code&gt; &lt;pre&gt;
Signature verificationEngine =
Signature.getInstance(algorithm, provider);
if (so.verify(publickey, verificationEngine))
try {
Object myobj = so.getObject();
} catch (java.lang.ClassNotFoundException e) {};
&lt;/pre&gt; &lt;/code&gt;

&lt;p&gt; Several points are worth noting.  First, there is no need to
initialize the signing or verification engine, as it will be
re-initialized inside the constructor and the &lt;code&gt;verify&lt;/code&gt;
method. Secondly, for verification to succeed, the specified
public key must be the public key corresponding to the private key
used to generate the SignedObject.

&lt;p&gt; More importantly, for flexibility reasons, the
constructor and &lt;code&gt;verify&lt;/code&gt; method allow for
customized signature engines, which can implement signature
algorithms that are not installed formally as part of a crypto
provider.  However, it is crucial that the programmer writing the
verifier code be aware what &lt;code&gt;Signature&lt;/code&gt; engine is being
used, as its own implementation of the &lt;code&gt;verify&lt;/code&gt; method
is invoked to verify a signature.  In other words, a malicious
&lt;code&gt;Signature&lt;/code&gt; may choose to always return true on
verification in an attempt to bypass a security check.

&lt;p&gt; The signature algorithm can be, among others, the NIST standard
DSA, using DSA and SHA-1.  The algorithm is specified using the
same convention as that for signatures. The DSA algorithm using the
SHA-1 message digest algorithm can be specified, for example, as
"SHA/DSA" or "SHA-1/DSA" (they are equivalent).  In the case of
RSA, there are multiple choices for the message digest algorithm,
so the signing algorithm could be specified as, for example,
"MD2/RSA", "MD5/RSA" or "SHA-1/RSA".  The algorithm name must be
specified, as there is no default.

&lt;p&gt; The name of the Cryptography Package Provider is designated
also by the Signature parameter to the constructor and the
&lt;code&gt;verify&lt;/code&gt; method.  If the provider is not
specified, the default provider is used.  Each installation can
be configured to use a particular provider as default.

&lt;p&gt; Potential applications of SignedObject include:
&lt;ul&gt;
&lt;li&gt; It can be used
internally to any Java runtime as an unforgeable authorization
token -- one that can be passed around without the fear that the
token can be maliciously modified without being detected.
&lt;li&gt; It
can be used to sign and serialize data/object for storage outside
the Java runtime (e.g., storing critical access control data on
disk).
&lt;li&gt; Nested SignedObjects can be used to construct a logical
sequence of signatures, resembling a chain of authorization and
delegation.
&lt;/ul&gt;

@see Signature

@version 	1.43, 12/19/03
@author Li Gong
</body><documentation humanName="Documentation"/><owner classType="Class" humanName="Owner" humanType="Class" icon="index_files/icon_class_1555793073.jpg" mode="s,e" name="SignedObject" refid="_9_5_f720368_1110473546690_607561_8537"/><owningElement classType="Class" humanName="Owning Element" humanType="Class" icon="index_files/icon_class_1555793073.jpg" name="SignedObject" refid="_9_5_f720368_1110473546690_607561_8537"/><TO_DO humanName="To Do" mode="s,e"/></comment></magicdraw>