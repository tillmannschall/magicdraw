<?xml version="1.0" encoding="UTF-8"?><magicdraw><comment classType="Comment" humanType="Comment" icon="index_files/icon_comment_841774062.jpg" id="_10_5_622020d_1132928310252_293478_6694" refElementId="_10_5_622020d_1132928310252_293478_6694"><annotatedElement humanName="Annotated Element" mode="s,e"><interface classType="Interface" humanType="Interface" icon="index_files/icon_interface_1046467249.jpg" name="ThreadFactory" refElementId="_10_5_622020d_1132928310242_498462_6692" refid="_10_5_622020d_1132928310242_498462_6692"/></annotatedElement><body humanName="Body" mode="s,e">An object that creates new threads on demand.  Using thread factories
removes hardwiring of calls to {@link Thread#Thread(Runnable) new Thread},
enabling applications to use special thread subclasses, priorities, etc.

&lt;p&gt;
The simplest implementation of this interface is just:
&lt;pre&gt;
class SimpleThreadFactory implements ThreadFactory {
public Thread newThread(Runnable r) {
return new Thread(r);
}
}
&lt;/pre&gt;

The {@link Executors#defaultThreadFactory} method provides a more
useful simple implementation, that sets the created thread context
to known values before returning it.
@since 1.5
@author Doug Lea
</body><documentation humanName="Documentation"/><owner classType="Interface" humanName="Owner" humanType="Interface" icon="index_files/icon_interface_1046467249.jpg" mode="s,e" name="ThreadFactory" refElementId="_10_5_622020d_1132928310242_498462_6692" refid="_10_5_622020d_1132928310242_498462_6692"/><owningElement classType="Interface" humanName="Owning Element" humanType="Interface" icon="index_files/icon_interface_1046467249.jpg" name="ThreadFactory" refElementId="_10_5_622020d_1132928310242_498462_6692" refid="_10_5_622020d_1132928310242_498462_6692"/><TO_DO humanName="To Do" mode="s,e"/></comment></magicdraw>