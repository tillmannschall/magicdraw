<?xml version="1.0" encoding="UTF-8"?><magicdraw><comment classType="Comment" humanType="Comment" icon="index_files/icon_comment_2051026490.jpg" id="_10_5_622020d_1132928310182_302016_6571"><annotatedElement humanName="Annotated Element" mode="s,e"><class classType="Class" humanType="Class" icon="index_files/icon_class_1555793073.jpg" name="ExecutorCompletionService" refid="_10_5_622020d_1132928310182_531644_6564"/></annotatedElement><body humanName="Body" mode="s,e">A {@link CompletionService} that uses a supplied {@link Executor}
to execute tasks.  This class arranges that submitted tasks are,
upon completion, placed on a queue accessible using &lt;tt&gt;take&lt;/tt&gt;.
The class is lightweight enough to be suitable for transient use
when processing groups of tasks.

&lt;p&gt;

&lt;b&gt;Usage Examples.&lt;/b&gt;

Suppose you have a set of solvers for a certain problem, each
returning a value of some type &lt;tt&gt;Result&lt;/tt&gt;, and would like to
run them concurrently, processing the results of each of them that
return a non-null value, in some method &lt;tt&gt;use(Result r)&lt;/tt&gt;. You
could write this as:

&lt;pre&gt;
void solve(Executor e, Collection&lt;Callable&lt;Result&gt;&gt; solvers)
throws InterruptedException, ExecutionException {
CompletionService&lt;Result&gt; ecs = new ExecutorCompletionService&lt;Result&gt;(e);
for (Callable&lt;Result&gt; s : solvers)
ecs.submit(s);
int n = solvers.size();
for (int i = 0; i &lt; n; ++i) {
Result r = ecs.take().get();
if (r != null)
use(r);
}
}
&lt;/pre&gt;

Suppose instead that you would like to use the first non-null result
of the set of tasks, ignoring any that encounter exceptions,
and cancelling all other tasks when the first one is ready:

&lt;pre&gt;
void solve(Executor e, Collection&lt;Callable&lt;Result&gt;&gt; solvers)
throws InterruptedException {
CompletionService&lt;Result&gt; ecs = new ExecutorCompletionService&lt;Result&gt;(e);
int n = solvers.size();
List&lt;Future&lt;Result&gt;&gt; futures = new ArrayList&lt;Future&lt;Result&gt;&gt;(n);
Result result = null;
try {
for (Callable&lt;Result&gt; s : solvers)
futures.add(ecs.submit(s));
for (int i = 0; i &lt; n; ++i) {
try {
Result r = ecs.take().get();
if (r != null) {
result = r;
break;
}
} catch(ExecutionException ignore) {}
}
}
finally {
for (Future&lt;Result&gt; f : futures)
f.cancel(true);
}

if (result != null)
use(result);
}
&lt;/pre&gt;
</body><documentation humanName="Documentation"/><owner classType="Class" humanName="Owner" humanType="Class" icon="index_files/icon_class_1555793073.jpg" mode="s,e" name="ExecutorCompletionService" refid="_10_5_622020d_1132928310182_531644_6564"/><owningElement classType="Class" humanName="Owning Element" humanType="Class" icon="index_files/icon_class_1555793073.jpg" name="ExecutorCompletionService" refid="_10_5_622020d_1132928310182_531644_6564"/><TO_DO humanName="To Do" mode="s,e"/></comment></magicdraw>