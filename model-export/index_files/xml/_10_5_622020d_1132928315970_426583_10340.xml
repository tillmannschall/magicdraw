<?xml version="1.0" encoding="UTF-8"?><magicdraw><comment classType="Comment" humanType="Comment" icon="index_files/icon_comment_841774062.jpg" id="_10_5_622020d_1132928315970_426583_10340" refElementId="_10_5_622020d_1132928315970_426583_10340"><annotatedElement humanName="Annotated Element" mode="s,e"><class classType="Class" humanType="Class" icon="index_files/icon_class_555864569.jpg" name="DocFlavor" refElementId="_9_5_f720368_1110473546737_169550_9515" refid="_9_5_f720368_1110473546737_169550_9515"/></annotatedElement><body humanName="Body" mode="s,e">Class &lt;code&gt;DocFlavor&lt;/code&gt; encapsulates an object that specifies the
format in which print data is supplied to a {@link DocPrintJob}.
"Doc" is a short, easy-to-pronounce term that means "a piece of print data."
The print data format, or "doc flavor", consists of two things:
&lt;UL&gt;
&lt;LI&gt;
&lt;B&gt;MIME type.&lt;/B&gt; This is a Multipurpose Internet Mail Extensions (MIME)
media type (as defined in &lt;A HREF="http://www.ietf.org/rfc/rfc2045.txt"&gt;RFC
2045&lt;/A&gt; and &lt;A HREF="http://www.ietf.org/rfc/rfc2046.txt"&gt;RFC 2046&lt;/A&gt;)
that specifies how the print data is to be interpreted.
The charset of text data should be the IANA MIME-preferred name, or its
canonical name if no preferred name is specified. Additionally a few
historical names supported by earlier versions of the Java platform may
be recognized.
See &lt;a href="../../java/lang/package-summary.html#charenc"&gt;
character encodings&lt;/a&gt; for more information on the character encodings
supported on the Java platform.
&lt;P&gt;
&lt;LI&gt;
&lt;B&gt;Representation class name.&lt;/B&gt; This specifies the fully-qualified name of
the class of the object from which the actual print data comes, as returned
by the {@link java.lang.Class#getName() &lt;CODE&gt;Class.getName()&lt;/CODE&gt;} method.
(Thus the class name for &lt;CODE&gt;byte[]&lt;/CODE&gt; is &lt;CODE&gt;"[B"&lt;/CODE&gt;, for
&lt;CODE&gt;char[]&lt;/CODE&gt; it is &lt;CODE&gt;"[C"&lt;/CODE&gt;.)
&lt;/UL&gt;
&lt;P&gt;
A &lt;code&gt;DocPrintJob&lt;/code&gt; obtains its print data by means of interface
{@link Doc Doc}. A &lt;code&gt;Doc&lt;/code&gt; object lets the &lt;code&gt;DocPrintJob&lt;/code&gt;
determine the doc flavor the client can supply.  A &lt;code&gt;Doc&lt;/code&gt; object
also lets the &lt;code&gt;DocPrintJob&lt;/code&gt; obtain an instance of the doc flavor's
representation class, from which the &lt;code&gt;DocPrintJob&lt;/code&gt; then obtains
the actual print data.
&lt;P&gt;
&lt;HR&gt;
&lt;H3&gt;Client Formatted Print Data&lt;/H3&gt;
There are two broad categories of print data, client formatted print data
and service formatted print data.
&lt;P&gt;
For &lt;B&gt;client formatted print data&lt;/B&gt;, the client determines or knows the
print data format.
For example the client may have a JPEG encoded image, a URL for
HTML code, or a disk file containing plain text in some encoding,
possibly obtained from an external source, and
requires a way to describe the data format to the print service.
&lt;p&gt;
The doc flavor's representation class is a conduit for the JPS
&lt;code&gt;DocPrintJob&lt;/code&gt; to obtain a sequence of characters or
bytes from the client. The
doc flavor's MIME type is one of the standard media types telling how to
interpret the sequence of characters or bytes. For a list of standard media
types, see the Internet Assigned Numbers Authority's (IANA's) &lt;A
HREF="http://www.isi.edu/in-notes/iana/assignments/media-types/"&gt;Media Types
Directory&lt;/A&gt;. Interface {@link Doc Doc} provides two utility operations,
{@link Doc#getReaderForText() getReaderForText} and
{@link Doc#getStreamForBytes() getStreamForBytes()}, to help a
&lt;code&gt;Doc&lt;/code&gt; object's client extract client formatted print data.
&lt;P&gt;
For client formatted print data, the print data representation class is
typically one of the following (although other representation classes are
permitted):
&lt;UL&gt;
&lt;LI&gt;
Character array (&lt;CODE&gt;char[]&lt;/CODE&gt;) -- The print data consists of the
Unicde characters in the array.
&lt;P&gt;
&lt;LI&gt;
&lt;code&gt;String&lt;/code&gt;  --
The print data consists of the Unicode characters in the string.
&lt;P&gt;
&lt;LI&gt;
Character stream ({@link java.io.Reader java.io.Reader})
-- The print data consists of the Unicode characters read from the stream
up to the end-of-stream.
&lt;P&gt;
&lt;LI&gt;
Byte array (&lt;CODE&gt;byte[]&lt;/CODE&gt;) -- The print data consists of the bytes in
the array. The bytes are encoded in the character set specified by the doc
flavor's MIME type. If the MIME type does not specify a character set, the
default character set is US-ASCII.
&lt;P&gt;
&lt;LI&gt;
Byte stream ({@link java.io.InputStream java.io.InputStream}) --
The print data consists of the bytes read from the stream up to the
end-of-stream. The bytes are encoded in the character set specified by the
doc flavor's MIME type. If the MIME type does not specify a character set,
the default character set is US-ASCII.
&lt;LI&gt;
Uniform Resource Locator ({@link java.net.URL URL})
-- The print data consists of the bytes read from the URL location.
The bytes are encoded in the character set specified by the doc flavor's
MIME type. If the MIME type does not specify a character set, the default
character set is US-ASCII.
&lt;P&gt;
When the representation class is a URL, the print service itself accesses
and downloads the document directly from its URL address, without involving
the client. The service may be some form of network print service which
is executing in a different environment.
This means you should not use a URL print data flavor to print a
document at a restricted URL that the client can see but the printer cannot
see. This also means you should not use a URL print data flavor to print a
document stored in a local file that is not available at a URL
accessible independently of the client.
For example, a file that is not served up by an HTTP server or FTP server.
To print such documents, let the client open an input stream on the URL
or file and use an input stream data flavor.
&lt;/UL&gt;
&lt;p&gt;
&lt;HR&gt;
&lt;h3&gt;Default and Platform Encodings&lt;/h3&gt;
&lt;P&gt;
For byte print data where the doc flavor's MIME type does not include a
&lt;CODE&gt;charset&lt;/CODE&gt; parameter, the Java Print Service instance assumes the
US-ASCII character set by default. This is in accordance with
&lt;A HREF="http://www.ietf.org/rfc/rfc2046.txt"&gt;RFC 2046&lt;/A&gt;, which says the
default character set is US-ASCII. Note that US-ASCII is a subset of
UTF-8, so in the future this may be widened if a future RFC endorses
UTF-8 as the default in a compatible manner.
&lt;p&gt;
Also note that this is different than the behaviour of the Java runtime
when interpreting a stream of bytes as text data. That assumes the
default encoding for the user's locale. Thus, when spooling a file in local
encoding to a Java Print Service it is important to correctly specify
the encoding. Developers working in the English locales should
be particularly conscious of this, as their platform encoding corresponds
to the default mime charset. By this coincidence that particular
case may work without specifying the encoding of platform data.
&lt;p&gt;
Every instance of the Java virtual machine has a default character encoding
determined during virtual-machine startup and typically depends upon the
locale and charset being used by the underlying operating system.
In a distributed environment there is no gurantee that two VM's share
the same default encoding. Thus clients which want to stream platform
encoded text data from the host platform to a Java Print Service instance
must explicitly declare the charset and not rely on defaults.
&lt;p&gt;
The preferred form is the official IANA primary name for an encoding.
Applications which stream text data should always specify the charset
in the mime type, which necessitates obtaining the encoding of the host
platform for data (eg files) stored in that platform's encoding.
A CharSet which corresponds to this and is suitable for use in a
mime-type for a DocFlavor can be obtained
from {@link DocFlavor#hostEncoding &lt;CODE&gt;DocFlavor.hostEncoding&lt;/CODE&gt;}
This may not always be the primary IANA name but is guaranteed to be
understood by this VM.
For common flavors, the pre-defined *HOST DocFlavors may be used.
&lt;p&gt;
&lt;p&gt;
See &lt;a href="../../java/lang/package-summary.html#charenc"&gt;
character encodings&lt;/a&gt; for more information on the character encodings
supported on the Java platform.
&lt;p&gt;
&lt;HR&gt;
&lt;h3&gt;Recommended DocFlavors&lt;/h3&gt;
&lt;P&gt;
The Java Print Service API does not define any mandatorily supported
DocFlavors.
However, here are some examples of MIME types that a Java Print Service
instance might support for client formatted print data.
Nested classes inside class DocFlavor declare predefined static
constant DocFlavor objects for these example doc flavors; class DocFlavor's
constructor can be used to create an arbitrary doc flavor.
&lt;UL&gt;
&lt;LI&gt;Preformatted text
&lt;P&gt;
&lt;TABLE BORDER=1 CELLPADDING=0 CELLSPACING=0 SUMMARY="MIME-Types and their descriptions"&gt;
&lt;TR&gt;
&lt;TH&gt;MIME-Type&lt;/TH&gt;&lt;TH&gt;Description&lt;/TH&gt;
&lt;/TR&gt;
&lt;TR&gt;
&lt;TD&gt;&lt;CODE&gt;"text/plain"&lt;/CODE&gt;&lt;/TD&gt;
&lt;TD&gt;Plain text in the default character set (US-ASCII)&lt;/TD&gt;
&lt;/TR&gt;
&lt;TR&gt;
&lt;TD&gt;&lt;CODE&gt;"text/plain; charset=&lt;I&gt;xxx&lt;/I&gt;"&lt;/CODE&gt;&lt;/TD&gt;
&lt;TD&gt;Plain text in character set &lt;I&gt;xxx&lt;/I&gt;&lt;/TD&gt;
&lt;/TR&gt;
&lt;TR&gt;
&lt;TD&gt;&lt;CODE&gt;"text/html"&lt;/CODE&gt;&lt;/TD&gt;
&lt;TD&gt;HyperText Markup Language in the default character set (US-ASCII)&lt;/TD&gt;
&lt;/TR&gt;
&lt;TR&gt;
&lt;TD&gt;&lt;CODE&gt;"text/html; charset=&lt;I&gt;xxx&lt;/I&gt;"&lt;/CODE&gt;&lt;/TD&gt;
&lt;TD&gt;HyperText Markup Language in character set &lt;I&gt;xxx&lt;/I&gt;&lt;/TD&gt;
&lt;/TR&gt;
&lt;/TABLE&gt;
&lt;P&gt;
In general, preformatted text print data is provided either in a character
oriented representation class (character array, String, Reader) or in a
byte oriented representation class (byte array, InputStream, URL).
&lt;P&gt;
&lt;LI&gt;Preformatted page description language (PDL) documents
&lt;P&gt;
&lt;TABLE BORDER=1 CELLPADDING=0 CELLSPACING=0 SUMMARY="MIME-Types and their descriptions"&gt;
&lt;TR&gt;
&lt;TH&gt;MIME-Type&lt;/TH&gt;&lt;TH&gt;Description&lt;/TH&gt;
&lt;/TR&gt;
&lt;TR&gt;
&lt;TD&gt;&lt;CODE&gt;"application/pdf"&lt;/CODE&gt;&lt;/TD&gt;
&lt;TD&gt;Portable Document Format document&lt;/TD&gt;
&lt;/TR&gt;
&lt;TR&gt;
&lt;TD&gt;&lt;CODE&gt;"application/postscript"&lt;/CODE&gt;&lt;/TD&gt;
&lt;TD&gt;PostScript document&lt;/TD&gt;
&lt;/TR&gt;
&lt;TR&gt;
&lt;TD&gt;&lt;CODE&gt;"application/vnd.hp-PCL"&lt;/CODE&gt;&lt;/TD&gt;
&lt;TD&gt;Printer Control Language document&lt;/TD&gt;
&lt;/TR&gt;
&lt;/TABLE&gt;
&lt;P&gt;
In general, preformatted PDL print data is provided in a byte oriented
representation class (byte array, InputStream, URL).
&lt;P&gt;
&lt;LI&gt;Preformatted images
&lt;P&gt;
&lt;TABLE BORDER=1 CELLPADDING=0 CELLSPACING=0 SUMMARY="MIME-Types and their descriptions"&gt;
&lt;TR&gt;
&lt;TH&gt;MIME-Type&lt;/TH&gt;&lt;TH&gt;Description&lt;/TH&gt;
&lt;/TR&gt;

&lt;TR&gt;
&lt;TD&gt;&lt;CODE&gt;"image/gif"&lt;/CODE&gt;&lt;/TD&gt;
&lt;TD&gt;Graphics Interchange Format image&lt;/TD&gt;
&lt;/TR&gt;
&lt;TR&gt;
&lt;TD&gt;&lt;CODE&gt;"image/jpeg"&lt;/CODE&gt;&lt;/TD&gt;
&lt;TD&gt;Joint Photographic Experts Group image&lt;/TD&gt;
&lt;/TR&gt;
&lt;TR&gt;
&lt;TD&gt;&lt;CODE&gt;"image/png"&lt;/CODE&gt;&lt;/TD&gt;
&lt;TD&gt;Portable Network Graphics image&lt;/TD&gt;
&lt;/TR&gt;
&lt;/TABLE&gt;
&lt;P&gt;
In general, preformatted image print data is provided in a byte oriented
representation class (byte array, InputStream, URL).
&lt;P&gt;
&lt;LI&gt;Preformatted autosense print data
&lt;P&gt;
&lt;TABLE BORDER=1 CELLPADDING=0 CELLSPACING=0 SUMMARY="MIME-Types and their descriptions"&gt;
&lt;TR&gt;
&lt;TH&gt;MIME-Type&lt;/TH&gt;&lt;TH&gt;Description&lt;/TH&gt;
&lt;/TR&gt;

&lt;TR&gt;
&lt;TD&gt;&lt;CODE&gt;"application/octet-stream"&lt;/CODE&gt;&lt;/TD&gt;
&lt;TD&gt;The print data format is unspecified (just an octet stream)&lt;/TD&gt;
&lt;/TABLE&gt;
&lt;P&gt;
The printer decides how to interpret the print data; the way this
"autosensing" works is implementation dependent. In general, preformatted
autosense print data is provided in a byte oriented representation class
(byte array, InputStream, URL).

&lt;P&gt;
&lt;HR&gt;
&lt;H3&gt;Service Formatted Print Data&lt;/H3&gt;
&lt;P&gt;
For &lt;B&gt;service formatted print data&lt;/B&gt;, the Java Print Service instance
determines the print data format. The doc flavor's representation class
denotes an interface whose methods the &lt;code&gt;DocPrintJob&lt;/code&gt; invokes to
determine the content to be printed -- such as a renderable image
interface or a Java 2 printable interface.
The doc flavor's MIME type is the special value
&lt;CODE&gt;"application/x-java-jvm-local-objectref"&lt;/CODE&gt; indicating the client
will supply a reference to a Java object that implements the interface
named as the representation class.
This MIME type is just a placeholder; what's
important is the print data representation class.
&lt;P&gt;
For service formatted print data, the print data representation class is
typically one of the following (although other representation classes are
permitted). Nested classes inside class DocFlavor declare predefined static
constant DocFlavor objects for these example doc flavors; class DocFlavor's
constructor can be used to create an arbitrary doc flavor.
&lt;UL&gt;
&lt;LI&gt;
Renderable image object -- The client supplies an object that implements
interface
{@link java.awt.image.renderable.RenderableImage RenderableImage}. The
printer calls methods
in that interface to obtain the image to be printed.
&lt;P&gt;
&lt;LI&gt;
Printable object -- The client supplies an object that implements interface
{@link java.awt.print.Printable Printable}.
The printer calls methods in that interface to obtain the pages to be
printed, one by one.
For each page, the printer supplies a graphics context, and whatever the
client draws in that graphics context gets printed.
&lt;P&gt;
&lt;LI&gt;
Pageable object -- The client supplies an object that implements interface
{@link java.awt.print.Pageable Pageable}. The printer calls
methods in that interface to obtain the pages to be printed, one by one.
For each page, the printer supplies a graphics context, and whatever
the client draws in that graphics context gets printed.
&lt;/UL&gt;
&lt;P&gt;
&lt;HR&gt;
&lt;P&gt;
&lt;HR&gt;
&lt;H3&gt;Pre-defined Doc Flavors&lt;/H3&gt;
A Java Print Service instance is not &lt;B&gt;&lt;I&gt;required&lt;/I&gt;&lt;/B&gt; to support the
following print data formats and print data representation classes.  In
fact, a developer using this class should &lt;b&gt;never&lt;/b&gt; assume that a
particular print service supports the document types corresponding to
these pre-defined doc flavors.  Always query the print service
to determine what doc flavors it supports.  However,
developers who have print services that support these doc flavors are
encouraged to refer to the predefined singleton instances created here.
&lt;UL&gt;
&lt;LI&gt;
Plain text print data provided through a byte stream. Specifically, the
following doc flavors are recommended to be supported:
&lt;BR&gt;&amp;#183;&amp;nbsp;&amp;nbsp;
&lt;CODE&gt;("text/plain", "java.io.InputStream")&lt;/CODE&gt;
&lt;BR&gt;&amp;#183;&amp;nbsp;&amp;nbsp;
&lt;CODE&gt;("text/plain; charset=us-ascii", "java.io.InputStream")&lt;/CODE&gt;
&lt;BR&gt;&amp;#183;&amp;nbsp;&amp;nbsp;
&lt;CODE&gt;("text/plain; charset=utf-8", "java.io.InputStream")&lt;/CODE&gt;
&lt;P&gt;
&lt;LI&gt;
Renderable image objects. Specifically, the following doc flavor is
recommended to be supported:
&lt;BR&gt;&amp;#183;&amp;nbsp;&amp;nbsp;
&lt;CODE&gt;("application/x-java-jvm-local-objectref", "java.awt.image.renderable.RenderableImage")&lt;/CODE&gt;
&lt;/UL&gt;
&lt;P&gt;
A Java Print Service instance is allowed to support any other doc flavors
(or none) in addition to the above mandatory ones, at the implementation's
choice.
&lt;P&gt;
Support for the above doc flavors is desirable so a printing client can rely
on being able to print on any JPS printer, regardless of which doc flavors
the printer supports. If the printer doesn't support the client's preferred
doc flavor, the client can at least print plain text, or the client can
convert its data to a renderable image and print the image.
&lt;P&gt;
Furthermore, every Java Print Service instance must fulfill these
requirements for processing plain text print data:
&lt;UL&gt;
&lt;LI&gt;
The character pair carriage return-line feed (CR-LF) means
"go to column 1 of the next line."
&lt;LI&gt;
A carriage return (CR) character standing by itself means
"go to column 1 of the next line."
&lt;LI&gt;
A line feed (CR) character standing by itself means
"go to column 1 of the next line."
&lt;LI&gt;
&lt;/UL&gt;
&lt;P&gt;
The client must itself perform all plain text print data formatting not
addressed by the above requirements.
&lt;P&gt;
&lt;H3&gt;Design Rationale&lt;/H3&gt;
&lt;P&gt;
Class DocFlavor in package javax.print.data is similar to class
{@link java.awt.datatransfer.DataFlavor DataFlavor}. Class
&lt;code&gt;DataFlavor&lt;/code&gt;
is not used in the Java Print Service (JPS) API
for three reasons which are all rooted in allowing the JPS API to be
shared by other print services APIs which may need to run on Java profiles
which do not include all of the Java 2 Standard Edition.
&lt;OL TYPE=1&gt;
&lt;LI&gt;
The JPS API is designed to be used in Java profiles which do not support
AWT.
&lt;P&gt;
&lt;LI&gt;
The implementation of class &lt;code&gt;java.awt.datatransfer.DataFlavor&lt;/code&gt;
does not guarantee that equivalent data flavors will have the same
serialized representation. DocFlavor does, and can be used in services
which need this.
&lt;P&gt;
&lt;LI&gt;
The implementation of class &lt;code&gt;java.awt.datatransfer.DataFlavor&lt;/code&gt;
includes a human presentable name as part of the serialized representation.
This is not appropriate as part of a service matching constraint.
&lt;/OL&gt;
&lt;P&gt;
Class DocFlavor's serialized representation uses the following
canonical form of a MIME type string. Thus, two doc flavors with MIME types
that are not identical but that are equivalent (that have the same
canonical form) may be considered equal.
&lt;UL&gt;
&lt;LI&gt; The media type, media subtype, and parameters are retained, but all
comments and whitespace characters are discarded.
&lt;LI&gt; The media type, media subtype, and parameter names are converted to
lowercase.
&lt;LI&gt; The parameter values retain their original case, except a charset
parameter value for a text media type is converted to lowercase.
&lt;LI&gt; Quote characters surrounding parameter values are removed.
&lt;LI&gt; Quoting backslash characters inside parameter values are removed.
&lt;LI&gt; The parameters are arranged in ascending order of parameter name.
&lt;/UL&gt;
&lt;P&gt;
Class DocFlavor's serialized representation also contains the
fully-qualified class &lt;I&gt;name&lt;/I&gt; of the representation class
(a String object), rather than the representation class itself
(a Class object). This allows a client to examine the doc flavors a
Java Print Service instance supports without having
to load the representation classes, which may be problematic for
limited-resource clients.
&lt;P&gt;

@author  Alan Kaminsky
</body><documentation humanName="Documentation"/><owner classType="Class" humanName="Owner" humanType="Class" icon="index_files/icon_class_555864569.jpg" mode="s,e" name="DocFlavor" refElementId="_9_5_f720368_1110473546737_169550_9515" refid="_9_5_f720368_1110473546737_169550_9515"/><owningElement classType="Class" humanName="Owning Element" humanType="Class" icon="index_files/icon_class_555864569.jpg" name="DocFlavor" refElementId="_9_5_f720368_1110473546737_169550_9515" refid="_9_5_f720368_1110473546737_169550_9515"/><TO_DO humanName="To Do" mode="s,e"/></comment></magicdraw>