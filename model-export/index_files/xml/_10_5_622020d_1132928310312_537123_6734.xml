<?xml version="1.0" encoding="UTF-8"?><magicdraw><interface classType="Interface" humanType="Interface" icon="index_files/icon_interface_118881143.jpg" id="_10_5_622020d_1132928310312_537123_6734"><UMLClass classType="Class" humanName="Class" humanType="Class" icon="index_files/icon_class_303957224.jpg" name="Pack200" refid="_10_5_622020d_1132928310312_580161_6733"/><documentation humanName="Documentation" mode="standard">The packer engine applies various transformations to the input JAR file,
making the pack stream highly compressible by a compressor such as
gzip or zip. An instance of the engine can be obtained
using {@link #newPacker}.
The high degree of compression is achieved
by using a number of techniques described in the JSR 200 specification.
Some of the techniques are sorting, re-ordering and co-location of the
constant pool.
&lt;p&gt;
The pack engine is initialized to an initial state as described
by their properties below.
The initial state can be manipulated by getting the
engine properties (using {@link #properties}) and storing
the modified properties on the map.
The resource files will be passed through with no changes at all.
The class files will not contain identical bytes, since the unpacker
is free to change minor class file features such as constant pool order.
However, the class files will be semantically identical,
as specified in the Java Virtual Machine Specification
&lt;a href="http://java.sun.com/docs/books/vmspec/html/ClassFile.doc.html"&gt;http://java.sun.com/docs/books/vmspec/html/ClassFile.doc.html&lt;/a&gt;.
&lt;p&gt;
By default, the packer does not change the order of JAR elements.
Also, the modification time and deflation hint of each
JAR element is passed unchanged.
(Any other ZIP-archive information, such as extra attributes
giving Unix file permissions, are lost.)
&lt;p&gt;
Note that packing and unpacking a JAR will in general alter the
bytewise contents of classfiles in the JAR.  This means that packing
and unpacking will in general invalidate any digital signatures
which rely on bytewise images of JAR elements.  In order both to sign
and to pack a JAR, you must first pack and unpack the JAR to
"normalize" it, then compute signatures on the unpacked JAR elements,
and finally repack the signed JAR.
Both packing steps should
use precisely the same options, and the segment limit may also
need to be set to "-1", to prevent accidental variation of segment
boundaries as class file sizes change slightly.
&lt;p&gt;
(Here's why this works:  Any reordering the packer does
of any classfile structures is idempotent, so the second packing
does not change the orderings produced by the first packing.
Also, the unpacker is guaranteed by the JSR 200 specification
to produce a specific bytewise image for any given transmission
ordering of archive elements.)
</documentation><isAbstract humanName="Is Abstract">true</isAbstract><isFinalSpecialization humanName="Is Final Specialization" mode="e">false</isFinalSpecialization><isLeaf humanName="Is Leaf" mode="e">false</isLeaf><name humanName="Name" mode="s,e">Packer</name><namespace classType="Class" humanName="Namespace" humanType="Class" icon="index_files/icon_class_303957224.jpg" name="Pack200" refid="_10_5_622020d_1132928310312_580161_6733"/><ownedComment humanName="Owned Comment"><comment classType="Comment" humanType="Comment" icon="index_files/icon_comment_2051026490.jpg" refid="_10_5_622020d_1132928310312_394985_6735"/></ownedComment><ownedElement humanName="Owned Element"><comment classType="Comment" humanType="Comment" icon="index_files/icon_comment_2051026490.jpg" refid="_10_5_622020d_1132928310312_394985_6735"/></ownedElement><owner classType="Class" humanName="Owner" humanType="Class" icon="index_files/icon_class_303957224.jpg" mode="s,e" name="Pack200" refid="_10_5_622020d_1132928310312_580161_6733"/><qualifiedName humanName="Qualified Name" mode="e">JDK 5.0 Classes::java::util::jar::Pack200::Packer</qualifiedName><redefinitionContext humanName="Redefinition Context"><class classType="Class" humanType="Class" icon="index_files/icon_class_303957224.jpg" name="Pack200" refid="_10_5_622020d_1132928310312_580161_6733"/></redefinitionContext><TO_DO humanName="To Do" mode="s,e"/><visibility humanName="Visibility">public</visibility></interface></magicdraw>