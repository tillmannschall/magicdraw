<?xml version="1.0" encoding="UTF-8"?><magicdraw><comment classType="Comment" humanType="Comment" icon="index_files/icon_comment_841774062.jpg" id="_10_5_622020d_1132928307789_50193_4876" refElementId="_10_5_622020d_1132928307789_50193_4876"><annotatedElement humanName="Annotated Element" mode="s,e"><class classType="Class" humanType="Class" icon="index_files/icon_class_555864569.jpg" name="Constructor" refElementId="_9_5_f720368_1110473546612_903028_7527" refid="_9_5_f720368_1110473546612_903028_7527"/></annotatedElement><body humanName="Body" mode="s,e">&lt;code&gt;Constructor&lt;/code&gt; provides information about, and access to, a single
constructor for a class.

&lt;p&gt;&lt;code&gt;Constructor&lt;/code&gt; permits widening conversions to occur when matching the
actual parameters to newInstance() with the underlying
constructor's formal parameters, but throws an
&lt;code&gt;IllegalArgumentException&lt;/code&gt; if a narrowing conversion would occur.

@see Member
@see java.lang.Class
@see java.lang.Class#getConstructors()
@see java.lang.Class#getConstructor(Class[])
@see java.lang.Class#getDeclaredConstructors()

@author	Kenneth Russell
@author	Nakul Saraiya
</body><documentation humanName="Documentation"/><owner classType="Class" humanName="Owner" humanType="Class" icon="index_files/icon_class_555864569.jpg" mode="s,e" name="Constructor" refElementId="_9_5_f720368_1110473546612_903028_7527" refid="_9_5_f720368_1110473546612_903028_7527"/><owningElement classType="Class" humanName="Owning Element" humanType="Class" icon="index_files/icon_class_555864569.jpg" name="Constructor" refElementId="_9_5_f720368_1110473546612_903028_7527" refid="_9_5_f720368_1110473546612_903028_7527"/><TO_DO humanName="To Do" mode="s,e"/></comment></magicdraw>