<?xml version="1.0" encoding="UTF-8"?><magicdraw><comment classType="Comment" humanType="Comment" icon="index_files/icon_comment_841774062.jpg" id="_10_5_622020d_1132928310182_846214_6563" refElementId="_10_5_622020d_1132928310182_846214_6563"><annotatedElement humanName="Annotated Element" mode="s,e"><interface classType="Interface" humanType="Interface" icon="index_files/icon_interface_1046467249.jpg" name="Executor" refElementId="_10_5_622020d_1132928310172_766214_6561" refid="_10_5_622020d_1132928310172_766214_6561"/></annotatedElement><body humanName="Body" mode="s,e">An object that executes submitted {@link Runnable} tasks. This
interface provides a way of decoupling task submission from the
mechanics of how each task will be run, including details of thread
use, scheduling, etc.  An &lt;tt&gt;Executor&lt;/tt&gt; is normally used
instead of explicitly creating threads. For example, rather than
invoking &lt;tt&gt;new Thread(new(RunnableTask())).start()&lt;/tt&gt; for each
of a set of tasks, you might use:

&lt;pre&gt;
Executor executor = &lt;em&gt;anExecutor&lt;/em&gt;;
executor.execute(new RunnableTask1());
executor.execute(new RunnableTask2());
...
&lt;/pre&gt;

However, the &lt;tt&gt;Executor&lt;/tt&gt; interface does not strictly
require that execution be asynchronous. In the simplest case, an
executor can run the submitted task immediately in the caller's
thread:

&lt;pre&gt;
class DirectExecutor implements Executor {
public void execute(Runnable r) {
r.run();
}
}&lt;/pre&gt;

More typically, tasks are executed in some thread other
than the caller's thread.  The executor below spawns a new thread
for each task.

&lt;pre&gt;
class ThreadPerTaskExecutor implements Executor {
public void execute(Runnable r) {
new Thread(r).start();
}
}&lt;/pre&gt;

Many &lt;tt&gt;Executor&lt;/tt&gt; implementations impose some sort of
limitation on how and when tasks are scheduled.  The executor below
serializes the submission of tasks to a second executor,
illustrating a composite executor.

&lt;pre&gt;
class SerialExecutor implements Executor {
final Queue&lt;Runnable&gt; tasks = new LinkedBlockingQueue&lt;Runnable&gt;();
final Executor executor;
Runnable active;

SerialExecutor(Executor executor) {
this.executor = executor;
}

public synchronized void execute(final Runnable r) {
tasks.offer(new Runnable() {
public void run() {
try {
r.run();
} finally {
scheduleNext();
}
}
});
if (active == null) {
scheduleNext();
}
}

protected synchronized void scheduleNext() {
if ((active = tasks.poll()) != null) {
executor.execute(active);
}
}
}&lt;/pre&gt;

The &lt;tt&gt;Executor&lt;/tt&gt; implementations provided in this package
implement {@link ExecutorService}, which is a more extensive
interface.  The {@link ThreadPoolExecutor} class provides an
extensible thread pool implementation. The {@link Executors} class
provides convenient factory methods for these Executors.

@since 1.5
@author Doug Lea
</body><documentation humanName="Documentation"/><owner classType="Interface" humanName="Owner" humanType="Interface" icon="index_files/icon_interface_1046467249.jpg" mode="s,e" name="Executor" refElementId="_10_5_622020d_1132928310172_766214_6561" refid="_10_5_622020d_1132928310172_766214_6561"/><owningElement classType="Interface" humanName="Owning Element" humanType="Interface" icon="index_files/icon_interface_1046467249.jpg" name="Executor" refElementId="_10_5_622020d_1132928310172_766214_6561" refid="_10_5_622020d_1132928310172_766214_6561"/><TO_DO humanName="To Do" mode="s,e"/></comment></magicdraw>