<?xml version="1.0" encoding="UTF-8"?><magicdraw><comment classType="Comment" humanType="Comment" icon="index_files/icon_comment_2051026490.jpg" id="_10_5_622020d_1132928310312_991866_6739"><annotatedElement humanName="Annotated Element" mode="s,e"><class classType="Class" humanType="Class" icon="index_files/icon_class_303957224.jpg" name="Pack200" refid="_10_5_622020d_1132928310312_580161_6733"/></annotatedElement><body humanName="Body" mode="s,e">Transforms a JAR file to or from a packed stream in Pack200 format.
Please refer to Network Trasfer Format JSR 200 Specification at
http://jcp.org/aboutJava/communityprocess/review/jsr200/index.html
&lt;p&gt;
Typically the packer engine is used by application developers
to deploy or host JAR files on a website.
The unpacker  engine is used by deployment applications to
transform the byte-stream back to JAR format.
&lt;p&gt;
Here is an example using  packer and unpacker:&lt;p&gt;
&lt;blockquote&gt;&lt;pre&gt;
import java.util.jar.Pack200;
import java.util.jar.Pack200.*;
...
Create the Packer object
Packer packer = Pack200.newPacker();

Initialize the state by setting the desired properties
Map p = packer.properties();
take more time choosing codings for better compression
p.put(Packer.EFFORT, "7");  // default is "5"
use largest-possible archive segments (&gt;10% better compression).
p.put(Packer.SEGMENT_LIMIT, "-1");
reorder files for better compression.
p.put(Packer.KEEP_FILE_ORDER, Packer.FALSE);
smear modification times to a single value.
p.put(Packer.MODIFICATION_TIME, Packer.LATEST);
ignore all JAR deflation requests,
transmitting a single request to use "store" mode.
p.put(Packer.DEFLATE_HINT, Packer.FALSE);
discard debug attributes
p.put(Packer.CODE_ATTRIBUTE_PFX+"LineNumberTable", Packer.STRIP);
throw an error if an attribute is unrecognized
p.put(Packer.UNKNOWN_ATTRIBUTE, Packer.ERROR);
pass one class file uncompressed:
p.put(Packer.PASS_FILE_PFX+0, "mutants/Rogue.class");
try {
JarFile jarFile = new JarFile("/tmp/testref.jar");
FileOutputStream fos = new FileOutputStream("/tmp/test.pack");
Call the packer
packer.pack(jarFile, fos);
jarFile.close();
fos.close();

File f = new File("/tmp/test.pack");
FileOutputStream fostream = new FileOutputStream("/tmp/test.jar");
JarOutputStream jostream = new JarOutputStream(fostream);
Unpacker unpacker = Pack200.newUnpacker();
Call the unpacker
unpacker.unpack(f, jostream);
Must explicitly close the output.
jostream.close();
} catch (IOException ioe) {
ioe.printStackTrace();
}
&lt;/pre&gt;&lt;/blockquote&gt;
&lt;p&gt;
A Pack200 file compressed with gzip can be hosted on HTTP/1.1 web servers.
The deployment applications can use "Accept-Encoding=pack200-gzip". This
indicates to the server that the client application desires a version of
the file encoded with Pack200 and further compressed with gzip. Please
refer to Java Deployment Guide &lt;TBD&gt; for more details and techniques.
&lt;p&gt;
Unless otherwise noted, passing a &lt;tt&gt;null&lt;/tt&gt; argument to a constructor or
method in this class will cause a {@link NullPointerException} to be thrown.

@author John Rose
@author Kumar Srinivasan
@version 1.4, 12/08/03
@since 1.5
</body><documentation humanName="Documentation"/><owner classType="Class" humanName="Owner" humanType="Class" icon="index_files/icon_class_303957224.jpg" mode="s,e" name="Pack200" refid="_10_5_622020d_1132928310312_580161_6733"/><owningElement classType="Class" humanName="Owning Element" humanType="Class" icon="index_files/icon_class_303957224.jpg" name="Pack200" refid="_10_5_622020d_1132928310312_580161_6733"/><TO_DO humanName="To Do" mode="s,e"/></comment></magicdraw>