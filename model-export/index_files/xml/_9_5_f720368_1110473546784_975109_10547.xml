<?xml version="1.0" encoding="UTF-8"?><magicdraw><class classType="Class" humanType="Class" icon="index_files/icon_class_303957224.jpg" id="_9_5_f720368_1110473546784_975109_10547"><clientDependency humanName="Client Dependency"><interfacerealization classType="InterfaceRealization" humanType="Interface Realization" icon="index_files/icon_interfacerealization_425275537.jpg" isRelationship="true" name="Interface Realization[JDK 5.0 Classes::javax::swing::text::View -&gt; JDK 5.0 Classes::javax::swing::SwingConstants]" refid="_10_5_622020d_1132928323892_2046_18133"/></clientDependency><documentation humanName="Documentation" mode="standard">&lt;p&gt;
A very important part of the text package is the &lt;code&gt;View&lt;/code&gt; class.
As the name suggests it represents a view of the text model,
or a piece of the text model.
It is this class that is responsible for the look of the text component.
The view is not intended to be some completely new thing that one must
learn, but rather is much like a lightweight component.
In fact, the original &lt;code&gt;View&lt;/code&gt; implementation was a
lightweight component.   There were several reasons why
the &lt;code&gt;Component&lt;/code&gt; implementation was abandoned in favor of
an alternative.
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;
There was barely time to get the lightweight component support in the
1.1 version of the JDK.  There simply wasn't time to lighten up the
component further to where it would need to be to be used for text purposes.
The additions made to &lt;code&gt;JComponent&lt;/code&gt; increased the memory
consumption, and as it currently stands its much too heavy for
representing text.
&lt;/p&gt;
&lt;li&gt;
&lt;p&gt;
The layout semantics aren't quite right for text,
and changing the current layout
semantics of component might break existing applications.
&lt;/p&gt;
&lt;li&gt;
&lt;p&gt;
The component api uses integers, but in 1.2 one can use floating point
device independent coordinates.  An api that works in both 1.1 and 1.2
would be convenient for minimizing transition difficulties.  The
&lt;code&gt;View&lt;/code&gt; class uses the &lt;code&gt;Shape&lt;/code&gt; interface and
float arguments to enable View implementations for the Java 2 platform
v1.2 and later while still functioning in the older 1.1 JDK.
&lt;/p&gt;
&lt;/ol&gt;
&lt;p&gt;
By default, a view is very light.  It contains a reference to the parent
view from which it can fetch many things without holding state, and it
contains a reference to a portion of the model (&lt;/code&gt;Element&lt;/code&gt;).
A view does not
have to exactly represent an element in the model, that is simply a typical
and therefore convenient mapping.  A view can alternatively maintain a couple
of Position objects to maintain its location in the model (i.e. represent
a fragment of an element).  This is typically the result of formatting where
views have been broken down into pieces.  The convenience of a substantial
relationship to the element makes it easier to build factories to produce the
views, and makes it easier  to keep track of the view pieces as the model is
changed and the view must be changed to reflect the model.  Simple views
therefore represent an Element directly and complex views do not.
&lt;p&gt;
A view has the following responsibilities:
&lt;dl&gt;
&lt;dt&gt;&lt;b&gt;Participate in layout.&lt;/b&gt;
&lt;dd&gt;
&lt;p&gt;The view has a &lt;code&gt;setSize&lt;/code&gt; method which is like
&lt;code&gt;doLayout&lt;/code&gt; and &lt;code&gt;setSize&lt;/code&gt; in &lt;code&gt;Component&lt;/code&gt; combined.
The view has a &lt;code&gt;preferenceChanged&lt;/code&gt; method which is
like &lt;code&gt;invalidate&lt;/code&gt; in &lt;code&gt;Component&lt;/code&gt; except that one can
invalidate just one axis
and the child requesting the change is identified.
&lt;p&gt;A View expresses the size that it would like to be in terms of three
values, a minimum, a preferred, and a maximum span.  Layout in a view is
can be done independently upon each axis.  For a properly functioning View
implementation, the minimum span will be &lt;= the preferred span which in turn
will be &lt;= the maximum span.
&lt;/p&gt;
&lt;p align=center&gt;&lt;img src="doc-files/View-flexibility.jpg"
alt="The above text describes this graphic."&gt;
&lt;p&gt;The minimum set of methods for layout are:
&lt;ul&gt;
&lt;li&gt;&lt;a href="#getMinimumSpan(int)"&gt;getMinimumSpan&lt;/a&gt;
&lt;li&gt;&lt;a href="#getPreferredSpan(int)"&gt;getPreferredSpan&lt;/a&gt;
&lt;li&gt;&lt;a href="#getMaximumSpan(int)"&gt;getMaximumSpan&lt;/a&gt;
&lt;li&gt;&lt;a href="#getAlignment(int)"&gt;getAlignment&lt;/a&gt;
&lt;li&gt;&lt;a href="#preferenceChanged(javax.swing.text.View, boolean, boolean)"&gt;preferenceChanged&lt;/a&gt;
&lt;li&gt;&lt;a href="#setSize(float, float)"&gt;setSize&lt;/a&gt;
&lt;/ul&gt;

&lt;p&gt;The &lt;code&gt;setSize&lt;/code&gt; method should be prepared to be called a number of times
(i.e. It may be called even if the size didn't change).
The &lt;code&gt;setSize&lt;/code&gt; method
is generally called to make sure the View layout is complete prior to trying
to perform an operation on it that requires an up-to-date layout.  A view's
size should &lt;em&gt;always&lt;/em&gt; be set to a value within the minimum and maximum
span specified by that view.  Additionally, the view must always call the
&lt;code&gt;preferenceChanged&lt;/code&gt; method on the parent if it has changed the
values for the
layout it would like, and expects the parent to honor.  The parent View is
not required to recognize a change until the &lt;code&gt;preferenceChanged&lt;/code&gt;
has been sent.
This allows parent View implementations to cache the child requirements if
desired.  The calling sequence looks something like the following:
&lt;/p&gt;
&lt;p align=center&gt;
&lt;img src="doc-files/View-layout.jpg"
alt="Sample calling sequence between parent view and child view:
setSize, getMinimum, getPreferred, getMaximum, getAlignment, setSize"&gt;
&lt;p&gt;The exact calling sequence is up to the layout functionality of
the parent view (if the view has any children).  The view may collect
the preferences of the children prior to determining what it will give
each child, or it might iteratively update the children one at a time.
&lt;/p&gt;
&lt;dt&gt;&lt;b&gt;Render a portion of the model.&lt;/b&gt;
&lt;dd&gt;
&lt;p&gt;This is done in the paint method, which is pretty much like a component
paint method.  Views are expected to potentially populate a fairly large
tree.  A &lt;code&gt;View&lt;/code&gt; has the following semantics for rendering:
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The view gets its allocation from the parent at paint time, so it
must be prepared to redo layout if the allocated area is different from
what it is prepared to deal with.
&lt;li&gt;The coordinate system is the same as the hosting &lt;code&gt;Component&lt;/code&gt;
(i.e. the &lt;code&gt;Component&lt;/code&gt; returned by the
&lt;a href="#getContainer"&gt;getContainer&lt;/a&gt; method).
This means a child view lives in the same coordinate system as the parent
view unless the parent has explicitly changed the coordinate system.
To schedule itself to be repainted a view can call repaint on the hosting
&lt;code&gt;Component&lt;/code&gt;.
&lt;li&gt;The default is to &lt;em&gt;not clip&lt;/em&gt; the children.  It is more efficient
to allow a view to clip only if it really feels it needs clipping.
&lt;li&gt;The &lt;code&gt;Graphics&lt;/code&gt; object given is not initialized in any way.
A view should set any settings needed.
&lt;li&gt;A &lt;code&gt;View&lt;/code&gt; is inherently transparent.  While a view may render into its
entire allocation, typically a view does not.  Rendering is performed by
tranversing down the tree of &lt;code&gt;View&lt;/code&gt; implementations.
Each &lt;code&gt;View&lt;/code&gt; is responsible
for rendering its children.  This behavior is depended upon for thread
safety.  While view implementations do not necessarily have to be implemented
with thread safety in mind, other view implementations that do make use of
concurrency can depend upon a tree traversal to guarantee thread safety.
&lt;li&gt;The order of views relative to the model is up to the implementation.
Although child views will typically be arranged in the same order that they
occur in the model, they may be visually arranged in an entirely different
order.  View implementations may have Z-Order associated with them if the
children are overlapping.
&lt;/ul&gt;
&lt;p&gt;The methods for rendering are:
&lt;ul&gt;
&lt;li&gt;&lt;a href="#paint(java.awt.Graphics, java.awt.Shape)"&gt;paint&lt;/a&gt;
&lt;/ul&gt;
&lt;p&gt;
&lt;dt&gt;&lt;b&gt;Translate between the model and view coordinate systems.&lt;/b&gt;
&lt;dd&gt;
&lt;p&gt;Because the view objects are produced from a factory and therefore cannot
necessarily be counted upon to be in a particular pattern, one must be able
to perform translation to properly locate spatial representation of the model.
The methods for doing this are:
&lt;ul&gt;
&lt;li&gt;&lt;a href="#modelToView(int, javax.swing.text.Position.Bias, int, javax.swing.text.Position.Bias, java.awt.Shape)"&gt;modelToView&lt;/a&gt;
&lt;li&gt;&lt;a href="#viewToModel(float, float, java.awt.Shape, javax.swing.text.Position.Bias[])"&gt;viewToModel&lt;/a&gt;
&lt;li&gt;&lt;a href="#getDocument()"&gt;getDocument&lt;/a&gt;
&lt;li&gt;&lt;a href="#getElement()"&gt;getElement&lt;/a&gt;
&lt;li&gt;&lt;a href="#getStartOffset()"&gt;getStartOffset&lt;/a&gt;
&lt;li&gt;&lt;a href="#getEndOffset()"&gt;getEndOffset&lt;/a&gt;
&lt;/ul&gt;
&lt;p&gt;The layout must be valid prior to attempting to make the translation.
The translation is not valid, and must not be attempted while changes
are being broadcasted from the model via a &lt;code&gt;DocumentEvent&lt;/code&gt;.
&lt;/p&gt;
&lt;dt&gt;&lt;b&gt;Respond to changes from the model.&lt;/b&gt;
&lt;dd&gt;
&lt;p&gt;If the overall view is represented by many pieces (which is the best situation
if one want to be able to change the view and write the least amount of new code),
it would be impractical to have a huge number of &lt;code&gt;DocumentListener&lt;/code&gt;s.
If each
view listened to the model, only a few would actually be interested in the
changes broadcasted at any given time.   Since the model has no knowledge of
views, it has no way to filter the broadcast of change information.  The view
hierarchy itself is instead responsible for propagating the change information.
At any level in the view hierarchy, that view knows enough about its children to
best distribute the change information further.   Changes are therefore broadcasted
starting from the root of the view hierarchy.
The methods for doing this are:
&lt;ul&gt;
&lt;li&gt;&lt;a href="#insertUpdate"&gt;insertUpdate&lt;/a&gt;
&lt;li&gt;&lt;a href="#removeUpdate"&gt;removeUpdate&lt;/a&gt;
&lt;li&gt;&lt;a href="#changedUpdate"&gt;changedUpdate&lt;/a&gt;
&lt;/ul&gt;
&lt;p&gt;
&lt;/dl&gt;

@author  Timothy Prinzing
@version 1.70 05/18/04
</documentation><interfaceRealization humanName="Interface Realization"><interfacerealization classType="InterfaceRealization" humanType="Interface Realization" icon="index_files/icon_interfacerealization_425275537.jpg" isRelationship="true" name="Interface Realization[JDK 5.0 Classes::javax::swing::text::View -&gt; JDK 5.0 Classes::javax::swing::SwingConstants]" refid="_10_5_622020d_1132928323892_2046_18133"/></interfaceRealization><isAbstract humanName="Is Abstract" mode="s,e">true</isAbstract><isActive humanName="Is Active" mode="s,e">false</isActive><isFinalSpecialization humanName="Is Final Specialization" mode="e">false</isFinalSpecialization><isLeaf humanName="Is Leaf" mode="e">false</isLeaf><name humanName="Name" mode="s,e">View</name><namespace classType="Package" humanName="Namespace" humanType="Package" icon="index_files/icon_package_2000410491.jpg" name="text" refid="_9_5_f720368_1110473548284_980497_22831"/><ownedComment humanName="Owned Comment"><comment classType="Comment" humanType="Comment" icon="index_files/icon_comment_2051026490.jpg" refid="_10_5_622020d_1132928317743_980539_12204"/></ownedComment><ownedElement humanName="Owned Element"><comment classType="Comment" humanType="Comment" icon="index_files/icon_comment_2051026490.jpg" refid="_10_5_622020d_1132928317743_980539_12204"/><interfacerealization classType="InterfaceRealization" humanType="Interface Realization" icon="index_files/icon_interfacerealization_425275537.jpg" isRelationship="true" name="Interface Realization[JDK 5.0 Classes::javax::swing::text::View -&gt; JDK 5.0 Classes::javax::swing::SwingConstants]" refid="_10_5_622020d_1132928323892_2046_18133"/></ownedElement><owner classType="Package" humanName="Owner" humanType="Package" icon="index_files/icon_package_2000410491.jpg" mode="s,e" name="text" refid="_9_5_f720368_1110473548284_980497_22831"/><owningPackage classType="Package" humanName="Owning Package" humanType="Package" icon="index_files/icon_package_2000410491.jpg" name="text" refid="_9_5_f720368_1110473548284_980497_22831"/><package classType="Package" humanName="Package" humanType="Package" icon="index_files/icon_package_2000410491.jpg" name="text" refid="_9_5_f720368_1110473548284_980497_22831"/><qualifiedName humanName="Qualified Name" mode="e">JDK 5.0 Classes::javax::swing::text::View</qualifiedName><realizedInterfaces humanName="Realized Interface" mode="s,e"><interface classType="Interface" humanType="Interface" icon="index_files/icon_interface_118881143.jpg" name="SwingConstants" refid="_9_5_f720368_1110473546799_869308_10869"/></realizedInterfaces><TO_DO humanName="To Do" mode="s,e"/><visibility humanName="Visibility" mode="e">public</visibility></class></magicdraw>