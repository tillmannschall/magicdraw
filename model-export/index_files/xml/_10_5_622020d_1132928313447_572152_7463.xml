<?xml version="1.0" encoding="UTF-8"?><magicdraw><comment classType="Comment" humanType="Comment" icon="index_files/icon_comment_2051026490.jpg" id="_10_5_622020d_1132928313447_572152_7463"><annotatedElement humanName="Annotated Element" mode="s,e"><interface classType="Interface" humanType="Interface" icon="index_files/icon_interface_118881143.jpg" name="Set" refid="_9_5_f720368_1110473546706_239729_8919"/></annotatedElement><body humanName="Body" mode="s,e">A collection that contains no duplicate elements.  More formally, sets
contain no pair of elements &lt;code&gt;e1&lt;/code&gt; and &lt;code&gt;e2&lt;/code&gt; such that
&lt;code&gt;e1.equals(e2)&lt;/code&gt;, and at most one null element.  As implied by
its name, this interface models the mathematical &lt;i&gt;set&lt;/i&gt; abstraction.&lt;p&gt;

The &lt;tt&gt;Set&lt;/tt&gt; interface places additional stipulations, beyond those
inherited from the &lt;tt&gt;Collection&lt;/tt&gt; interface, on the contracts of all
constructors and on the contracts of the &lt;tt&gt;add&lt;/tt&gt;, &lt;tt&gt;equals&lt;/tt&gt; and
&lt;tt&gt;hashCode&lt;/tt&gt; methods.  Declarations for other inherited methods are
also included here for convenience.  (The specifications accompanying these
declarations have been tailored to the &lt;tt&gt;Set&lt;/tt&gt; interface, but they do
not contain any additional stipulations.)&lt;p&gt;

The additional stipulation on constructors is, not surprisingly,
that all constructors must create a set that contains no duplicate elements
(as defined above).&lt;p&gt;

Note: Great care must be exercised if mutable objects are used as set
elements.  The behavior of a set is not specified if the value of an object
is changed in a manner that affects equals comparisons while the object is
an element in the set.  A special case of this prohibition is that it is
not permissible for a set to contain itself as an element.

&lt;p&gt;Some set implementations have restrictions on the elements that
they may contain.  For example, some implementations prohibit null elements,
and some have restrictions on the types of their elements.  Attempting to
add an ineligible element throws an unchecked exception, typically
&lt;tt&gt;NullPointerException&lt;/tt&gt; or &lt;tt&gt;ClassCastException&lt;/tt&gt;.  Attempting
to query the presence of an ineligible element may throw an exception,
or it may simply return false; some implementations will exhibit the former
behavior and some will exhibit the latter.  More generally, attempting an
operation on an ineligible element whose completion would not result in
the insertion of an ineligible element into the set may throw an
exception or it may succeed, at the option of the implementation.
Such exceptions are marked as "optional" in the specification for this
interface.

&lt;p&gt;This interface is a member of the
&lt;a href="{@docRoot}/../guide/collections/index.html"&gt;
Java Collections Framework&lt;/a&gt;.

@author  Josh Bloch
@author  Neal Gafter
@version 1.35, 02/19/04
@see Collection
@see List
@see SortedSet
@see HashSet
@see TreeSet
@see AbstractSet
@see Collections#singleton(java.lang.Object)
@see Collections#EMPTY_SET
@since 1.2
</body><documentation humanName="Documentation"/><owner classType="Interface" humanName="Owner" humanType="Interface" icon="index_files/icon_interface_118881143.jpg" mode="s,e" name="Set" refid="_9_5_f720368_1110473546706_239729_8919"/><owningElement classType="Interface" humanName="Owning Element" humanType="Interface" icon="index_files/icon_interface_118881143.jpg" name="Set" refid="_9_5_f720368_1110473546706_239729_8919"/><TO_DO humanName="To Do" mode="s,e"/></comment></magicdraw>