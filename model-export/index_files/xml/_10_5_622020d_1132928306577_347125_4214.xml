<?xml version="1.0" encoding="UTF-8"?><magicdraw><comment classType="Comment" humanType="Comment" icon="index_files/icon_comment_841774062.jpg" id="_10_5_622020d_1132928306577_347125_4214" refElementId="_10_5_622020d_1132928306577_347125_4214"><annotatedElement humanName="Annotated Element" mode="s,e"><class classType="Class" humanType="Class" icon="index_files/icon_class_795627831.jpg" name="Graphics2D" refElementId="_9_5_f720368_1110473546581_946202_7023" refid="_9_5_f720368_1110473546581_946202_7023"/></annotatedElement><body humanName="Body" mode="s,e">This &lt;code&gt;Graphics2D&lt;/code&gt; class extends the
{@link Graphics} class to provide more sophisticated
control over geometry, coordinate transformations, color management,
and text layout.  This is the fundamental class for rendering
2-dimensional shapes, text and images on the  Java(tm) platform.
&lt;p&gt;
&lt;h2&gt;Coordinate Spaces&lt;/h2&gt;
All coordinates passed to a &lt;code&gt;Graphics2D&lt;/code&gt; object are specified
in a device-independent coordinate system called User Space, which is
used by applications.  The &lt;code&gt;Graphics2D&lt;/code&gt; object contains
an {@link AffineTransform} object as part of its rendering state
that defines how to convert coordinates from user space to
device-dependent coordinates in Device Space.
&lt;p&gt;
Coordinates in device space usually refer to individual device pixels
and are aligned on the infinitely thin gaps between these pixels.
Some &lt;code&gt;Graphics2D&lt;/code&gt; objects can be used to capture rendering
operations for storage into a graphics metafile for playback on a
concrete device of unknown physical resolution at a later time.  Since
the resolution might not be known when the rendering operations are
captured, the &lt;code&gt;Graphics2D&lt;/code&gt; &lt;code&gt;Transform&lt;/code&gt; is set up
to transform user coordinates to a virtual device space that
approximates the expected resolution of the target device. Further
transformations might need to be applied at playback time if the
estimate is incorrect.
&lt;p&gt;
Some of the operations performed by the rendering attribute objects
occur in the device space, but all &lt;code&gt;Graphics2D&lt;/code&gt; methods take
user space coordinates.
&lt;p&gt;
Every &lt;code&gt;Graphics2D&lt;/code&gt; object is associated with a target that
defines where rendering takes place. A
{@link GraphicsConfiguration} object defines the characteristics
of the rendering target, such as pixel format and resolution.
The same rendering target is used throughout the life of a
&lt;code&gt;Graphics2D&lt;/code&gt; object.
&lt;p&gt;
When creating a &lt;code&gt;Graphics2D&lt;/code&gt; object,  the
&lt;code&gt;GraphicsConfiguration&lt;/code&gt;
specifies the &lt;a name="#deftransform"&gt;default transform&lt;/a&gt; for
the target of the &lt;code&gt;Graphics2D&lt;/code&gt; (a
{@link Component} or {@link Image}).  This default transform maps the
user space coordinate system to screen and printer device coordinates
such that the origin maps to the upper left hand corner of the
target region of the device with increasing X coordinates extending
to the right and increasing Y coordinates extending downward.
The scaling of the default transform is set to identity for those devices
that are close to 72 dpi, such as screen devices.
The scaling of the default transform is set to approximately 72 user
space coordinates per square inch for high resolution devices, such as
printers.  For image buffers, the default transform is the
&lt;code&gt;Identity&lt;/code&gt; transform.

&lt;h2&gt;Rendering Process&lt;/h2&gt;
The Rendering Process can be broken down into four phases that are
controlled by the &lt;code&gt;Graphics2D&lt;/code&gt; rendering attributes.
The renderer can optimize many of these steps, either by caching the
results for future calls, by collapsing multiple virtual steps into
a single operation, or by recognizing various attributes as common
simple cases that can be eliminated by modifying other parts of the
operation.
&lt;p&gt;
The steps in the rendering process are:
&lt;ol&gt;
&lt;li&gt;
Determine what to render.
&lt;li&gt;
Constrain the rendering operation to the current &lt;code&gt;Clip&lt;/code&gt;.
The &lt;code&gt;Clip&lt;/code&gt; is specified by a {@link Shape} in user
space and is controlled by the program using the various clip
manipulation methods of &lt;code&gt;Graphics&lt;/code&gt; and
&lt;code&gt;Graphics2D&lt;/code&gt;.  This &lt;i&gt;user clip&lt;/i&gt;
is transformed into device space by the current
&lt;code&gt;Transform&lt;/code&gt; and combined with the
&lt;i&gt;device clip&lt;/i&gt;, which is defined by the visibility of windows and
device extents.  The combination of the user clip and device clip
defines the &lt;i&gt;composite clip&lt;/i&gt;, which determines the final clipping
region.  The user clip is not modified by the rendering
system to reflect the resulting composite clip.
&lt;li&gt;
Determine what colors to render.
&lt;li&gt;
Apply the colors to the destination drawing surface using the current
{@link Composite} attribute in the &lt;code&gt;Graphics2D&lt;/code&gt; context.
&lt;/ol&gt;
&lt;br&gt;
The three types of rendering operations, along with details of each
of their particular rendering processes are:
&lt;ol&gt;
&lt;li&gt;
&lt;b&gt;&lt;a name="rendershape"&gt;&lt;code&gt;Shape&lt;/code&gt; operations&lt;/a&gt;&lt;/b&gt;
&lt;ol&gt;
&lt;li&gt;
If the operation is a &lt;code&gt;draw(Shape)&lt;/code&gt; operation, then
the  {@link Stroke#createStrokedShape(Shape) createStrokedShape}
method on the current {@link Stroke} attribute in the
&lt;code&gt;Graphics2D&lt;/code&gt; context is used to construct a new
&lt;code&gt;Shape&lt;/code&gt; object that contains the outline of the specified
&lt;code&gt;Shape&lt;/code&gt;.
&lt;li&gt;
The &lt;code&gt;Shape&lt;/code&gt; is transformed from user space to device space
using the current &lt;code&gt;Transform&lt;/code&gt;
in the &lt;code&gt;Graphics2D&lt;/code&gt; context.
&lt;li&gt;
The outline of the &lt;code&gt;Shape&lt;/code&gt; is extracted using the
{@link Shape#getPathIterator(AffineTransform) getPathIterator} method of
&lt;code&gt;Shape&lt;/code&gt;, which returns a
{@link java.awt.geom.PathIterator PathIterator}
object that iterates along the boundary of the &lt;code&gt;Shape&lt;/code&gt;.
&lt;li&gt;
If the &lt;code&gt;Graphics2D&lt;/code&gt; object cannot handle the curved segments
that the &lt;code&gt;PathIterator&lt;/code&gt; object returns then it can call the
alternate
{@link Shape#getPathIterator(AffineTransform, double) getPathIterator}
method of &lt;code&gt;Shape&lt;/code&gt;, which flattens the &lt;code&gt;Shape&lt;/code&gt;.
&lt;li&gt;
The current {@link Paint} in the &lt;code&gt;Graphics2D&lt;/code&gt; context
is queried for a {@link PaintContext}, which specifies the
colors to render in device space.
&lt;/ol&gt;
&lt;li&gt;
&lt;b&gt;&lt;a name=rendertext&gt;Text operations&lt;/a&gt;&lt;/b&gt;
&lt;ol&gt;
&lt;li&gt;
The following steps are used to determine the set of glyphs required
to render the indicated &lt;code&gt;String&lt;/code&gt;:
&lt;ol&gt;
&lt;li&gt;
If the argument is a &lt;code&gt;String&lt;/code&gt;, then the current
&lt;code&gt;Font&lt;/code&gt; in the &lt;code&gt;Graphics2D&lt;/code&gt; context is asked to
convert the Unicode characters in the &lt;code&gt;String&lt;/code&gt; into a set of
glyphs for presentation with whatever basic layout and shaping
algorithms the font implements.
&lt;li&gt;
If the argument is an
{@link AttributedCharacterIterator},
the iterator is asked to convert itself to a
{@link java.awt.font.TextLayout TextLayout}
using its embedded font attributes. The &lt;code&gt;TextLayout&lt;/code&gt;
implements more sophisticated glyph layout algorithms that
perform Unicode bi-directional layout adjustments automatically
for multiple fonts of differing writing directions.
&lt;li&gt;
If the argument is a
{@link GlyphVector}, then the
&lt;code&gt;GlyphVector&lt;/code&gt; object already contains the appropriate
font-specific glyph codes with explicit coordinates for the position of
each glyph.
&lt;/ol&gt;
&lt;li&gt;
The current &lt;code&gt;Font&lt;/code&gt; is queried to obtain outlines for the
indicated glyphs.  These outlines are treated as shapes in user space
relative to the position of each glyph that was determined in step 1.
&lt;li&gt;
The character outlines are filled as indicated above
under &lt;a href="#rendershape"&gt;&lt;code&gt;Shape&lt;/code&gt; operations&lt;/a&gt;.
&lt;li&gt;
The current &lt;code&gt;Paint&lt;/code&gt; is queried for a
&lt;code&gt;PaintContext&lt;/code&gt;, which specifies
the colors to render in device space.
&lt;/ol&gt;
&lt;li&gt;
&lt;b&gt;&lt;a name= renderingimage&gt;&lt;code&gt;Image&lt;/code&gt; Operations&lt;/a&gt;&lt;/b&gt;
&lt;ol&gt;
&lt;li&gt;
The region of interest is defined by the bounding box of the source
&lt;code&gt;Image&lt;/code&gt;.
This bounding box is specified in Image Space, which is the
&lt;code&gt;Image&lt;/code&gt; object's local coordinate system.
&lt;li&gt;
If an &lt;code&gt;AffineTransform&lt;/code&gt; is passed to
{@link #drawImage(java.awt.Image, java.awt.geom.AffineTransform, java.awt.image.ImageObserver) drawImage(Image, AffineTransform, ImageObserver)},
the &lt;code&gt;AffineTransform&lt;/code&gt; is used to transform the bounding
box from image space to user space. If no &lt;code&gt;AffineTransform&lt;/code&gt;
is supplied, the bounding box is treated as if it is already in user space.
&lt;li&gt;
The bounding box of the source &lt;code&gt;Image&lt;/code&gt; is transformed from user
space into device space using the current &lt;code&gt;Transform&lt;/code&gt;.
Note that the result of transforming the bounding box does not
necessarily result in a rectangular region in device space.
&lt;li&gt;
The &lt;code&gt;Image&lt;/code&gt; object determines what colors to render,
sampled according to the source to destination
coordinate mapping specified by the current &lt;code&gt;Transform&lt;/code&gt; and the
optional image transform.
&lt;/ol&gt;
&lt;/ol&gt;

&lt;h2&gt;Default Rendering Attributes&lt;/h2&gt;
The default values for the &lt;code&gt;Graphics2D&lt;/code&gt; rendering attributes are:
&lt;dl compact&gt;
&lt;dt&gt;&lt;i&gt;&lt;code&gt;Paint&lt;/code&gt;&lt;/i&gt;
&lt;dd&gt;The color of the &lt;code&gt;Component&lt;/code&gt;.
&lt;dt&gt;&lt;i&gt;&lt;code&gt;Font&lt;/code&gt;&lt;/i&gt;
&lt;dd&gt;The &lt;code&gt;Font&lt;/code&gt; of the &lt;code&gt;Component&lt;/code&gt;.
&lt;dt&gt;&lt;i&gt;&lt;code&gt;Stroke&lt;/code&gt;&lt;/i&gt;
&lt;dd&gt;A square pen with a linewidth of 1, no dashing, miter segment joins
and square end caps.
&lt;dt&gt;&lt;i&gt;&lt;code&gt;Transform&lt;/code&gt;&lt;/i&gt;
&lt;dd&gt;The
{@link GraphicsConfiguration#getDefaultTransform() getDefaultTransform}
for the &lt;code&gt;GraphicsConfiguration&lt;/code&gt; of the &lt;code&gt;Component&lt;/code&gt;.
&lt;dt&gt;&lt;i&gt;&lt;code&gt;Composite&lt;/code&gt;&lt;/i&gt;
&lt;dd&gt;The {@link AlphaComposite#SRC_OVER} rule.
&lt;dt&gt;&lt;i&gt;&lt;code&gt;Clip&lt;/code&gt;&lt;/i&gt;
&lt;dd&gt;No rendering &lt;code&gt;Clip&lt;/code&gt;, the output is clipped to the
&lt;code&gt;Component&lt;/code&gt;.
&lt;/dl&gt;

&lt;h2&gt;Rendering Compatibility Issues&lt;/h2&gt;
The JDK(tm) 1.1 rendering model is based on a pixelization model
that specifies that coordinates
are infinitely thin, lying between the pixels.  Drawing operations are
performed using a one-pixel wide pen that fills the
pixel below and to the right of the anchor point on the path.
The JDK 1.1 rendering model is consistent with the
capabilities of most of the existing class of platform
renderers that need  to resolve integer coordinates to a
discrete pen that must fall completely on a specified number of pixels.
&lt;p&gt;
The Java 2D(tm) (Java(tm) 2 platform) API supports antialiasing renderers.
A pen with a width of one pixel does not need to fall
completely on pixel N as opposed to pixel N+1.  The pen can fall
partially on both pixels. It is not necessary to choose a bias
direction for a wide pen since the blending that occurs along the
pen traversal edges makes the sub-pixel position of the pen
visible to the user.  On the other hand, when antialiasing is
turned off by setting the
{@link RenderingHints#KEY_ANTIALIASING KEY_ANTIALIASING} hint key
to the
{@link RenderingHints#VALUE_ANTIALIAS_OFF VALUE_ANTIALIAS_OFF}
hint value, the renderer might need
to apply a bias to determine which pixel to modify when the pen
is straddling a pixel boundary, such as when it is drawn
along an integer coordinate in device space.  While the capabilities
of an antialiasing renderer make it no longer necessary for the
rendering model to specify a bias for the pen, it is desirable for the
antialiasing and non-antialiasing renderers to perform similarly for
the common cases of drawing one-pixel wide horizontal and vertical
lines on the screen.  To ensure that turning on antialiasing by
setting the
{@link RenderingHints#KEY_ANTIALIASING KEY_ANTIALIASING} hint
key to
{@link RenderingHints#VALUE_ANTIALIAS_ON VALUE_ANTIALIAS_ON}
does not cause such lines to suddenly become twice as wide and half
as opaque, it is desirable to have the model specify a path for such
lines so that they completely cover a particular set of pixels to help
increase their crispness.
&lt;p&gt;
Java 2D API maintains compatibility with JDK 1.1 rendering
behavior, such that legacy operations and existing renderer
behavior is unchanged under Java 2D API.  Legacy
methods that map onto general &lt;code&gt;draw&lt;/code&gt; and
&lt;code&gt;fill&lt;/code&gt; methods are defined, which clearly indicates
how &lt;code&gt;Graphics2D&lt;/code&gt; extends &lt;code&gt;Graphics&lt;/code&gt; based
on settings of &lt;code&gt;Stroke&lt;/code&gt; and &lt;code&gt;Transform&lt;/code&gt;
attributes and rendering hints.  The definition
performs identically under default attribute settings.
For example, the default &lt;code&gt;Stroke&lt;/code&gt; is a
&lt;code&gt;BasicStroke&lt;/code&gt; with a width of 1 and no dashing and the
default Transform for screen drawing is an Identity transform.
&lt;p&gt;
The following two rules provide predictable rendering behavior whether
aliasing or antialiasing is being used.
&lt;ul&gt;
&lt;li&gt; Device coordinates are defined to be between device pixels which
avoids any inconsistent results between aliased and antaliased
rendering.  If coordinates were defined to be at a pixel's center, some
of the pixels covered by a shape, such as a rectangle, would only be
half covered.
With aliased rendering, the half covered pixels would either be
rendered inside the shape or outside the shape.  With anti-aliased
rendering, the pixels on the entire edge of the shape would be half
covered.  On the other hand, since coordinates are defined to be
between pixels, a shape like a rectangle would have no half covered
pixels, whether or not it is rendered using antialiasing.
&lt;li&gt; Lines and paths stroked using the &lt;code&gt;BasicStroke&lt;/code&gt;
object may be "normalized" to provide consistent rendering of the
outlines when positioned at various points on the drawable and
whether drawn with aliased or antialiased rendering.  This
normalization process is controlled by the
{@link RenderingHints#KEY_STROKE_CONTROL KEY_STROKE_CONTROL} hint.
The exact normalization algorithm is not specified, but the goals
of this normalization are to ensure that lines are rendered with
consistent visual appearance regardless of how they fall on the
pixel grid and to promote more solid horizontal and vertical
lines in antialiased mode so that they resemble their non-antialiased
counterparts more closely.  A typical normalization step might
promote antialiased line endpoints to pixel centers to reduce the
amount of blending or adjust the subpixel positioning of
non-antialiased lines so that the floating point line widths
round to even or odd pixel counts with equal likelihood.  This
process can move endpoints by up to half a pixel (usually towards
positive infinity along both axes) to promote these consistent
results.
&lt;/ul&gt;
&lt;p&gt;
The following definitions of general legacy methods
perform identically to previously specified behavior under default
attribute settings:
&lt;ul&gt;
&lt;li&gt;
For &lt;code&gt;fill&lt;/code&gt; operations, including &lt;code&gt;fillRect&lt;/code&gt;,
&lt;code&gt;fillRoundRect&lt;/code&gt;, &lt;code&gt;fillOval&lt;/code&gt;,
&lt;code&gt;fillArc&lt;/code&gt;, &lt;code&gt;fillPolygon&lt;/code&gt;, and
&lt;code&gt;clearRect&lt;/code&gt;, {@link #fill(Shape) fill} can now be called
with the desired &lt;code&gt;Shape&lt;/code&gt;.  For example, when filling a
rectangle:
&lt;pre&gt;
fill(new Rectangle(x, y, w, h));
&lt;/pre&gt;
is called.
&lt;p&gt;
&lt;li&gt;
Similarly, for draw operations, including &lt;code&gt;drawLine&lt;/code&gt;,
&lt;code&gt;drawRect&lt;/code&gt;, &lt;code&gt;drawRoundRect&lt;/code&gt;,
&lt;code&gt;drawOval&lt;/code&gt;, &lt;code&gt;drawArc&lt;/code&gt;, &lt;code&gt;drawPolyline&lt;/code&gt;,
and &lt;code&gt;drawPolygon&lt;/code&gt;, {@link #draw(Shape) draw} can now be
called with the desired &lt;code&gt;Shape&lt;/code&gt;.  For example, when drawing a
rectangle:
&lt;pre&gt;
draw(new Rectangle(x, y, w, h));
&lt;/pre&gt;
is called.
&lt;p&gt;
&lt;li&gt;
The &lt;code&gt;draw3DRect&lt;/code&gt; and &lt;code&gt;fill3DRect&lt;/code&gt; methods were
implemented in terms of the &lt;code&gt;drawLine&lt;/code&gt; and
&lt;code&gt;fillRect&lt;/code&gt; methods in the &lt;code&gt;Graphics&lt;/code&gt; class which
would predicate their behavior upon the current &lt;code&gt;Stroke&lt;/code&gt;
and &lt;code&gt;Paint&lt;/code&gt; objects in a &lt;code&gt;Graphics2D&lt;/code&gt; context.
This class overrides those implementations with versions that use
the current &lt;code&gt;Color&lt;/code&gt; exclusively, overriding the current
&lt;code&gt;Paint&lt;/code&gt; and which uses &lt;code&gt;fillRect&lt;/code&gt; to describe
the exact same behavior as the preexisting methods regardless of the
setting of the current &lt;code&gt;Stroke&lt;/code&gt;.
&lt;/ul&gt;
The &lt;code&gt;Graphics&lt;/code&gt; class defines only the &lt;code&gt;setColor&lt;/code&gt;
method to control the color to be painted.  Since the Java 2D API extends
the &lt;code&gt;Color&lt;/code&gt; object to implement the new &lt;code&gt;Paint&lt;/code&gt;
interface, the existing
&lt;code&gt;setColor&lt;/code&gt; method is now a convenience method for setting the
current &lt;code&gt;Paint&lt;/code&gt; attribute to a &lt;code&gt;Color&lt;/code&gt; object.
&lt;code&gt;setColor(c)&lt;/code&gt; is equivalent to &lt;code&gt;setPaint(c)&lt;/code&gt;.
&lt;p&gt;
The &lt;code&gt;Graphics&lt;/code&gt; class defines two methods for controlling
how colors are applied to the destination.
&lt;ol&gt;
&lt;li&gt;
The &lt;code&gt;setPaintMode&lt;/code&gt; method is implemented as a convenience
method to set the default &lt;code&gt;Composite&lt;/code&gt;, equivalent to
&lt;code&gt;setComposite(new AlphaComposite.SrcOver)&lt;/code&gt;.
&lt;li&gt;
The &lt;code&gt;setXORMode(Color xorcolor)&lt;/code&gt; method is implemented
as a convenience method to set a special &lt;code&gt;Composite&lt;/code&gt; object that
ignores the &lt;code&gt;Alpha&lt;/code&gt; components of source colors and sets the
destination color to the value:
&lt;pre&gt;
dstpixel = (PixelOf(srccolor) ^ PixelOf(xorcolor) ^ dstpixel);
&lt;/pre&gt;
&lt;/ol&gt;

@version 	1.81, 05/05/04
@author Jim Graham
@see java.awt.RenderingHints
</body><documentation humanName="Documentation"/><owner classType="Class" humanName="Owner" humanType="Class" icon="index_files/icon_class_795627831.jpg" mode="s,e" name="Graphics2D" refElementId="_9_5_f720368_1110473546581_946202_7023" refid="_9_5_f720368_1110473546581_946202_7023"/><owningElement classType="Class" humanName="Owning Element" humanType="Class" icon="index_files/icon_class_795627831.jpg" name="Graphics2D" refElementId="_9_5_f720368_1110473546581_946202_7023" refid="_9_5_f720368_1110473546581_946202_7023"/><TO_DO humanName="To Do" mode="s,e"/></comment></magicdraw>