<?xml version="1.0" encoding="UTF-8"?><magicdraw><interface classType="Interface" humanType="Interface" icon="index_files/icon_interface_1046467249.jpg" id="_10_5_622020d_1132928307548_590403_4807" refElementId="_10_5_622020d_1132928307548_590403_4807"><documentation humanName="Documentation" mode="s">The management interface for the memory system of
the Java virtual machine.

&lt;p&gt; A Java virtual machine has a single instance of the implementation
class of this interface.  This instance implementing this interface is
an &lt;a href="ManagementFactory.html#MXBean"&gt;MXBean&lt;/a&gt;
that can be obtained by calling
the {@link ManagementFactory#getMemoryMXBean} method or
from the {@link ManagementFactory#getPlatformMBeanServer
platform &lt;tt&gt;MBeanServer&lt;/tt&gt;} method.

&lt;p&gt;The &lt;tt&gt;ObjectName&lt;/tt&gt; for uniquely identifying the MXBean for
the memory system within an MBeanServer is:
&lt;blockquote&gt;
{@link ManagementFactory#MEMORY_MXBEAN_NAME
&lt;tt&gt;java.lang:type=Memory&lt;/tt&gt;}
&lt;/blockquote&gt;

&lt;h4&gt; Memory &lt;/h4&gt;
The memory system of the Java virtual machine manages
the following kinds of memory:

&lt;h4&gt; 1. Heap &lt;/h4&gt;
The Java virtual machine has a &lt;i&gt;heap&lt;/i&gt; that is the runtime
data area from which memory for all class instances and arrays
are allocated.  It is created at the Java virtual machine start-up.
Heap memory for objects is reclaimed by an automatic memory management
system which is known as a &lt;i&gt;garbage collector&lt;/i&gt;.

&lt;p&gt;The heap may be of a fixed size or may be expanded and shrunk.
The memory for the heap does not need to be contiguous.

&lt;h4&gt; 2. Non-Heap Memory&lt;/h4&gt;
The Java virtual machine manages memory other than the heap
(referred as &lt;i&gt;non-heap memory&lt;/i&gt;).

&lt;p&gt; The Java virtual machine has a &lt;i&gt;method area&lt;/i&gt; that is shared
among all threads.
The method area belongs to non-heap memory.  It stores per-class structures
such as a runtime constant pool, field and method data, and the code for
methods and constructors.  It is created at the Java virtual machine
start-up.

&lt;p&gt; The method area is logically part of the heap but a Java virtual
machine implementation may choose not to either garbage collect
or compact it.  Similar to the heap, the method area may be of a
fixed size or may be expanded and shrunk.  The memory for the
method area does not need to be contiguous.

&lt;p&gt;In addition to the method area, a Java virtual machine
implementation may require memory for internal processing or
optimization which also belongs to non-heap memory.
For example, the JIT compiler requires memory for storing the native
machine code translated from the Java virtual machine code for
high performance.

&lt;h4&gt;Memory Pools and Memory Managers&lt;/h4&gt;
{@link MemoryPoolMXBean Memory pools} and
{@link MemoryManagerMXBean memory managers} are the abstract entities
that monitor and manage the memory system
of the Java virtual machine.

&lt;p&gt;A memory pool represents a memory area that the Java virtual machine
manages.  The Java virtual machine has at least one memory pool
and it may create or remove memory pools during execution.
A memory pool can belong to either the heap or the non-heap memory.

&lt;p&gt;A memory manager is responsible for managing one or more memory pools.
The garbage collector is one type of memory manager responsible
for reclaiming memory occupied by unreachable objects.  A Java virtual
machine may have one or more memory managers.   It may
add or remove memory managers during execution.
A memory pool can be managed by more than one memory manager.

&lt;h4&gt;Memory Usage Monitoring&lt;/h4&gt;

Memory usage is a very important monitoring attribute for the memory system.
The memory usage, for example, could indicate:
&lt;ul&gt;
&lt;li&gt;the memory usage of an application,&lt;/li&gt;
&lt;li&gt;the workload being imposed on the automatic memory management system,&lt;/li&gt;
&lt;li&gt;potential memory leakage.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
The memory usage can be monitored in three ways:
&lt;ul&gt;
&lt;li&gt;Polling&lt;/li&gt;
&lt;li&gt;Usage Threshold Notification&lt;/li&gt;
&lt;li&gt;Collection Usage Threshold Notification&lt;/li&gt;
&lt;/ul&gt;

Details are specified in the {@link MemoryPoolMXBean} interface.

&lt;p&gt;The memory usage monitoring mechanism is intended for load-balancing
or workload distribution use.  For example, an application would stop
receiving any new workload when its memory usage exceeds a
certain threshold. It is not intended for an application to detect
and recover from a low memory condition.

&lt;h4&gt;Notifications&lt;/h4&gt;

&lt;p&gt;This &lt;tt&gt;MemoryMXBean&lt;/tt&gt; is a
{@link javax.management.NotificationEmitter NotificationEmitter}
that emits two types of memory {@link javax.management.Notification
notifications} if any one of the memory pools
supports a &lt;a href="MemoryPoolMXBean#UsageThreshold"&gt;usage threshold&lt;/a&gt;
or a &lt;a href="MemoryPoolMXBean#CollectionThreshold"&gt;collection usage
threshold&lt;/a&gt; which can be determined by calling the
{@link MemoryPoolMXBean#isUsageThresholdSupported} and
{@link MemoryPoolMXBean#isCollectionUsageThresholdSupported} methods.
&lt;ul&gt;
&lt;li&gt;{@link MemoryNotificationInfo#MEMORY_THRESHOLD_EXCEEDED
usage threshold exceeded notification} - for notifying that
the memory usage of a memory pool is increased and has reached
or exceeded its
&lt;a href="MemoryPoolMXBean#UsageThreshold"&gt; usage threshold&lt;/a&gt; value.
&lt;/li&gt;
&lt;li&gt;{@link MemoryNotificationInfo#MEMORY_COLLECTION_THRESHOLD_EXCEEDED
collection usage threshold exceeded notification} - for notifying that
the memory usage of a memory pool is greater than or equal to its
&lt;a href="MemoryPoolMXBean#CollectionThreshold"&gt;
collection usage threshold&lt;/a&gt; after the Java virtual machine
has expended effort in recycling unused objects in that
memory pool.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
The notification emitted is a {@link javax.management.Notification}
instance whose {@link javax.management.Notification#setUserData
user data} is set to a {@link CompositeData CompositeData}
that represents a {@link MemoryNotificationInfo} object
containing information about the memory pool when the notification
was constructed. The &lt;tt&gt;CompositeData&lt;/tt&gt; contains the attributes
as described in {@link MemoryNotificationInfo#from
MemoryNotificationInfo}.

&lt;hr&gt;
&lt;h4&gt;NotificationEmitter&lt;/h4&gt;
The &lt;tt&gt;MemoryMXBean&lt;/tt&gt; object returned by
{@link ManagementFactory#getMemoryMXBean} implements
the {@link javax.management.NotificationEmitter NotificationEmitter}
interface that allows a listener to be registered within the
&lt;tt&gt;MemoryMXBean&lt;/tt&gt; as a notification listener.

Below is an example code that registers a &lt;tt&gt;MyListener&lt;/tt&gt; to handle
notification emitted by the &lt;tt&gt;MemoryMXBean&lt;/tt&gt;.

&lt;blockquote&gt;&lt;pre&gt;
class MyListener implements javax.management.NotificationListener {
public void handleNotification(Notification notif, Object handback) {
handle notification
....
}
}

MemoryMXBean mbean = ManagementFactory.getMemoryMXBean();
NotificationEmitter emitter = (NotificationEmitter) mbean;
MyListener listener = new MyListener();
emitter.addNotificationListener(listener, null, null);
&lt;/pre&gt;&lt;/blockquote&gt;

@see &lt;a href="../../../javax/management/package-summary.html"&gt;
JMX Specification.&lt;/a&gt;
@see &lt;a href="package-summary.html#examples"&gt;
Ways to Access MXBeans&lt;/a&gt;

@author  Mandy Chung
@version 1.14, 04/20/04
@since   1.5
</documentation><isAbstract humanName="Is Abstract">true</isAbstract><isFinalSpecialization humanName="Is Final Specialization" mode="e">false</isFinalSpecialization><isLeaf humanName="Is Leaf" mode="e">false</isLeaf><name humanName="Name" mode="s,e">MemoryMXBean</name><namespace classType="Package" humanName="Namespace" humanType="Package" icon="index_files/icon_package_1518868172.jpg" name="management" refElementId="_10_5_622020d_1132928307518_833692_4788" refid="_10_5_622020d_1132928307518_833692_4788"/><ownedComment humanName="Owned Comment"><comment classType="Comment" humanType="Comment" icon="index_files/icon_comment_841774062.jpg" name="The management interface for the memory system of ..." refElementId="_10_5_622020d_1132928307598_219339_4809" refid="_10_5_622020d_1132928307598_219339_4809"/></ownedComment><ownedElement humanName="Owned Element"><comment classType="Comment" humanType="Comment" icon="index_files/icon_comment_841774062.jpg" name="The management interface for the memory system of ..." refElementId="_10_5_622020d_1132928307598_219339_4809" refid="_10_5_622020d_1132928307598_219339_4809"/></ownedElement><owner classType="Package" humanName="Owner" humanType="Package" icon="index_files/icon_package_1518868172.jpg" mode="s,e" name="management" refElementId="_10_5_622020d_1132928307518_833692_4788" refid="_10_5_622020d_1132928307518_833692_4788"/><owningPackage classType="Package" humanName="Owning Package" humanType="Package" icon="index_files/icon_package_1518868172.jpg" name="management" refElementId="_10_5_622020d_1132928307518_833692_4788" refid="_10_5_622020d_1132928307518_833692_4788"/><package classType="Package" humanName="Package" humanType="Package" icon="index_files/icon_package_1518868172.jpg" name="management" refElementId="_10_5_622020d_1132928307518_833692_4788" refid="_10_5_622020d_1132928307518_833692_4788"/><qualifiedName humanName="Qualified Name" mode="e">JDK 5.0 Classes::java::lang::management::MemoryMXBean</qualifiedName><TO_DO humanName="To Do" mode="s,e"/><visibility humanName="Visibility">public</visibility></interface></magicdraw>