<?xml version="1.0" encoding="UTF-8"?><magicdraw><class classType="Class" humanType="Class" icon="index_files/icon_class_555864569.jpg" id="_9_5_f720368_1110473546596_264924_7347" refElementId="_9_5_f720368_1110473546596_264924_7347"><documentation humanName="Documentation" mode="s">The &lt;code&gt;XMLEncoder&lt;/code&gt; class is a complementary alternative to
the &lt;code&gt;ObjectOutputStream&lt;/code&gt; and can used to generate
a textual representation of a &lt;em&gt;JavaBean&lt;/em&gt; in the same
way that the &lt;code&gt;ObjectOutputStream&lt;/code&gt; can
be used to create binary representation of &lt;code&gt;Serializable&lt;/code&gt;
objects. For example, the following fragment can be used to create
a textual representation the supplied &lt;em&gt;JavaBean&lt;/em&gt;
and all its properties:
&lt;pre&gt;
XMLEncoder e = new XMLEncoder(
new BufferedOutputStream(
new FileOutputStream("Test.xml")));
e.writeObject(new JButton("Hello, world"));
e.close();
&lt;/pre&gt;
Despite the similarity of their APIs, the &lt;code&gt;XMLEncoder&lt;/code&gt;
class is exclusively designed for the purpose of archiving graphs
of &lt;em&gt;JavaBean&lt;/em&gt;s as textual representations of their public
properties. Like Java source files, documents written this way
have a natural immunity to changes in the implementations of the classes
involved. The &lt;code&gt;ObjectOutputStream&lt;/code&gt; continues to be recommended
for interprocess communication and general purpose serialization.
&lt;p&gt;
The &lt;code&gt;XMLEncoder&lt;/code&gt; class provides a default denotation for
&lt;em&gt;JavaBean&lt;/em&gt;s in which they are represented as XML documents
complying with version 1.0 of the XML specification and the
UTF-8 character encoding of the Unicode/ISO 10646 character set.
The XML documents produced by the &lt;code&gt;XMLEncoder&lt;/code&gt; class are:
&lt;ul&gt;
&lt;li&gt;
&lt;em&gt;Portable and version resilient&lt;/em&gt;: they have no dependencies
on the private implementation of any class and so, like Java source
files, they may be exchanged between environments which may have
different versions of some of the classes and between VMs from
different vendors.
&lt;li&gt;
&lt;em&gt;Structurally compact&lt;/em&gt;: The &lt;code&gt;XMLEncoder&lt;/code&gt; class
uses a &lt;em&gt;redundancy elimination&lt;/em&gt; algorithm internally so that the
default values of a Bean's properties are not written to the stream.
&lt;li&gt;
&lt;em&gt;Fault tolerant&lt;/em&gt;: Non-structural errors in the file,
caused either by damage to the file or by API changes
made to classes in an archive remain localized
so that a reader can report the error and continue to load the parts
of the document which were not affected by the error.
&lt;/ul&gt;
&lt;p&gt;
Below is an example of an XML archive containing
some user interface components from the &lt;em&gt;swing&lt;/em&gt; toolkit:
&lt;pre&gt;
&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;java version="1.0" class="java.beans.XMLDecoder"&gt;
&lt;object class="javax.swing.JFrame"&gt;
&lt;void property="name"&gt;
&lt;string&gt;frame1&lt;/string&gt;
&lt;/void&gt;
&lt;void property="bounds"&gt;
&lt;object class="java.awt.Rectangle"&gt;
&lt;int&gt;0&lt;/int&gt;
&lt;int&gt;0&lt;/int&gt;
&lt;int&gt;200&lt;/int&gt;
&lt;int&gt;200&lt;/int&gt;
&lt;/object&gt;
&lt;/void&gt;
&lt;void property="contentPane"&gt;
&lt;void method="add"&gt;
&lt;object class="javax.swing.JButton"&gt;
&lt;void property="label"&gt;
&lt;string&gt;Hello&lt;/string&gt;
&lt;/void&gt;
&lt;/object&gt;
&lt;/void&gt;
&lt;/void&gt;
&lt;void property="visible"&gt;
&lt;boolean&gt;true&lt;/boolean&gt;
&lt;/void&gt;
&lt;/object&gt;
&lt;/java&gt;
&lt;/pre&gt;
The XML syntax uses the following conventions:
&lt;ul&gt;
&lt;li&gt;
Each element represents a method call.
&lt;li&gt;
The "object" tag denotes an &lt;em&gt;expression&lt;/em&gt; whose value is
to be used as the argument to the enclosing element.
&lt;li&gt;
The "void" tag denotes a &lt;em&gt;statement&lt;/em&gt; which will
be executed, but whose result will not be used as an
argument to the enclosing method.
&lt;li&gt;
Elements which contain elements use those elements as arguments,
unless they have the tag: "void".
&lt;li&gt;
The name of the method is denoted by the "method" attribute.
&lt;li&gt;
XML's standard "id" and "idref" attributes are used to make
references to previous expressions - so as to deal with
circularities in the object graph.
&lt;li&gt;
The "class" attribute is used to specify the target of a static
method or constructor explicitly; its value being the fully
qualified name of the class.
&lt;li&gt;
Elements with the "void" tag are executed using
the outer context as the target if no target is defined
by a "class" attribute.
&lt;li&gt;
Java's String class is treated specially and is
written &lt;string&gt;Hello, world&lt;/string&gt; where
the characters of the string are converted to bytes
using the UTF-8 character encoding.
&lt;/ul&gt;
&lt;p&gt;
Although all object graphs may be written using just these three
tags, the following definitions are included so that common
data structures can be expressed more concisely:
&lt;p&gt;
&lt;ul&gt;
&lt;li&gt;
The default method name is "new".
&lt;li&gt;
A reference to a java class is written in the form
&lt;class&gt;javax.swing.JButton&lt;/class&gt;.
&lt;li&gt;
Instances of the wrapper classes for Java's primitive types are written
using the name of the primitive type as the tag. For example, an
instance of the &lt;code&gt;Integer&lt;/code&gt; class could be written:
&lt;int&gt;123&lt;/int&gt;. Note that the &lt;code&gt;XMLEncoder&lt;/code&gt; class
uses Java's reflection package in which the conversion between
Java's primitive types and their associated "wrapper classes"
is handled internally. The API for the &lt;code&gt;XMLEncoder&lt;/code&gt; class
itself deals only with &lt;code&gt;Object&lt;/code&gt;s.
&lt;li&gt;
In an element representing a nullary method whose name
starts with "get", the "method" attribute is replaced
with a "property" attribute whose value is given by removing
the "get" prefix and decapitalizing the result.
&lt;li&gt;
In an element representing a monadic method whose name
starts with "set", the "method" attribute is replaced
with a "property" attribute whose value is given by removing
the "set" prefix and decapitalizing the result.
&lt;li&gt;
In an element representing a method named "get" taking one
integer argument, the "method" attribute is replaced
with an "index" attribute whose value the value of the
first argument.
&lt;li&gt;
In an element representing a method named "set" taking two arguments,
the first of which is an integer, the "method" attribute is replaced
with an "index" attribute whose value the value of the
first argument.
&lt;li&gt;
A reference to an array is written using the "array"
tag. The "class" and "length" attributes specify the
sub-type of the array and its length respectively.
&lt;/ul&gt;

&lt;p&gt;
For more information you might also want to check out
&lt;a
href="http://java.sun.com/products/jfc/tsc/articles/persistence4"&gt;Using XMLEncoder&lt;/a&gt;,
an article in &lt;em&gt;The Swing Connection.&lt;/em&gt;
@see XMLDecoder
@see java.io.ObjectOutputStream

@since 1.4

@version 1.33 12/19/03
@author Philip Milne
</documentation><generalization humanName="Generalization"><generalization classType="Generalization" humanType="Generalization" icon="index_files/icon_generalization_1454922150.jpg" isRelationship="true" name="Generalization[JDK 5.0 Classes::java::beans::XMLEncoder -&gt; JDK 5.0 Classes::java::beans::Encoder]" refElementId="_10_5_622020d_1132928321558_664535_13471" refid="_10_5_622020d_1132928321558_664535_13471"/></generalization><isAbstract humanName="Is Abstract" mode="s,e">false</isAbstract><isActive humanName="Is Active" mode="s,e">false</isActive><isFinalSpecialization humanName="Is Final Specialization" mode="e">false</isFinalSpecialization><isLeaf humanName="Is Leaf" mode="e">false</isLeaf><member humanName="Member"><class classType="Class" humanType="Class" icon="index_files/icon_class_555864569.jpg" name="ValueData" refElementId="_9_5_f720368_1110473547471_415094_17502" refid="_9_5_f720368_1110473547471_415094_17502"/></member><name humanName="Name" mode="s,e">XMLEncoder</name><namespace classType="Package" humanName="Namespace" humanType="Package" icon="index_files/icon_package_1518868172.jpg" name="beans" refElementId="_9_5_f720368_1110473547440_999992_17398" refid="_9_5_f720368_1110473547440_999992_17398"/><nestedClassifier humanName="Nested Classifier"><class classType="Class" humanType="Class" icon="index_files/icon_class_555864569.jpg" name="ValueData" refElementId="_9_5_f720368_1110473547471_415094_17502" refid="_9_5_f720368_1110473547471_415094_17502"/></nestedClassifier><ownedComment humanName="Owned Comment"><comment classType="Comment" humanType="Comment" icon="index_files/icon_comment_841774062.jpg" name="The &lt;code&gt;XMLEncoder&lt;/code&gt; class is a complementa..." refElementId="_10_5_622020d_1132928306987_943293_4531" refid="_10_5_622020d_1132928306987_943293_4531"/></ownedComment><ownedElement humanName="Owned Element"><generalization classType="Generalization" humanType="Generalization" icon="index_files/icon_generalization_1454922150.jpg" isRelationship="true" name="Generalization[JDK 5.0 Classes::java::beans::XMLEncoder -&gt; JDK 5.0 Classes::java::beans::Encoder]" refElementId="_10_5_622020d_1132928321558_664535_13471" refid="_10_5_622020d_1132928321558_664535_13471"/><comment classType="Comment" humanType="Comment" icon="index_files/icon_comment_841774062.jpg" name="The &lt;code&gt;XMLEncoder&lt;/code&gt; class is a complementa..." refElementId="_10_5_622020d_1132928306987_943293_4531" refid="_10_5_622020d_1132928306987_943293_4531"/><class classType="Class" humanType="Class" icon="index_files/icon_class_555864569.jpg" name="ValueData" refElementId="_9_5_f720368_1110473547471_415094_17502" refid="_9_5_f720368_1110473547471_415094_17502"/></ownedElement><ownedMember humanName="Owned Member"><class classType="Class" humanType="Class" icon="index_files/icon_class_555864569.jpg" name="ValueData" refElementId="_9_5_f720368_1110473547471_415094_17502" refid="_9_5_f720368_1110473547471_415094_17502"/></ownedMember><owner classType="Package" humanName="Owner" humanType="Package" icon="index_files/icon_package_1518868172.jpg" mode="s,e" name="beans" refElementId="_9_5_f720368_1110473547440_999992_17398" refid="_9_5_f720368_1110473547440_999992_17398"/><owningPackage classType="Package" humanName="Owning Package" humanType="Package" icon="index_files/icon_package_1518868172.jpg" name="beans" refElementId="_9_5_f720368_1110473547440_999992_17398" refid="_9_5_f720368_1110473547440_999992_17398"/><package classType="Package" humanName="Package" humanType="Package" icon="index_files/icon_package_1518868172.jpg" name="beans" refElementId="_9_5_f720368_1110473547440_999992_17398" refid="_9_5_f720368_1110473547440_999992_17398"/><qualifiedName humanName="Qualified Name" mode="e">JDK 5.0 Classes::java::beans::XMLEncoder</qualifiedName><superClass humanName="Super Class"><class classType="Class" humanType="Class" icon="index_files/icon_class_555864569.jpg" name="Encoder" refElementId="_9_5_f720368_1110473546596_797786_7205" refid="_9_5_f720368_1110473546596_797786_7205"/></superClass><TO_DO humanName="To Do" mode="s,e"/><visibility humanName="Visibility" mode="e">public</visibility></class></magicdraw>