<?xml version="1.0" encoding="UTF-8"?><magicdraw><comment classType="Comment" humanType="Comment" icon="index_files/icon_comment_841774062.jpg" id="_10_5_622020d_1132928309862_255066_6280" refElementId="_10_5_622020d_1132928309862_255066_6280"><annotatedElement humanName="Annotated Element" mode="s,e"><class classType="Class" humanType="Class" icon="index_files/icon_class_555864569.jpg" name="RuleBasedCollator" refElementId="_9_5_f720368_1110473546690_915400_8679" refid="_9_5_f720368_1110473546690_915400_8679"/></annotatedElement><body humanName="Body" mode="s,e">The &lt;code&gt;RuleBasedCollator&lt;/code&gt; class is a concrete subclass of
&lt;code&gt;Collator&lt;/code&gt; that provides a simple, data-driven, table
collator.  With this class you can create a customized table-based
&lt;code&gt;Collator&lt;/code&gt;.  &lt;code&gt;RuleBasedCollator&lt;/code&gt; maps
characters to sort keys.

&lt;p&gt;
&lt;code&gt;RuleBasedCollator&lt;/code&gt; has the following restrictions
for efficiency (other subclasses may be used for more complex languages) :
&lt;ol&gt;
&lt;li&gt;If a special collation rule controlled by a &lt;modifier&gt; is
specified it applies to the whole collator object.
&lt;li&gt;All non-mentioned characters are at the end of the
collation order.
&lt;/ol&gt;

&lt;p&gt;
The collation table is composed of a list of collation rules, where each
rule is of one of three forms:
&lt;pre&gt;
&lt;modifier&gt;
&lt;relation&gt; &lt;text-argument&gt;
&lt;reset&gt; &lt;text-argument&gt;
&lt;/pre&gt;
The definitions of the rule elements is as follows:
&lt;UL Type=disc&gt;
&lt;LI&gt;&lt;strong&gt;Text-Argument&lt;/strong&gt;: A text-argument is any sequence of
characters, excluding special characters (that is, common
whitespace characters [0009-000D, 0020] and rule syntax characters
[0021-002F, 003A-0040, 005B-0060, 007B-007E]). If those
characters are desired, you can put them in single quotes
(e.g. ampersand =&gt; '&amp;'). Note that unquoted white space characters
are ignored; e.g. &lt;code&gt;b c&lt;/code&gt; is treated as &lt;code&gt;bc&lt;/code&gt;.
&lt;LI&gt;&lt;strong&gt;Modifier&lt;/strong&gt;: There are currently two modifiers that
turn on special collation rules.
&lt;UL Type=square&gt;
&lt;LI&gt;'@' : Turns on backwards sorting of accents (secondary
differences), as in French.
&lt;LI&gt;'!' : Turns on Thai/Lao vowel-consonant swapping.  If this
rule is in force when a Thai vowel of the range
&amp;#92;U0E40-&amp;#92;U0E44 precedes a Thai consonant of the range
&amp;#92;U0E01-&amp;#92;U0E2E OR a Lao vowel of the range &amp;#92;U0EC0-&amp;#92;U0EC4
precedes a Lao consonant of the range &amp;#92;U0E81-&amp;#92;U0EAE then
the vowel is placed after the consonant for collation
purposes.
&lt;/UL&gt;
&lt;p&gt;'@' : Indicates that accents are sorted backwards, as in French.
&lt;LI&gt;&lt;strong&gt;Relation&lt;/strong&gt;: The relations are the following:
&lt;UL Type=square&gt;
&lt;LI&gt;'&lt;' : Greater, as a letter difference (primary)
&lt;LI&gt;';' : Greater, as an accent difference (secondary)
&lt;LI&gt;',' : Greater, as a case difference (tertiary)
&lt;LI&gt;'=' : Equal
&lt;/UL&gt;
&lt;LI&gt;&lt;strong&gt;Reset&lt;/strong&gt;: There is a single reset
which is used primarily for contractions and expansions, but which
can also be used to add a modification at the end of a set of rules.
&lt;p&gt;'&amp;' : Indicates that the next rule follows the position to where
the reset text-argument would be sorted.
&lt;/UL&gt;

&lt;p&gt;
This sounds more complicated than it is in practice. For example, the
following are equivalent ways of expressing the same thing:
&lt;blockquote&gt;
&lt;pre&gt;
a &lt; b &lt; c
a &lt; b &amp; b &lt; c
a &lt; c &amp; a &lt; b
&lt;/pre&gt;
&lt;/blockquote&gt;
Notice that the order is important, as the subsequent item goes immediately
after the text-argument. The following are not equivalent:
&lt;blockquote&gt;
&lt;pre&gt;
a &lt; b &amp; a &lt; c
a &lt; c &amp; a &lt; b
&lt;/pre&gt;
&lt;/blockquote&gt;
Either the text-argument must already be present in the sequence, or some
initial substring of the text-argument must be present. (e.g. "a &lt; b &amp; ae &lt;
e" is valid since "a" is present in the sequence before "ae" is reset). In
this latter case, "ae" is not entered and treated as a single character;
instead, "e" is sorted as if it were expanded to two characters: "a"
followed by an "e". This difference appears in natural languages: in
traditional Spanish "ch" is treated as though it contracts to a single
character (expressed as "c &lt; ch &lt; d"), while in traditional German
a-umlaut is treated as though it expanded to two characters
(expressed as "a,A &lt; b,B ... &amp;ae;&amp;#92;u00e3&amp;AE;&amp;#92;u00c3").
[&amp;#92;u00e3 and &amp;#92;u00c3 are, of course, the escape sequences for a-umlaut.]
&lt;p&gt;
&lt;strong&gt;Ignorable Characters&lt;/strong&gt;
&lt;p&gt;
For ignorable characters, the first rule must start with a relation (the
examples we have used above are really fragments; "a &lt; b" really should be
"&lt; a &lt; b"). If, however, the first relation is not "&lt;", then all the all
text-arguments up to the first "&lt;" are ignorable. For example, ", - &lt; a &lt; b"
makes "-" an ignorable character, as we saw earlier in the word
"black-birds". In the samples for different languages, you see that most
accents are ignorable.

&lt;p&gt;&lt;strong&gt;Normalization and Accents&lt;/strong&gt;
&lt;p&gt;
&lt;code&gt;RuleBasedCollator&lt;/code&gt; automatically processes its rule table to
include both pre-composed and combining-character versions of
accented characters.  Even if the provided rule string contains only
base characters and separate combining accent characters, the pre-composed
accented characters matching all canonical combinations of characters from
the rule string will be entered in the table.
&lt;p&gt;
This allows you to use a RuleBasedCollator to compare accented strings
even when the collator is set to NO_DECOMPOSITION.  There are two caveats,
however.  First, if the strings to be collated contain combining
sequences that may not be in canonical order, you should set the collator to
CANONICAL_DECOMPOSITION or FULL_DECOMPOSITION to enable sorting of
combining sequences.  Second, if the strings contain characters with
compatibility decompositions (such as full-width and half-width forms),
you must use FULL_DECOMPOSITION, since the rule tables only include
canonical mappings.

&lt;p&gt;&lt;strong&gt;Errors&lt;/strong&gt;
&lt;p&gt;
The following are errors:
&lt;UL Type=disc&gt;
&lt;LI&gt;A text-argument contains unquoted punctuation symbols
(e.g. "a &lt; b-c &lt; d").
&lt;LI&gt;A relation or reset character not followed by a text-argument
(e.g. "a &lt; ,b").
&lt;LI&gt;A reset where the text-argument (or an initial substring of the
text-argument) is not already in the sequence.
(e.g. "a &lt; b &amp; e &lt; f")
&lt;/UL&gt;
If you produce one of these errors, a &lt;code&gt;RuleBasedCollator&lt;/code&gt; throws
a &lt;code&gt;ParseException&lt;/code&gt;.

&lt;p&gt;&lt;strong&gt;Examples&lt;/strong&gt;
&lt;p&gt;Simple:     "&lt; a &lt; b &lt; c &lt; d"
&lt;p&gt;Norwegian:  "&lt; a,A&lt; b,B&lt; c,C&lt; d,D&lt; e,E&lt; f,F&lt; g,G&lt; h,H&lt; i,I&lt; j,J
&lt; k,K&lt; l,L&lt; m,M&lt; n,N&lt; o,O&lt; p,P&lt; q,Q&lt; r,R&lt; s,S&lt; t,T
&lt; u,U&lt; v,V&lt; w,W&lt; x,X&lt; y,Y&lt; z,Z
&lt; &amp;#92;u00E5=a&amp;#92;u030A,&amp;#92;u00C5=A&amp;#92;u030A
;aa,AA&lt; &amp;#92;u00E6,&amp;#92;u00C6&lt; &amp;#92;u00F8,&amp;#92;u00D8"

&lt;p&gt;
Normally, to create a rule-based Collator object, you will use
&lt;code&gt;Collator&lt;/code&gt;'s factory method &lt;code&gt;getInstance&lt;/code&gt;.
However, to create a rule-based Collator object with specialized
rules tailored to your needs, you construct the &lt;code&gt;RuleBasedCollator&lt;/code&gt;
with the rules contained in a &lt;code&gt;String&lt;/code&gt; object. For example:
&lt;blockquote&gt;
&lt;pre&gt;
String Simple = "&lt; a&lt; b&lt; c&lt; d";
RuleBasedCollator mySimple = new RuleBasedCollator(Simple);
&lt;/pre&gt;
&lt;/blockquote&gt;
Or:
&lt;blockquote&gt;
&lt;pre&gt;
String Norwegian = "&lt; a,A&lt; b,B&lt; c,C&lt; d,D&lt; e,E&lt; f,F&lt; g,G&lt; h,H&lt; i,I&lt; j,J" +
"&lt; k,K&lt; l,L&lt; m,M&lt; n,N&lt; o,O&lt; p,P&lt; q,Q&lt; r,R&lt; s,S&lt; t,T" +
"&lt; u,U&lt; v,V&lt; w,W&lt; x,X&lt; y,Y&lt; z,Z" +
"&lt; &amp;#92;u00E5=a&amp;#92;u030A,&amp;#92;u00C5=A&amp;#92;u030A" +
";aa,AA&lt; &amp;#92;u00E6,&amp;#92;u00C6&lt; &amp;#92;u00F8,&amp;#92;u00D8";
RuleBasedCollator myNorwegian = new RuleBasedCollator(Norwegian);
&lt;/pre&gt;
&lt;/blockquote&gt;

&lt;p&gt;
Combining &lt;code&gt;Collator&lt;/code&gt;s is as simple as concatenating strings.
Here's an example that combines two &lt;code&gt;Collator&lt;/code&gt;s from two
different locales:
&lt;blockquote&gt;
&lt;pre&gt;
Create an en_US Collator object
RuleBasedCollator en_USCollator = (RuleBasedCollator)
Collator.getInstance(new Locale("en", "US", ""));
Create a da_DK Collator object
RuleBasedCollator da_DKCollator = (RuleBasedCollator)
Collator.getInstance(new Locale("da", "DK", ""));
Combine the two
First, get the collation rules from en_USCollator
String en_USRules = en_USCollator.getRules();
Second, get the collation rules from da_DKCollator
String da_DKRules = da_DKCollator.getRules();
RuleBasedCollator newCollator =
new RuleBasedCollator(en_USRules + da_DKRules);
newCollator has the combined rules
&lt;/pre&gt;
&lt;/blockquote&gt;

&lt;p&gt;
Another more interesting example would be to make changes on an existing
table to create a new &lt;code&gt;Collator&lt;/code&gt; object.  For example, add
"&amp;C&lt; ch, cH, Ch, CH" to the &lt;code&gt;en_USCollator&lt;/code&gt; object to create
your own:
&lt;blockquote&gt;
&lt;pre&gt;
Create a new Collator object with additional rules
String addRules = "&amp;C&lt; ch, cH, Ch, CH";
RuleBasedCollator myCollator =
new RuleBasedCollator(en_USCollator + addRules);
myCollator contains the new rules
&lt;/pre&gt;
&lt;/blockquote&gt;

&lt;p&gt;
The following example demonstrates how to change the order of
non-spacing accents,
&lt;blockquote&gt;
&lt;pre&gt;
old rule
String oldRules = "=&amp;#92;u0301;&amp;#92;u0300;&amp;#92;u0302;&amp;#92;u0308"    // main accents
+ ";&amp;#92;u0327;&amp;#92;u0303;&amp;#92;u0304;&amp;#92;u0305"    // main accents
+ ";&amp;#92;u0306;&amp;#92;u0307;&amp;#92;u0309;&amp;#92;u030A"    // main accents
+ ";&amp;#92;u030B;&amp;#92;u030C;&amp;#92;u030D;&amp;#92;u030E"    // main accents
+ ";&amp;#92;u030F;&amp;#92;u0310;&amp;#92;u0311;&amp;#92;u0312"    // main accents
+ "&lt; a , A ; ae, AE ; &amp;#92;u00e6 , &amp;#92;u00c6"
+ "&lt; b , B &lt; c, C &lt; e, E &amp; C &lt; d, D";
change the order of accent characters
String addOn = "&amp; &amp;#92;u0300 ; &amp;#92;u0308 ; &amp;#92;u0302";
RuleBasedCollator myCollator = new RuleBasedCollator(oldRules + addOn);
&lt;/pre&gt;
&lt;/blockquote&gt;

&lt;p&gt;
The last example shows how to put new primary ordering in before the
default setting. For example, in Japanese &lt;code&gt;Collator&lt;/code&gt;, you
can either sort English characters before or after Japanese characters,
&lt;blockquote&gt;
&lt;pre&gt;
get en_US Collator rules
RuleBasedCollator en_USCollator = (RuleBasedCollator)Collator.getInstance(Locale.US);
add a few Japanese character to sort before English characters
suppose the last character before the first base letter 'a' in
the English collation rule is &amp;#92;u2212
String jaString = "&amp; &amp;#92;u2212 &lt; &amp;#92;u3041, &amp;#92;u3042 &lt; &amp;#92;u3043, &amp;#92;u3044";
RuleBasedCollator myJapaneseCollator = new
RuleBasedCollator(en_USCollator.getRules() + jaString);
&lt;/pre&gt;
&lt;/blockquote&gt;

@see        Collator
@see        CollationElementIterator
@version    1.25 07/24/98
@author     Helena Shih, Laura Werner, Richard Gillam
</body><documentation humanName="Documentation"/><owner classType="Class" humanName="Owner" humanType="Class" icon="index_files/icon_class_555864569.jpg" mode="s,e" name="RuleBasedCollator" refElementId="_9_5_f720368_1110473546690_915400_8679" refid="_9_5_f720368_1110473546690_915400_8679"/><owningElement classType="Class" humanName="Owning Element" humanType="Class" icon="index_files/icon_class_555864569.jpg" name="RuleBasedCollator" refElementId="_9_5_f720368_1110473546690_915400_8679" refid="_9_5_f720368_1110473546690_915400_8679"/><TO_DO humanName="To Do" mode="s,e"/></comment></magicdraw>