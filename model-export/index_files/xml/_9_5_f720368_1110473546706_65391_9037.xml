<?xml version="1.0" encoding="UTF-8"?><magicdraw><class classType="Class" humanType="Class" icon="index_files/icon_class_1555793073.jpg" id="_9_5_f720368_1110473546706_65391_9037"><documentation humanName="Documentation" mode="standard">A registry for service provider instances.  Service provider
classes may be detected at run time by means of meta-information in
the JAR files containing them.  The intent is that it be relatively
inexpensive to load and inspect all available service provider
classes.  These classes may them be used to locate and instantiate
more heavyweight classes that will perform actual work, in this
case instances of &lt;code&gt;ImageReader&lt;/code&gt;,
&lt;code&gt;ImageWriter&lt;/code&gt;, &lt;code&gt;ImageTranscoder&lt;/code&gt;,
&lt;code&gt;ImageInputStream&lt;/code&gt;, and &lt;code&gt;ImageOutputStream&lt;/code&gt;.

&lt;p&gt; Service providers found on the system classpath (&lt;i&gt;e.g.&lt;/i&gt;,
the &lt;code&gt;jre/lib/ext&lt;/code&gt; directory in Sun's implementation of
JDK) are automatically loaded as soon as this class is
instantiated.

&lt;p&gt; When the &lt;code&gt;registerApplicationClasspathSpis&lt;/code&gt; method
is called, service provider instances declared in the
meta-information section of JAR files on the application class path
are loaded.  To declare a service provider, a &lt;code&gt;services&lt;/code&gt;
subdirectory is placed within the &lt;code&gt;META-INF&lt;/code&gt; directory
that is present in every JAR file.  This directory contains a file
for each service provider interface that has one or more
implementation classes present in the JAR file.  For example, if
the JAR file contained a class named
&lt;code&gt;com.mycompany.imageio.MyFormatReaderSpi&lt;/code&gt; which
implements the &lt;code&gt;ImageReaderSpi&lt;/code&gt; interface, the JAR file
would contain a file named:

&lt;pre&gt;
META-INF/services/javax.imageio.spi.ImageReaderSpi
&lt;/pre&gt;

containing the line:

&lt;pre&gt;
com.mycompany.imageio.MyFormatReaderSpi
&lt;/pre&gt;

&lt;p&gt; The service provider classes are intended to be lightweight
and quick to load.  Implementations of these interfaces
should avoid complex dependencies on other classes and on
native code.

&lt;p&gt; It is also possible to manually add service providers not found
automatically, as well as to remove those that are using the
interfaces of the &lt;code&gt;ServiceRegistry&lt;/code&gt; class.  Thus
the application may customize the contents of the registry as it
sees fit.

&lt;p&gt; For more details on declaring service providers, and the JAR
format in general, see the &lt;a
href="{@docRoot}/../guide/jar/jar.html"&gt;
JAR File Specification&lt;/a&gt;.

@version 0.5
</documentation><generalization humanName="Generalization"><generalization classType="Generalization" humanType="Generalization" icon="index_files/icon_generalization_99042020.jpg" isRelationship="true" refid="_10_5_622020d_1132928322920_102540_15786"/></generalization><inheritedMember humanName="Inherited Member"><interface classType="Interface" humanType="Interface" icon="index_files/icon_interface_118881143.jpg" name="Filter" refid="_9_5_f720368_1110473547924_74512_19895"/></inheritedMember><isAbstract humanName="Is Abstract" mode="s,e">false</isAbstract><isActive humanName="Is Active" mode="s,e">false</isActive><isFinalSpecialization humanName="Is Final Specialization" mode="e">true</isFinalSpecialization><isLeaf humanName="Is Leaf" mode="e">true</isLeaf><member humanName="Member"><interface classType="Interface" humanType="Interface" icon="index_files/icon_interface_118881143.jpg" name="Filter" refid="_9_5_f720368_1110473547924_74512_19895"/></member><name humanName="Name" mode="s,e">IIORegistry</name><namespace classType="Package" humanName="Namespace" humanType="Package" icon="index_files/icon_package_2000410491.jpg" name="spi" refid="_9_5_f720368_1110473547924_291094_19882"/><ownedComment humanName="Owned Comment"><comment classType="Comment" humanType="Comment" icon="index_files/icon_comment_2051026490.jpg" refid="_10_5_622020d_1132928314799_202556_9191"/></ownedComment><ownedElement humanName="Owned Element"><generalization classType="Generalization" humanType="Generalization" icon="index_files/icon_generalization_99042020.jpg" isRelationship="true" refid="_10_5_622020d_1132928322920_102540_15786"/><comment classType="Comment" humanType="Comment" icon="index_files/icon_comment_2051026490.jpg" refid="_10_5_622020d_1132928314799_202556_9191"/></ownedElement><owner classType="Package" humanName="Owner" humanType="Package" icon="index_files/icon_package_2000410491.jpg" mode="s,e" name="spi" refid="_9_5_f720368_1110473547924_291094_19882"/><owningPackage classType="Package" humanName="Owning Package" humanType="Package" icon="index_files/icon_package_2000410491.jpg" name="spi" refid="_9_5_f720368_1110473547924_291094_19882"/><package classType="Package" humanName="Package" humanType="Package" icon="index_files/icon_package_2000410491.jpg" name="spi" refid="_9_5_f720368_1110473547924_291094_19882"/><qualifiedName humanName="Qualified Name" mode="e">JDK 5.0 Classes::javax::imageio::spi::IIORegistry</qualifiedName><superClass humanName="Super Class"><class classType="Class" humanType="Class" icon="index_files/icon_class_1555793073.jpg" name="ServiceRegistry" refid="_9_5_f720368_1110473546706_699100_9059"/></superClass><TO_DO humanName="To Do" mode="s,e"/><visibility humanName="Visibility" mode="e">public</visibility></class></magicdraw>