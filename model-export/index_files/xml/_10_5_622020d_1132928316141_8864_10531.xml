<?xml version="1.0" encoding="UTF-8"?><magicdraw><comment classType="Comment" humanType="Comment" icon="index_files/icon_comment_2051026490.jpg" id="_10_5_622020d_1132928316141_8864_10531"><annotatedElement humanName="Annotated Element" mode="s,e"><interface classType="Interface" humanType="Interface" icon="index_files/icon_interface_118881143.jpg" name="SaslServer" refid="_10_5_622020d_1132928316131_289667_10529"/></annotatedElement><body humanName="Body" mode="s,e">Performs SASL authentication as a server.
&lt;p&gt;
A server such an LDAP server gets an instance of this
class in order to perform authentication defined by a specific SASL
mechanism. Invoking methods on the &lt;tt&gt;SaslServer&lt;/tt&gt; instance
generates challenges according to the SASL
mechanism implemented by the &lt;tt&gt;SaslServer&lt;/tt&gt;.
As the authentication proceeds, the instance
encapsulates the state of a SASL server's authentication exchange.
&lt;p&gt;
Here's an example of how an LDAP server might use a &lt;tt&gt;SaslServer&lt;/tt&gt;.
It first gets an instance of a &lt;tt&gt;SaslServer&lt;/tt&gt; for the SASL mechanism
requested by the client:
&lt;blockquote&gt;&lt;pre&gt;
SaslServer ss = Sasl.createSaslServer(mechanism,
"ldap", myFQDN, props, callbackHandler);
&lt;/pre&gt;&lt;/blockquote&gt;
It can then proceed to use the server for authentication.
For example, suppose the LDAP server received an LDAP BIND request
containing the name of the SASL mechanism and an (optional) initial
response. It then might use the server as follows:
&lt;blockquote&gt;&lt;pre&gt;
while (!ss.isComplete()) {
try {
byte[] challenge = ss.evaluateResponse(response);
if (ss.isComplete()) {
status = ldap.sendBindResponse(mechanism, challenge, SUCCESS);
} else {
status = ldap.sendBindResponse(mechanism, challenge,
SASL_BIND_IN_PROGRESS);
response = ldap.readBindRequest();
}
} catch (SaslException e) {
status = ldap.sendErrorResponse(e);
break;
}
}
if (ss.isComplete() &amp;&amp; status == SUCCESS) {
String qop = (String) sc.getNegotiatedProperty(Sasl.QOP);
if (qop != null
&amp;&amp; (qop.equalsIgnoreCase("auth-int")
|| qop.equalsIgnoreCase("auth-conf"))) {

Use SaslServer.wrap() and SaslServer.unwrap() for future
communication with client
ldap.in = new SecureInputStream(ss, ldap.in);
ldap.out = new SecureOutputStream(ss, ldap.out);
}
}
&lt;/pre&gt;&lt;/blockquote&gt;

@since 1.5

@see Sasl
@see SaslServerFactory

@author Rosanna Lee
@author Rob Weltman
</body><documentation humanName="Documentation"/><owner classType="Interface" humanName="Owner" humanType="Interface" icon="index_files/icon_interface_118881143.jpg" mode="s,e" name="SaslServer" refid="_10_5_622020d_1132928316131_289667_10529"/><owningElement classType="Interface" humanName="Owning Element" humanType="Interface" icon="index_files/icon_interface_118881143.jpg" name="SaslServer" refid="_10_5_622020d_1132928316131_289667_10529"/><TO_DO humanName="To Do" mode="s,e"/></comment></magicdraw>