<?xml version="1.0" encoding="UTF-8"?><magicdraw><class classType="Class" humanType="Class" icon="index_files/icon_class_1555793073.jpg" id="_10_5_622020d_1132928310032_138822_6394"><clientDependency humanName="Client Dependency"><interfacerealization classType="InterfaceRealization" humanType="Interface Realization" icon="index_files/icon_interfacerealization_425275537.jpg" isRelationship="true" name="Interface Realization[JDK 5.0 Classes::java::util::concurrent::locks::ReentrantLock -&gt; JDK 5.0 Classes::java::io::Serializable]" refid="_10_5_622020d_1132928321969_222315_14336"/><interfacerealization classType="InterfaceRealization" humanType="Interface Realization" icon="index_files/icon_interfacerealization_425275537.jpg" isRelationship="true" name="Interface Realization[JDK 5.0 Classes::java::util::concurrent::locks::ReentrantLock -&gt; JDK 5.0 Classes::java::util::concurrent::locks::Lock]" refid="_10_5_622020d_1132928321969_259783_14335"/></clientDependency><documentation humanName="Documentation" mode="standard">A reentrant mutual exclusion {@link Lock} with the same basic
behavior and semantics as the implicit monitor lock accessed using
&lt;tt&gt;synchronized&lt;/tt&gt; methods and statements, but with extended
capabilities.

&lt;p&gt; A &lt;tt&gt;ReentrantLock&lt;/tt&gt; is &lt;em&gt;owned&lt;/em&gt; by the thread last
successfully locking, but not yet unlocking it. A thread invoking
&lt;tt&gt;lock&lt;/tt&gt; will return, successfully acquiring the lock, when
the lock is not owned by another thread. The method will return
immediately if the current thread already owns the lock. This can
be checked using methods {@link #isHeldByCurrentThread}, and {@link
#getHoldCount}.

&lt;p&gt; The constructor for this class accepts an optional
&lt;em&gt;fairness&lt;/em&gt; parameter.  When set &lt;tt&gt;true&lt;/tt&gt;, under
contention, locks favor granting access to the longest-waiting
thread.  Otherwise this lock does not guarantee any particular
access order.  Programs using fair locks accessed by many threads
may display lower overall throughput (i.e., are slower; often much
slower) than those using the default setting, but have smaller
variances in times to obtain locks and guarantee lack of
starvation. Note however, that fairness of locks does not guarantee
fairness of thread scheduling. Thus, one of many threads using a
fair lock may obtain it multiple times in succession while other
active threads are not progressing and not currently holding the
lock.
Also note that the untimed {@link #tryLock() tryLock} method does not
honor the fairness setting. It will succeed if the lock
is available even if other threads are waiting.

&lt;p&gt; It is recommended practice to &lt;em&gt;always&lt;/em&gt; immediately
follow a call to &lt;tt&gt;lock&lt;/tt&gt; with a &lt;tt&gt;try&lt;/tt&gt; block, most
typically in a before/after construction such as:

&lt;pre&gt;
class X {
private final ReentrantLock lock = new ReentrantLock();
...

public void m() {
lock.lock();  // block until condition holds
try {
... method body
} finally {
lock.unlock()
}
}
}
&lt;/pre&gt;

&lt;p&gt;In addition to implementing the {@link Lock} interface, this
class defines methods &lt;tt&gt;isLocked&lt;/tt&gt; and
&lt;tt&gt;getLockQueueLength&lt;/tt&gt;, as well as some associated
&lt;tt&gt;protected&lt;/tt&gt; access methods that may be useful for
instrumentation and monitoring.

&lt;p&gt; Serialization of this class behaves in the same way as built-in
locks: a deserialized lock is in the unlocked state, regardless of
its state when serialized.

&lt;p&gt; This lock supports a maximum of 2147483648 recursive locks by
the same thread.

@since 1.5
@author Doug Lea

</documentation><interfaceRealization humanName="Interface Realization"><interfacerealization classType="InterfaceRealization" humanType="Interface Realization" icon="index_files/icon_interfacerealization_425275537.jpg" isRelationship="true" name="Interface Realization[JDK 5.0 Classes::java::util::concurrent::locks::ReentrantLock -&gt; JDK 5.0 Classes::java::io::Serializable]" refid="_10_5_622020d_1132928321969_222315_14336"/><interfacerealization classType="InterfaceRealization" humanType="Interface Realization" icon="index_files/icon_interfacerealization_425275537.jpg" isRelationship="true" name="Interface Realization[JDK 5.0 Classes::java::util::concurrent::locks::ReentrantLock -&gt; JDK 5.0 Classes::java::util::concurrent::locks::Lock]" refid="_10_5_622020d_1132928321969_259783_14335"/></interfaceRealization><isAbstract humanName="Is Abstract" mode="s,e">false</isAbstract><isActive humanName="Is Active" mode="s,e">false</isActive><isFinalSpecialization humanName="Is Final Specialization" mode="e">false</isFinalSpecialization><isLeaf humanName="Is Leaf" mode="e">false</isLeaf><member humanName="Member"><class classType="Class" humanType="Class" icon="index_files/icon_class_1555793073.jpg" name="FairSync" refid="_10_5_622020d_1132928310032_507872_6399"/><class classType="Class" humanType="Class" icon="index_files/icon_class_1555793073.jpg" name="NonfairSync" refid="_10_5_622020d_1132928310032_127051_6397"/><class classType="Class" humanType="Class" icon="index_files/icon_class_303957224.jpg" name="Sync" refid="_10_5_622020d_1132928310032_319262_6395"/></member><name humanName="Name" mode="s,e">ReentrantLock</name><namespace classType="Package" humanName="Namespace" humanType="Package" icon="index_files/icon_package_2000410491.jpg" name="locks" refid="_10_5_622020d_1132928309932_22311_6374"/><nestedClassifier humanName="Nested Classifier"><class classType="Class" humanType="Class" icon="index_files/icon_class_1555793073.jpg" name="FairSync" refid="_10_5_622020d_1132928310032_507872_6399"/><class classType="Class" humanType="Class" icon="index_files/icon_class_1555793073.jpg" name="NonfairSync" refid="_10_5_622020d_1132928310032_127051_6397"/><class classType="Class" humanType="Class" icon="index_files/icon_class_303957224.jpg" name="Sync" refid="_10_5_622020d_1132928310032_319262_6395"/></nestedClassifier><ownedComment humanName="Owned Comment"><comment classType="Comment" humanType="Comment" icon="index_files/icon_comment_2051026490.jpg" refid="_10_5_622020d_1132928310032_373774_6402"/></ownedComment><ownedElement humanName="Owned Element"><comment classType="Comment" humanType="Comment" icon="index_files/icon_comment_2051026490.jpg" refid="_10_5_622020d_1132928310032_373774_6402"/><class classType="Class" humanType="Class" icon="index_files/icon_class_1555793073.jpg" name="FairSync" refid="_10_5_622020d_1132928310032_507872_6399"/><interfacerealization classType="InterfaceRealization" humanType="Interface Realization" icon="index_files/icon_interfacerealization_425275537.jpg" isRelationship="true" name="Interface Realization[JDK 5.0 Classes::java::util::concurrent::locks::ReentrantLock -&gt; JDK 5.0 Classes::java::io::Serializable]" refid="_10_5_622020d_1132928321969_222315_14336"/><interfacerealization classType="InterfaceRealization" humanType="Interface Realization" icon="index_files/icon_interfacerealization_425275537.jpg" isRelationship="true" name="Interface Realization[JDK 5.0 Classes::java::util::concurrent::locks::ReentrantLock -&gt; JDK 5.0 Classes::java::util::concurrent::locks::Lock]" refid="_10_5_622020d_1132928321969_259783_14335"/><class classType="Class" humanType="Class" icon="index_files/icon_class_1555793073.jpg" name="NonfairSync" refid="_10_5_622020d_1132928310032_127051_6397"/><class classType="Class" humanType="Class" icon="index_files/icon_class_303957224.jpg" name="Sync" refid="_10_5_622020d_1132928310032_319262_6395"/></ownedElement><ownedMember humanName="Owned Member"><class classType="Class" humanType="Class" icon="index_files/icon_class_1555793073.jpg" name="FairSync" refid="_10_5_622020d_1132928310032_507872_6399"/><class classType="Class" humanType="Class" icon="index_files/icon_class_1555793073.jpg" name="NonfairSync" refid="_10_5_622020d_1132928310032_127051_6397"/><class classType="Class" humanType="Class" icon="index_files/icon_class_303957224.jpg" name="Sync" refid="_10_5_622020d_1132928310032_319262_6395"/></ownedMember><owner classType="Package" humanName="Owner" humanType="Package" icon="index_files/icon_package_2000410491.jpg" mode="s,e" name="locks" refid="_10_5_622020d_1132928309932_22311_6374"/><owningPackage classType="Package" humanName="Owning Package" humanType="Package" icon="index_files/icon_package_2000410491.jpg" name="locks" refid="_10_5_622020d_1132928309932_22311_6374"/><package classType="Package" humanName="Package" humanType="Package" icon="index_files/icon_package_2000410491.jpg" name="locks" refid="_10_5_622020d_1132928309932_22311_6374"/><qualifiedName humanName="Qualified Name" mode="e">JDK 5.0 Classes::java::util::concurrent::locks::ReentrantLock</qualifiedName><realizedInterfaces humanName="Realized Interface" mode="s,e"><interface classType="Interface" humanType="Interface" icon="index_files/icon_interface_118881143.jpg" name="Lock" refid="_10_5_622020d_1132928309982_21371_6385"/><interface classType="Interface" humanType="Interface" icon="index_files/icon_interface_118881143.jpg" name="Serializable" refid="_9_5_f720368_1110473546612_364919_7481"/></realizedInterfaces><TO_DO humanName="To Do" mode="s,e"/><visibility humanName="Visibility" mode="e">public</visibility></class></magicdraw>