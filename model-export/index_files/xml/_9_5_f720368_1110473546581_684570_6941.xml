<?xml version="1.0" encoding="UTF-8"?><magicdraw><class classType="Class" humanType="Class" icon="index_files/icon_class_555864569.jpg" id="_9_5_f720368_1110473546581_684570_6941" refElementId="_9_5_f720368_1110473546581_684570_6941"><clientDependency humanName="Client Dependency"><interfacerealization classType="InterfaceRealization" humanType="Interface Realization" icon="index_files/icon_interfacerealization_1152342155.jpg" isRelationship="true" name="Interface Realization[JDK 5.0 Classes::java::awt::BasicStroke -&gt; JDK 5.0 Classes::java::awt::Stroke]" refElementId="_10_5_622020d_1132928321308_922243_13154" refid="_10_5_622020d_1132928321308_922243_13154"/></clientDependency><documentation humanName="Documentation" mode="s">The &lt;code&gt;BasicStroke&lt;/code&gt; class defines a basic set of rendering
attributes for the outlines of graphics primitives, which are rendered
with a {@link Graphics2D} object that has its Stroke attribute set to
this &lt;code&gt;BasicStroke&lt;/code&gt;.
The rendering attributes defined by &lt;code&gt;BasicStroke&lt;/code&gt; describe
the shape of the mark made by a pen drawn along the outline of a
{@link Shape} and the decorations applied at the ends and joins of
path segments of the &lt;code&gt;Shape&lt;/code&gt;.
These rendering attributes include:
&lt;dl compact&gt;
&lt;dt&gt;&lt;i&gt;width&lt;/i&gt;
&lt;dd&gt;The pen width, measured perpendicularly to the pen trajectory.
&lt;dt&gt;&lt;i&gt;end caps&lt;/i&gt;
&lt;dd&gt;The decoration applied to the ends of unclosed subpaths and
dash segments.  Subpaths that start and end on the same point are
still considered unclosed if they do not have a CLOSE segment.
See {@link java.awt.geom.PathIterator#SEG_CLOSE SEG_CLOSE}
for more information on the CLOSE segment.
The three different decorations are: {@link #CAP_BUTT},
{@link #CAP_ROUND}, and {@link #CAP_SQUARE}.
&lt;dt&gt;&lt;i&gt;line joins&lt;/i&gt;
&lt;dd&gt;The decoration applied at the intersection of two path segments
and at the intersection of the endpoints of a subpath that is closed
using {@link java.awt.geom.PathIterator#SEG_CLOSE SEG_CLOSE}.
The three different decorations are: {@link #JOIN_BEVEL},
{@link #JOIN_MITER}, and {@link #JOIN_ROUND}.
&lt;dt&gt;&lt;i&gt;miter limit&lt;/i&gt;
&lt;dd&gt;The limit to trim a line join that has a JOIN_MITER decoration.
A line join is trimmed when the ratio of miter length to stroke
width is greater than the miterlimit value.  The miter length is
the diagonal length of the miter, which is the distance between
the inside corner and the outside corner of the intersection.
The smaller the angle formed by two line segments, the longer
the miter length and the sharper the angle of intersection.  The
default miterlimit value of 10.0f causes all angles less than
11 degrees to be trimmed.  Trimming miters converts
the decoration of the line join to bevel.
&lt;dt&gt;&lt;i&gt;dash attributes&lt;/i&gt;
&lt;dd&gt;The definition of how to make a dash pattern by alternating
between opaque and transparent sections.
&lt;/dl&gt;
All attributes that specify measurements and distances controlling
the shape of the returned outline are measured in the same
coordinate system as the original unstroked &lt;code&gt;Shape&lt;/code&gt;
argument.  When a &lt;code&gt;Graphics2D&lt;/code&gt; object uses a
&lt;code&gt;Stroke&lt;/code&gt; object to redefine a path during the execution
of one of its &lt;code&gt;draw&lt;/code&gt; methods, the geometry is supplied
in its original form before the &lt;code&gt;Graphics2D&lt;/code&gt; transform
attribute is applied.  Therefore, attributes such as the pen width
are interpreted in the user space coordinate system of the
&lt;code&gt;Graphics2D&lt;/code&gt; object and are subject to the scaling and
shearing effects of the user-space-to-device-space transform in that
particular &lt;code&gt;Graphics2D&lt;/code&gt;.
For example, the width of a rendered shape's outline is determined
not only by the width attribute of this &lt;code&gt;BasicStroke&lt;/code&gt;,
but also by the transform attribute of the
&lt;code&gt;Graphics2D&lt;/code&gt; object.  Consider this code:
&lt;blockquote&gt;&lt;tt&gt;
sets the Graphics2D object's Tranform attribute
g2d.scale(10, 10);
sets the Graphics2D object's Stroke attribute
g2d.setStroke(new BasicStroke(1.5f));
&lt;/tt&gt;&lt;/blockquote&gt;
Assuming there are no other scaling transforms added to the
&lt;code&gt;Graphics2D&lt;/code&gt; object, the resulting line
will be approximately 15 pixels wide.
As the example code demonstrates, a floating-point line
offers better precision, especially when large transforms are
used with a &lt;code&gt;Graphics2D&lt;/code&gt; object.
When a line is diagonal, the exact width depends on how the
rendering pipeline chooses which pixels to fill as it traces the
theoretical widened outline.  The choice of which pixels to turn
on is affected by the antialiasing attribute because the
antialiasing rendering pipeline can choose to color
partially-covered pixels.
&lt;p&gt;
For more information on the user space coordinate system and the
rendering process, see the &lt;code&gt;Graphics2D&lt;/code&gt; class comments.
@see Graphics2D
@version 1.40, 12/19/03
@author Jim Graham
</documentation><interfaceRealization humanName="Interface Realization"><interfacerealization classType="InterfaceRealization" humanType="Interface Realization" icon="index_files/icon_interfacerealization_1152342155.jpg" isRelationship="true" name="Interface Realization[JDK 5.0 Classes::java::awt::BasicStroke -&gt; JDK 5.0 Classes::java::awt::Stroke]" refElementId="_10_5_622020d_1132928321308_922243_13154" refid="_10_5_622020d_1132928321308_922243_13154"/></interfaceRealization><isAbstract humanName="Is Abstract" mode="s,e">false</isAbstract><isActive humanName="Is Active" mode="s,e">false</isActive><isFinalSpecialization humanName="Is Final Specialization" mode="e">false</isFinalSpecialization><isLeaf humanName="Is Leaf" mode="e">false</isLeaf><member humanName="Member"><class classType="Class" humanType="Class" icon="index_files/icon_class_555864569.jpg" name="FillAdapter" refElementId="_9_5_f720368_1110473547378_192877_16904" refid="_9_5_f720368_1110473547378_192877_16904"/></member><name humanName="Name" mode="s,e">BasicStroke</name><namespace classType="Package" humanName="Namespace" humanType="Package" icon="index_files/icon_package_1518868172.jpg" name="awt" refElementId="_9_5_f720368_1110473547268_701783_16331" refid="_9_5_f720368_1110473547268_701783_16331"/><nestedClassifier humanName="Nested Classifier"><class classType="Class" humanType="Class" icon="index_files/icon_class_555864569.jpg" name="FillAdapter" refElementId="_9_5_f720368_1110473547378_192877_16904" refid="_9_5_f720368_1110473547378_192877_16904"/></nestedClassifier><ownedComment humanName="Owned Comment"><comment classType="Comment" humanType="Comment" icon="index_files/icon_comment_841774062.jpg" name="The &lt;code&gt;BasicStroke&lt;/code&gt; class defines a basic..." refElementId="_10_5_622020d_1132928306326_403012_4113" refid="_10_5_622020d_1132928306326_403012_4113"/></ownedComment><ownedElement humanName="Owned Element"><comment classType="Comment" humanType="Comment" icon="index_files/icon_comment_841774062.jpg" name="The &lt;code&gt;BasicStroke&lt;/code&gt; class defines a basic..." refElementId="_10_5_622020d_1132928306326_403012_4113" refid="_10_5_622020d_1132928306326_403012_4113"/><class classType="Class" humanType="Class" icon="index_files/icon_class_555864569.jpg" name="FillAdapter" refElementId="_9_5_f720368_1110473547378_192877_16904" refid="_9_5_f720368_1110473547378_192877_16904"/><interfacerealization classType="InterfaceRealization" humanType="Interface Realization" icon="index_files/icon_interfacerealization_1152342155.jpg" isRelationship="true" name="Interface Realization[JDK 5.0 Classes::java::awt::BasicStroke -&gt; JDK 5.0 Classes::java::awt::Stroke]" refElementId="_10_5_622020d_1132928321308_922243_13154" refid="_10_5_622020d_1132928321308_922243_13154"/></ownedElement><ownedMember humanName="Owned Member"><class classType="Class" humanType="Class" icon="index_files/icon_class_555864569.jpg" name="FillAdapter" refElementId="_9_5_f720368_1110473547378_192877_16904" refid="_9_5_f720368_1110473547378_192877_16904"/></ownedMember><owner classType="Package" humanName="Owner" humanType="Package" icon="index_files/icon_package_1518868172.jpg" mode="s,e" name="awt" refElementId="_9_5_f720368_1110473547268_701783_16331" refid="_9_5_f720368_1110473547268_701783_16331"/><owningPackage classType="Package" humanName="Owning Package" humanType="Package" icon="index_files/icon_package_1518868172.jpg" name="awt" refElementId="_9_5_f720368_1110473547268_701783_16331" refid="_9_5_f720368_1110473547268_701783_16331"/><package classType="Package" humanName="Package" humanType="Package" icon="index_files/icon_package_1518868172.jpg" name="awt" refElementId="_9_5_f720368_1110473547268_701783_16331" refid="_9_5_f720368_1110473547268_701783_16331"/><qualifiedName humanName="Qualified Name" mode="e">JDK 5.0 Classes::java::awt::BasicStroke</qualifiedName><realizedInterfaces humanName="Realized Interface" mode="s,e"><interface classType="Interface" humanType="Interface" icon="index_files/icon_interface_1046467249.jpg" name="Stroke" refElementId="_9_5_f720368_1110473546596_603780_7127" refid="_9_5_f720368_1110473546596_603780_7127"/></realizedInterfaces><TO_DO humanName="To Do" mode="s,e"/><visibility humanName="Visibility" mode="e">public</visibility></class></magicdraw>