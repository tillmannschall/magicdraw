<?xml version="1.0" encoding="UTF-8"?><magicdraw><comment classType="Comment" humanType="Comment" icon="index_files/icon_comment_841774062.jpg" id="_10_5_622020d_1132928318224_104946_12649" refElementId="_10_5_622020d_1132928318224_104946_12649"><annotatedElement humanName="Annotated Element" mode="s,e"><class classType="Class" humanType="Class" icon="index_files/icon_class_555864569.jpg" name="SpinnerNumberModel" refElementId="_9_5_f720368_1110473546799_233196_10863" refid="_9_5_f720368_1110473546799_233196_10863"/></annotatedElement><body humanName="Body" mode="s,e">A &lt;code&gt;SpinnerModel&lt;/code&gt; for sequences of numbers.
The upper and lower bounds of the sequence are defined
by properties called &lt;code&gt;minimum&lt;/code&gt; and
&lt;code&gt;maximum&lt;/code&gt;. The size of the increase or decrease
computed by the &lt;code&gt;nextValue&lt;/code&gt; and
&lt;code&gt;previousValue&lt;/code&gt; methods is defined by a property called
&lt;code&gt;stepSize&lt;/code&gt;.  The &lt;code&gt;minimum&lt;/code&gt; and
&lt;code&gt;maximum&lt;/code&gt; properties can be &lt;code&gt;null&lt;/code&gt;
to indicate that the sequence has no lower or upper limit.
All of the properties in this class are defined in terms of two
generic types: &lt;code&gt;Number&lt;/code&gt; and
&lt;code&gt;Comparable&lt;/code&gt;, so that all Java numeric types
may be accommodated.  Internally, there's only support for
values whose type is one of the primitive &lt;code&gt;Number&lt;/code&gt; types:
&lt;code&gt;Double&lt;/code&gt;, &lt;code&gt;Float&lt;/code&gt;, &lt;code&gt;Long&lt;/code&gt;,
&lt;code&gt;Integer&lt;/code&gt;, &lt;code&gt;Short&lt;/code&gt;, or &lt;code&gt;Byte&lt;/code&gt;.
&lt;p&gt;
To create a &lt;code&gt;SpinnerNumberModel&lt;/code&gt; for the integer
range zero to one hundred, with
fifty as the initial value, one could write:
&lt;pre&gt;
Integer value = new Integer(50);
Integer min = new Integer(0);
Integer max = new Integer(100);
Integer step = new Integer(1);
SpinnerNumberModel model = new SpinnerNumberModel(value, min, max, step);
int fifty = model.getNumber().intValue();
&lt;/pre&gt;
&lt;p&gt;
Spinners for integers and doubles are common, so special constructors
for these cases are provided.  For example to create the model in
the previous example, one could also write:
&lt;pre&gt;
SpinnerNumberModel model = new SpinnerNumberModel(50, 0, 100, 1);
&lt;/pre&gt;
&lt;p&gt;
This model inherits a &lt;code&gt;ChangeListener&lt;/code&gt;.
The &lt;code&gt;ChangeListeners&lt;/code&gt; are notified
whenever the model's &lt;code&gt;value&lt;/code&gt;, &lt;code&gt;stepSize&lt;/code&gt;,
&lt;code&gt;minimum&lt;/code&gt;, or &lt;code&gt;maximum&lt;/code&gt; properties changes.

@see JSpinner
@see SpinnerModel
@see AbstractSpinnerModel
@see SpinnerListModel
@see SpinnerDateModel

@version 1.12 05/12/04
@author Hans Muller
@since 1.4
</body><documentation humanName="Documentation"/><owner classType="Class" humanName="Owner" humanType="Class" icon="index_files/icon_class_555864569.jpg" mode="s,e" name="SpinnerNumberModel" refElementId="_9_5_f720368_1110473546799_233196_10863" refid="_9_5_f720368_1110473546799_233196_10863"/><owningElement classType="Class" humanName="Owning Element" humanType="Class" icon="index_files/icon_class_555864569.jpg" name="SpinnerNumberModel" refElementId="_9_5_f720368_1110473546799_233196_10863" refid="_9_5_f720368_1110473546799_233196_10863"/><TO_DO humanName="To Do" mode="s,e"/></comment></magicdraw>