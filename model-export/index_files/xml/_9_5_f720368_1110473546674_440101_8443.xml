<?xml version="1.0" encoding="UTF-8"?><magicdraw><interface classType="Interface" humanType="Interface" icon="index_files/icon_interface_1046467249.jpg" id="_9_5_f720368_1110473546674_440101_8443" refElementId="_9_5_f720368_1110473546674_440101_8443"><documentation humanName="Documentation" mode="s">A &lt;code&gt;DomainCombiner&lt;/code&gt; provides a means to dynamically
update the ProtectionDomains associated with the current
&lt;code&gt;AccessControlContext&lt;/code&gt;.

&lt;p&gt; A &lt;code&gt;DomainCombiner&lt;/code&gt; is passed as a parameter to the
appropriate constructor for &lt;code&gt;AccessControlContext&lt;/code&gt;.
The newly constructed context is then passed to the
&lt;code&gt;AccessController.doPrivileged(..., context)&lt;/code&gt; method
to bind the provided context (and associated &lt;code&gt;DomainCombiner&lt;/code&gt;)
with the current execution Thread.  Subsequent calls to
&lt;code&gt;AccessController.getContext&lt;/code&gt; or
&lt;code&gt;AccessController.checkPermission&lt;/code&gt;
cause the &lt;code&gt;DomainCombiner.combine&lt;/code&gt; to get invoked.

&lt;p&gt; The combine method takes two arguments.  The first argument represents
an array of ProtectionDomains from the current execution Thread,
since the most recent call to &lt;code&gt;AccessController.doPrivileged&lt;/code&gt;.
If no call to doPrivileged was made, then the first argument will contain
all the ProtectionDomains from the current execution Thread.
The second argument represents an array of inherited ProtectionDomains,
which may be &lt;code&gt;null&lt;/code&gt;.  ProtectionDomains may be inherited
from a parent Thread, or from a privileged context.  If no call to
doPrivileged was made, then the second argument will contain the
ProtectionDomains inherited from the parent Thread.  If one or more calls
to doPrivileged were made, and the most recent call was to
doPrivileged(action, context), then the second argument will contain the
ProtectionDomains from the privileged context.  If the most recent call
was to doPrivileged(action), then there is no privileged context,
and the second argument will be &lt;code&gt;null&lt;/code&gt;.

&lt;p&gt; The &lt;code&gt;combine&lt;/code&gt; method investigates the two input arrays
of ProtectionDomains and returns a single array containing the updated
ProtectionDomains.  In the simplest case, the &lt;code&gt;combine&lt;/code&gt;
method merges the two stacks into one.  In more complex cases,
the &lt;code&gt;combine&lt;/code&gt; method returns a modified
stack of ProtectionDomains.  The modification may have added new
ProtectionDomains, removed certain ProtectionDomains, or simply
updated existing ProtectionDomains.  Re-ordering and other optimizations
to the ProtectionDomains are also permitted.  Typically the
&lt;code&gt;combine&lt;/code&gt; method bases its updates on the information
encapsulated in the &lt;code&gt;DomainCombiner&lt;/code&gt;.

&lt;p&gt; After the &lt;code&gt;AccessController.getContext&lt;/code&gt; method
receives the combined stack of ProtectionDomains back from
the &lt;code&gt;DomainCombiner&lt;/code&gt;, it returns a new
AccessControlContext that has both the combined ProtectionDomains
as well as the &lt;code&gt;DomainCombiner&lt;/code&gt;.

@see AccessController
@see AccessControlContext
@version 1.7, 12/19/03
</documentation><isAbstract humanName="Is Abstract">true</isAbstract><isFinalSpecialization humanName="Is Final Specialization" mode="e">false</isFinalSpecialization><isLeaf humanName="Is Leaf" mode="e">false</isLeaf><name humanName="Name" mode="s,e">DomainCombiner</name><namespace classType="Package" humanName="Namespace" humanType="Package" icon="index_files/icon_package_1518868172.jpg" name="security" refElementId="_9_5_f720368_1110473547706_6534_18577" refid="_9_5_f720368_1110473547706_6534_18577"/><ownedComment humanName="Owned Comment"><comment classType="Comment" humanType="Comment" icon="index_files/icon_comment_841774062.jpg" name="A &lt;code&gt;DomainCombiner&lt;/code&gt; provides a means to ..." refElementId="_10_5_622020d_1132928309311_556989_5995" refid="_10_5_622020d_1132928309311_556989_5995"/></ownedComment><ownedElement humanName="Owned Element"><comment classType="Comment" humanType="Comment" icon="index_files/icon_comment_841774062.jpg" name="A &lt;code&gt;DomainCombiner&lt;/code&gt; provides a means to ..." refElementId="_10_5_622020d_1132928309311_556989_5995" refid="_10_5_622020d_1132928309311_556989_5995"/></ownedElement><owner classType="Package" humanName="Owner" humanType="Package" icon="index_files/icon_package_1518868172.jpg" mode="s,e" name="security" refElementId="_9_5_f720368_1110473547706_6534_18577" refid="_9_5_f720368_1110473547706_6534_18577"/><owningPackage classType="Package" humanName="Owning Package" humanType="Package" icon="index_files/icon_package_1518868172.jpg" name="security" refElementId="_9_5_f720368_1110473547706_6534_18577" refid="_9_5_f720368_1110473547706_6534_18577"/><package classType="Package" humanName="Package" humanType="Package" icon="index_files/icon_package_1518868172.jpg" name="security" refElementId="_9_5_f720368_1110473547706_6534_18577" refid="_9_5_f720368_1110473547706_6534_18577"/><qualifiedName humanName="Qualified Name" mode="e">JDK 5.0 Classes::java::security::DomainCombiner</qualifiedName><supplierDependency humanName="Supplier Dependency"><interfacerealization classType="InterfaceRealization" humanType="Interface Realization" icon="index_files/icon_interfacerealization_1152342155.jpg" isRelationship="true" name="Interface Realization[JDK 5.0 Classes::javax::security::auth::SubjectDomainCombiner -&gt; JDK 5.0 Classes::java::security::DomainCombiner]" refElementId="_10_5_622020d_1132928323351_16361_16574" refid="_10_5_622020d_1132928323351_16361_16574"/></supplierDependency><TO_DO humanName="To Do" mode="s,e"/><visibility humanName="Visibility">public</visibility></interface></magicdraw>