<?xml version="1.0" encoding="UTF-8"?><magicdraw><comment classType="Comment" humanType="Comment" icon="index_files/icon_comment_841774062.jpg" id="_10_5_622020d_1132928306026_53028_3928" refElementId="_10_5_622020d_1132928306026_53028_3928"><annotatedElement humanName="Annotated Element" mode="s,e"><class classType="Class" humanType="Class" icon="index_files/icon_class_795627831.jpg" name="ColorModel" refElementId="_9_5_f720368_1110473546565_334923_6763" refid="_9_5_f720368_1110473546565_334923_6763"/></annotatedElement><body humanName="Body" mode="s,e">The &lt;code&gt;ColorModel&lt;/code&gt; abstract class encapsulates the
methods for translating a pixel value to color components
(for example, red, green, and blue) and an alpha component.
In order to render an image to the screen, a printer, or another
image, pixel values must be converted to color and alpha components.
As arguments to or return values from methods of this class,
pixels are represented as 32-bit ints or as arrays of primitive types.
The number, order, and interpretation of color components for a
&lt;code&gt;ColorModel&lt;/code&gt; is specified by its &lt;code&gt;ColorSpace&lt;/code&gt;.
A &lt;code&gt;ColorModel&lt;/code&gt; used with pixel data that does not include
alpha information treats all pixels as opaque, which is an alpha
value of 1.0.
&lt;p&gt;
This &lt;code&gt;ColorModel&lt;/code&gt; class supports two representations of
pixel values.  A pixel value can be a single 32-bit int or an
array of primitive types.  The Java(tm) Platform 1.0 and 1.1 APIs
represented pixels as single &lt;code&gt;byte&lt;/code&gt; or single
&lt;code&gt;int&lt;/code&gt; values.  For purposes of the &lt;code&gt;ColorModel&lt;/code&gt;
class, pixel value arguments were passed as ints.  The Java(tm) 2
Platform API introduced additional classes for representing images.
With {@link BufferedImage} or {@link RenderedImage}
objects, based on {@link Raster} and {@link SampleModel} classes, pixel
values might not be conveniently representable as a single int.
Consequently, &lt;code&gt;ColorModel&lt;/code&gt; now has methods that accept
pixel values represented as arrays of primitive types.  The primitive
type used by a particular &lt;code&gt;ColorModel&lt;/code&gt; object is called its
transfer type.
&lt;p&gt;
&lt;code&gt;ColorModel&lt;/code&gt; objects used with images for which pixel values
are not conveniently representable as a single int throw an
{@link IllegalArgumentException} when methods taking a single int pixel
argument are called.  Subclasses of &lt;code&gt;ColorModel&lt;/code&gt; must
specify the conditions under which this occurs.  This does not
occur with {@link DirectColorModel} or {@link IndexColorModel} objects.
&lt;p&gt;
Currently, the transfer types supported by the Java 2D(tm) API are
DataBuffer.TYPE_BYTE, DataBuffer.TYPE_USHORT, DataBuffer.TYPE_INT,
DataBuffer.TYPE_SHORT, DataBuffer.TYPE_FLOAT, and DataBuffer.TYPE_DOUBLE.
Most rendering operations will perform much faster when using ColorModels
and images based on the first three of these types.  In addition, some
image filtering operations are not supported for ColorModels and
images based on the latter three types.
The transfer type for a particular &lt;code&gt;ColorModel&lt;/code&gt; object is
specified when the object is created, either explicitly or by default.
All subclasses of &lt;code&gt;ColorModel&lt;/code&gt; must specify what the
possible transfer types are and how the number of elements in the
primitive arrays representing pixels is determined.
&lt;p&gt;
For &lt;code&gt;BufferedImages&lt;/code&gt;, the transfer type of its
&lt;code&gt;Raster&lt;/code&gt; and of the &lt;code&gt;Raster&lt;/code&gt; object's
&lt;code&gt;SampleModel&lt;/code&gt; (available from the
&lt;code&gt;getTransferType&lt;/code&gt; methods of these classes) must match that
of the &lt;code&gt;ColorModel&lt;/code&gt;.  The number of elements in an array
representing a pixel for the &lt;code&gt;Raster&lt;/code&gt; and
&lt;code&gt;SampleModel&lt;/code&gt; (available from the
&lt;code&gt;getNumDataElements&lt;/code&gt; methods of these classes) must match
that of the &lt;code&gt;ColorModel&lt;/code&gt;.
&lt;p&gt;
The algorithm used to convert from pixel values to color and alpha
components varies by subclass.  For example, there is not necessarily
a one-to-one correspondence between samples obtained from the
&lt;code&gt;SampleModel&lt;/code&gt; of a &lt;code&gt;BufferedImage&lt;/code&gt; object's
&lt;code&gt;Raster&lt;/code&gt; and color/alpha components.  Even when
there is such a correspondence, the number of bits in a sample is not
necessarily the same as the number of bits in the corresponding color/alpha
component.  Each subclass must specify how the translation from
pixel values to color/alpha components is done.
&lt;p&gt;
Methods in the &lt;code&gt;ColorModel&lt;/code&gt; class use two different
representations of color and alpha components - a normalized form
and an unnormalized form.  In the normalized form, each component is a
&lt;code&gt;float&lt;/code&gt; value between some minimum and maximum values.  For
the alpha component, the minimum is 0.0 and the maximum is 1.0.  For
color components the minimum and maximum values for each component can
be obtained from the &lt;code&gt;ColorSpace&lt;/code&gt; object.  These values
will often be 0.0 and 1.0 (e.g. normalized component values for the
default sRGB color space range from 0.0 to 1.0), but some color spaces
have component values with different upper and lower limits.  These
limits can be obtained using the &lt;code&gt;getMinValue&lt;/code&gt; and
&lt;code&gt;getMaxValue&lt;/code&gt; methods of the &lt;code&gt;ColorSpace&lt;/code&gt;
class.  Normalized color component values are not premultiplied.
All &lt;code&gt;ColorModels&lt;/code&gt; must support the normalized form.
&lt;p&gt;
In the unnormalized
form, each component is an unsigned integral value between 0 and
2&lt;sup&gt;n&lt;/sup&gt; - 1, where n is the number of significant bits for a
particular component.  If pixel values for a particular
&lt;code&gt;ColorModel&lt;/code&gt; represent color samples premultiplied by
the alpha sample, unnormalized color component values are
also premultiplied.  The unnormalized form is used only with instances
of &lt;code&gt;ColorModel&lt;/code&gt; whose &lt;code&gt;ColorSpace&lt;/code&gt; has minimum
component values of 0.0 for all components and maximum values of
1.0 for all components.
The unnormalized form for color and alpha components can be a convenient
representation for &lt;code&gt;ColorModels&lt;/code&gt; whose normalized component
values all lie
between 0.0 and 1.0.  In such cases the integral value 0 maps to 0.0 and
the value 2&lt;sup&gt;n&lt;/sup&gt; - 1 maps to 1.0.  In other cases, such as
when the normalized component values can be either negative or positive,
the unnormalized form is not convenient.  Such &lt;code&gt;ColorModel&lt;/code&gt;
objects throw an {@link IllegalArgumentException} when methods involving
an unnormalized argument are called.  Subclasses of &lt;code&gt;ColorModel&lt;/code&gt;
must specify the conditions under which this occurs.

@see IndexColorModel
@see ComponentColorModel
@see PackedColorModel
@see DirectColorModel
@see java.awt.Image
@see BufferedImage
@see RenderedImage
@see java.awt.color.ColorSpace
@see SampleModel
@see Raster
@see DataBuffer
@version 10 Feb 1997
</body><documentation humanName="Documentation"/><owner classType="Class" humanName="Owner" humanType="Class" icon="index_files/icon_class_795627831.jpg" mode="s,e" name="ColorModel" refElementId="_9_5_f720368_1110473546565_334923_6763" refid="_9_5_f720368_1110473546565_334923_6763"/><owningElement classType="Class" humanName="Owning Element" humanType="Class" icon="index_files/icon_class_795627831.jpg" name="ColorModel" refElementId="_9_5_f720368_1110473546565_334923_6763" refid="_9_5_f720368_1110473546565_334923_6763"/><TO_DO humanName="To Do" mode="s,e"/></comment></magicdraw>