<?xml version="1.0" encoding="UTF-8"?><magicdraw><class classType="Class" humanType="Class" icon="index_files/icon_class_795627831.jpg" id="_9_5_f720368_1110473546581_258457_6841" refElementId="_9_5_f720368_1110473546581_258457_6841"><clientDependency humanName="Client Dependency"><interfacerealization classType="InterfaceRealization" humanType="Interface Realization" icon="index_files/icon_interfacerealization_1152342155.jpg" isRelationship="true" name="Interface Realization[JDK 5.0 Classes::java::awt::image::VolatileImage -&gt; JDK 5.0 Classes::java::awt::Transparency]" refElementId="_10_5_622020d_1132928321258_228070_13098" refid="_10_5_622020d_1132928321258_228070_13098"/></clientDependency><documentation humanName="Documentation" mode="s">VolatileImage is an image which can lose its
contents at any time due to circumstances beyond the control of the
application (e.g., situations caused by the operating system or by
other applications). Because of the potential for hardware acceleration,
a VolatileImage object can have significant performance benefits on
some platforms.
&lt;p&gt;
The drawing surface of an image (the memory where the image contents
actually reside) can be lost or invalidated, causing the contents of that
memory to go away.  The drawing surface thus needs to be restored
or recreated and the contents of that surface need to be
re-rendered.  VolatileImage provides an interface for
allowing the user to detect these problems and fix them
when they occur.
&lt;p&gt;
This image should not be subclassed directly but should be created
by using the {@link java.awt.Component#createVolatileImage(int, int)
Component.createVolatileImage} or
{@link java.awt.GraphicsConfiguration#createCompatibleVolatileImage(int, int)
GraphicsConfiguration.createCompatibleVolatileImage(int, int)} methods.
&lt;P&gt;
An example of using a VolatileImage object follows:
&lt;pre&gt;
image creation
VolatileImage vImg = createVolatileImage(w, h);


rendering to the image
void renderOffscreen() {
do {
if (vImg.validate(getGraphicsConfiguration()) ==
VolatileImage.IMAGE_INCOMPATIBLE)
{
old vImg doesn't work with new GraphicsConfig; re-create it
vImg = createVolatileImage(w, h);
}
Graphics2D g = vImg.createGraphics();

miscellaneous rendering commands...

g.dispose();
} while (vImg.contentsLost());
}


copying from the image (here, gScreen is the Graphics
object for the onscreen window)
do {
int returnCode = vImg.validate(getGraphicsConfiguration());
if (returnCode == VolatileImage.IMAGE_RESTORED) {
Contents need to be restored
renderOffscreen();	    // restore contents
} else if (returnCode == VolatileImage.IMAGE_INCOMPATIBLE) {
old vImg doesn't work with new GraphicsConfig; re-create it
vImg = createVolatileImage(w, h);
renderOffscreen();
}
gScreen.drawImage(vImg, 0, 0, this);
} while (vImg.contentsLost());
&lt;/pre&gt;
&lt;P&gt;
Note that this class subclasses from the {@link Image} class, which
includes methods that take an {@link ImageObserver} parameter for
asynchronous notifications as information is received from
a potential {@link ImageProducer}.  Since this &lt;code&gt;VolatileImage&lt;/code&gt;
is not loaded from an asynchronous source, the various methods that take
an &lt;code&gt;ImageObserver&lt;/code&gt; parameter will behave as if the data has
already been obtained from the &lt;code&gt;ImageProducer&lt;/code&gt;.
Specifically, this means that the return values from such methods
will never indicate that the information is not yet available and
the &lt;code&gt;ImageObserver&lt;/code&gt; used in such methods will never
need to be recorded for an asynchronous callback notification.
</documentation><generalization humanName="Generalization"><generalization classType="Generalization" humanType="Generalization" icon="index_files/icon_generalization_1454922150.jpg" isRelationship="true" name="Generalization[JDK 5.0 Classes::java::awt::image::VolatileImage -&gt; JDK 5.0 Classes::java::awt::Image]" refElementId="_10_5_622020d_1132928321268_34553_13099" refid="_10_5_622020d_1132928321268_34553_13099"/></generalization><interfaceRealization humanName="Interface Realization"><interfacerealization classType="InterfaceRealization" humanType="Interface Realization" icon="index_files/icon_interfacerealization_1152342155.jpg" isRelationship="true" name="Interface Realization[JDK 5.0 Classes::java::awt::image::VolatileImage -&gt; JDK 5.0 Classes::java::awt::Transparency]" refElementId="_10_5_622020d_1132928321258_228070_13098" refid="_10_5_622020d_1132928321258_228070_13098"/></interfaceRealization><isAbstract humanName="Is Abstract" mode="s,e">true</isAbstract><isActive humanName="Is Active" mode="s,e">false</isActive><isFinalSpecialization humanName="Is Final Specialization" mode="e">false</isFinalSpecialization><isLeaf humanName="Is Leaf" mode="e">false</isLeaf><name humanName="Name" mode="s,e">VolatileImage</name><namespace classType="Package" humanName="Namespace" humanType="Package" icon="index_files/icon_package_1518868172.jpg" name="image" refElementId="_9_5_f720368_1110473547331_114238_16707" refid="_9_5_f720368_1110473547331_114238_16707"/><ownedComment humanName="Owned Comment"><comment classType="Comment" humanType="Comment" icon="index_files/icon_comment_841774062.jpg" name="VolatileImage is an image which can lose its conte..." refElementId="_10_5_622020d_1132928306126_687576_4006" refid="_10_5_622020d_1132928306126_687576_4006"/></ownedComment><ownedElement humanName="Owned Element"><generalization classType="Generalization" humanType="Generalization" icon="index_files/icon_generalization_1454922150.jpg" isRelationship="true" name="Generalization[JDK 5.0 Classes::java::awt::image::VolatileImage -&gt; JDK 5.0 Classes::java::awt::Image]" refElementId="_10_5_622020d_1132928321268_34553_13099" refid="_10_5_622020d_1132928321268_34553_13099"/><comment classType="Comment" humanType="Comment" icon="index_files/icon_comment_841774062.jpg" name="VolatileImage is an image which can lose its conte..." refElementId="_10_5_622020d_1132928306126_687576_4006" refid="_10_5_622020d_1132928306126_687576_4006"/><interfacerealization classType="InterfaceRealization" humanType="Interface Realization" icon="index_files/icon_interfacerealization_1152342155.jpg" isRelationship="true" name="Interface Realization[JDK 5.0 Classes::java::awt::image::VolatileImage -&gt; JDK 5.0 Classes::java::awt::Transparency]" refElementId="_10_5_622020d_1132928321258_228070_13098" refid="_10_5_622020d_1132928321258_228070_13098"/></ownedElement><owner classType="Package" humanName="Owner" humanType="Package" icon="index_files/icon_package_1518868172.jpg" mode="s,e" name="image" refElementId="_9_5_f720368_1110473547331_114238_16707" refid="_9_5_f720368_1110473547331_114238_16707"/><owningPackage classType="Package" humanName="Owning Package" humanType="Package" icon="index_files/icon_package_1518868172.jpg" name="image" refElementId="_9_5_f720368_1110473547331_114238_16707" refid="_9_5_f720368_1110473547331_114238_16707"/><package classType="Package" humanName="Package" humanType="Package" icon="index_files/icon_package_1518868172.jpg" name="image" refElementId="_9_5_f720368_1110473547331_114238_16707" refid="_9_5_f720368_1110473547331_114238_16707"/><qualifiedName humanName="Qualified Name" mode="e">JDK 5.0 Classes::java::awt::image::VolatileImage</qualifiedName><realizedInterfaces humanName="Realized Interface" mode="s,e"><interface classType="Interface" humanType="Interface" icon="index_files/icon_interface_1046467249.jpg" name="Transparency" refElementId="_9_5_f720368_1110473546596_59806_7143" refid="_9_5_f720368_1110473546596_59806_7143"/></realizedInterfaces><superClass humanName="Super Class"><class classType="Class" humanType="Class" icon="index_files/icon_class_795627831.jpg" name="Image" refElementId="_9_5_f720368_1110473546581_642816_7047" refid="_9_5_f720368_1110473546581_642816_7047"/></superClass><TO_DO humanName="To Do" mode="s,e"/><visibility humanName="Visibility" mode="e">public</visibility></class></magicdraw>