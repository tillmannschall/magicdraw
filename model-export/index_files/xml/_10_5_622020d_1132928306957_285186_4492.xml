<?xml version="1.0" encoding="UTF-8"?><magicdraw><comment classType="Comment" humanType="Comment" icon="index_files/icon_comment_2051026490.jpg" id="_10_5_622020d_1132928306957_285186_4492"><annotatedElement humanName="Annotated Element" mode="s,e"><class classType="Class" humanType="Class" icon="index_files/icon_class_303957224.jpg" name="PersistenceDelegate" refid="_9_5_f720368_1110473546596_592582_7309"/></annotatedElement><body humanName="Body" mode="s,e">The PersistenceDelegate class takes the responsibility
for expressing the state of an instance of a given class
in terms of the methods in the class's public API. Instead
of associating the responsibility of persistence with
the class itself as is done, for example, by the
&lt;code&gt;readObject&lt;/code&gt; and &lt;code&gt;writeObject&lt;/code&gt;
methods used by the &lt;code&gt;ObjectOutputStream&lt;/code&gt;, streams like
the &lt;code&gt;XMLEncoder&lt;/code&gt; which
use this delegation model can have their behavior controlled
independently of the classes themselves. Normally, the class
is the best place to put such information and conventions
can easily be expressed in this delegation scheme to do just that.
Sometimes however, it is the case that a minor problem
in a single class prevents an entire object graph from
being written and this can leave the application
developer with no recourse but to attempt to shadow
the problematic classes locally or use alternative
persistence techniques. In situations like these, the
delegation model gives a relatively clean mechanism for
the application developer to intervene in all parts of the
serialization process without requiring that modifications
be made to the implementation of classes which are not part
of the application itself.
&lt;p&gt;
In addition to using a delegation model, this persistence
scheme differs from traditional serialization schemes
in requiring an analog of the &lt;code&gt;writeObject&lt;/code&gt;
method without a corresponding &lt;code&gt;readObject&lt;/code&gt;
method. The &lt;code&gt;writeObject&lt;/code&gt; analog encodes each
instance in terms of its public API and there is no need to
define a &lt;code&gt;readObject&lt;/code&gt; analog
since the procedure for reading the serialized form
is defined by the semantics of method invocation as laid
out in the Java Language Specification.
Breaking the dependency between &lt;code&gt;writeObject&lt;/code&gt;
and &lt;code&gt;readObject&lt;/code&gt; implementations, which may
change from version to version, is the key factor
in making the archives produced by this technique immune
to changes in the private implementations of the classes
to which they refer.
&lt;p&gt;
A persistence delegate, may take control of all
aspects of the persistence of an object including:
&lt;ul&gt;
&lt;li&gt;
Deciding whether or not an instance can be mutated
into another instance of the same class.
&lt;li&gt;
Instantiating the object, either by calling a
public constructor or a public factory method.
&lt;li&gt;
Performing the initialization of the object.
&lt;/ul&gt;
@see XMLEncoder

@since 1.4

@version 1.11 05/05/04
@author Philip Milne
</body><documentation humanName="Documentation"/><owner classType="Class" humanName="Owner" humanType="Class" icon="index_files/icon_class_303957224.jpg" mode="s,e" name="PersistenceDelegate" refid="_9_5_f720368_1110473546596_592582_7309"/><owningElement classType="Class" humanName="Owning Element" humanType="Class" icon="index_files/icon_class_303957224.jpg" name="PersistenceDelegate" refid="_9_5_f720368_1110473546596_592582_7309"/><TO_DO humanName="To Do" mode="s,e"/></comment></magicdraw>