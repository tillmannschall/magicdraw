<?xml version="1.0" encoding="UTF-8"?><magicdraw><comment classType="Comment" humanType="Comment" icon="index_files/icon_comment_2051026490.jpg" id="_10_5_622020d_1132928316982_459090_10775"><annotatedElement humanName="Annotated Element" mode="s,e"><interface classType="Interface" humanType="Interface" icon="index_files/icon_interface_118881143.jpg" name="RowSetWriter" refid="_9_5_f720368_1110473546753_507789_9773"/></annotatedElement><body humanName="Body" mode="s,e">An object that implements the &lt;code&gt;RowSetWriter&lt;/code&gt; interface,
called a &lt;i&gt;writer&lt;/i&gt;. A writer may be registered with a &lt;code&gt;RowSet&lt;/code&gt;
object that supports the reader/writer paradigm.
&lt;P&gt;
If a disconnected &lt;code&gt;RowSet&lt;/code&gt; object modifies some of its data,
and it has a writer associated with it, it may be implemented so that it
calls on the writer's &lt;code&gt;writeData&lt;/code&gt; method internally
to write the updates back to the data source. In order to do this, the writer
must first establish a connection with the rowset's data source.
&lt;P&gt;
If the data to be updated has already been changed in the data source, there
is a conflict, in which case the writer will not write
the changes to the data source.  The algorithm the writer uses for preventing
or limiting conflicts depends entirely on its implementation.

@since 1.4
</body><documentation humanName="Documentation"/><owner classType="Interface" humanName="Owner" humanType="Interface" icon="index_files/icon_interface_118881143.jpg" mode="s,e" name="RowSetWriter" refid="_9_5_f720368_1110473546753_507789_9773"/><owningElement classType="Interface" humanName="Owning Element" humanType="Interface" icon="index_files/icon_interface_118881143.jpg" name="RowSetWriter" refid="_9_5_f720368_1110473546753_507789_9773"/><TO_DO humanName="To Do" mode="s,e"/></comment></magicdraw>