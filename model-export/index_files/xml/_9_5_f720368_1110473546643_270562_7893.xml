<?xml version="1.0" encoding="UTF-8"?><magicdraw><class classType="Class" humanType="Class" icon="index_files/icon_class_303957224.jpg" id="_9_5_f720368_1110473546643_270562_7893"><documentation humanName="Documentation" mode="standard">A token representing a lock on a region of a file.

&lt;p&gt; A file-lock object is created each time a lock is acquired on a file via
one of the {@link FileChannel#lock(long,long,boolean) lock} or {@link
FileChannel#tryLock(long,long,boolean) tryLock} methods of the {@link
FileChannel} class.

&lt;p&gt; A file-lock object is initially valid.  It remains valid until the lock
is released by invoking the {@link #release release} method, by closing the
channel that was used to acquire it, or by the termination of the Java
virtual machine, whichever comes first.  The validity of a lock may be
tested by invoking its {@link #isValid isValid} method.

&lt;p&gt; A file lock is either &lt;i&gt;exclusive&lt;/i&gt; or &lt;i&gt;shared&lt;/i&gt;.  A shared lock
prevents other concurrently-running programs from acquiring an overlapping
exclusive lock, but does allow them to acquire overlapping shared locks.  An
exclusive lock prevents other programs from acquiring an overlapping lock of
either type.  Once it is released, a lock has no further effect on the locks
that may be acquired by other programs.

&lt;p&gt; Whether a lock is exclusive or shared may be determined by invoking its
{@link #isShared isShared} method.  Some platforms do not support shared
locks, in which case a request for a shared lock is automatically converted
into a request for an exclusive lock.

&lt;p&gt; The locks held on a particular file by a single Java virtual machine do
not overlap.  The {@link #overlaps overlaps} method may be used to test
whether a candidate lock range overlaps an existing lock.

&lt;p&gt; A file-lock object records the file channel upon whose file the lock is
held, the type and validity of the lock, and the position and size of the
locked region.  Only the validity of a lock is subject to change over time;
all other aspects of a lock's state are immutable.

&lt;p&gt; File locks are held on behalf of the entire Java virtual machine.
They are not suitable for controlling access to a file by multiple
threads within the same virtual machine.

&lt;p&gt; File-lock objects are safe for use by multiple concurrent threads.


&lt;a name="pdep"&gt;
&lt;h4&gt; Platform dependencies &lt;/h4&gt;

&lt;p&gt; This file-locking API is intended to map directly to the native locking
facility of the underlying operating system.  Thus the locks held on a file
should be visible to all programs that have access to the file, regardless
of the language in which those programs are written.

&lt;p&gt; Whether or not a lock actually prevents another program from accessing
the content of the locked region is system-dependent and therefore
unspecified.  The native file-locking facilities of some systems are merely
&lt;i&gt;advisory&lt;/i&gt;, meaning that programs must cooperatively observe a known
locking protocol in order to guarantee data integrity.  On other systems
native file locks are &lt;i&gt;mandatory&lt;/i&gt;, meaning that if one program locks a
region of a file then other programs are actually prevented from accessing
that region in a way that would violate the lock.  On yet other systems,
whether native file locks are advisory or mandatory is configurable on a
per-file basis.  To ensure consistent and correct behavior across platforms,
it is strongly recommended that the locks provided by this API be used as if
they were advisory locks.

&lt;p&gt; On some systems, acquiring a mandatory lock on a region of a file
prevents that region from being {@link java.nio.channels.FileChannel#map
&lt;/code&gt;mapped into memory&lt;code&gt;}, and vice versa.  Programs that combine
locking and mapping should be prepared for this combination to fail.

&lt;p&gt; On some systems, closing a channel releases all locks held by the Java
virtual machine on the underlying file regardless of whether the locks were
acquired via that channel or via another channel open on the same file.  It
is strongly recommended that, within a program, a unique channel be used to
acquire all locks on any given file.

&lt;p&gt; Some network filesystems permit file locking to be used with
memory-mapped files only when the locked regions are page-aligned and a
whole multiple of the underlying hardware's page size.  Some network
filesystems do not implement file locks on regions that extend past a
certain position, often 2&lt;sup&gt;30&lt;/sup&gt; or 2&lt;sup&gt;31&lt;/sup&gt;.  In general, great
care should be taken when locking files that reside on network filesystems.


@author Mark Reinhold
@author JSR-51 Expert Group
@version 1.8, 03/12/19
@since 1.4
</documentation><isAbstract humanName="Is Abstract" mode="s,e">true</isAbstract><isActive humanName="Is Active" mode="s,e">false</isActive><isFinalSpecialization humanName="Is Final Specialization" mode="e">false</isFinalSpecialization><isLeaf humanName="Is Leaf" mode="e">false</isLeaf><name humanName="Name" mode="s,e">FileLock</name><namespace classType="Package" humanName="Namespace" humanType="Package" icon="index_files/icon_package_2000410491.jpg" name="channels" refid="_9_5_f720368_1110473547643_957787_18151"/><ownedComment humanName="Owned Comment"><comment classType="Comment" humanType="Comment" icon="index_files/icon_comment_2051026490.jpg" refid="_10_5_622020d_1132928308630_482254_5405"/></ownedComment><ownedElement humanName="Owned Element"><comment classType="Comment" humanType="Comment" icon="index_files/icon_comment_2051026490.jpg" refid="_10_5_622020d_1132928308630_482254_5405"/></ownedElement><owner classType="Package" humanName="Owner" humanType="Package" icon="index_files/icon_package_2000410491.jpg" mode="s,e" name="channels" refid="_9_5_f720368_1110473547643_957787_18151"/><owningPackage classType="Package" humanName="Owning Package" humanType="Package" icon="index_files/icon_package_2000410491.jpg" name="channels" refid="_9_5_f720368_1110473547643_957787_18151"/><package classType="Package" humanName="Package" humanType="Package" icon="index_files/icon_package_2000410491.jpg" name="channels" refid="_9_5_f720368_1110473547643_957787_18151"/><qualifiedName humanName="Qualified Name" mode="e">JDK 5.0 Classes::java::nio::channels::FileLock</qualifiedName><TO_DO humanName="To Do" mode="s,e"/><visibility humanName="Visibility" mode="e">public</visibility></class></magicdraw>