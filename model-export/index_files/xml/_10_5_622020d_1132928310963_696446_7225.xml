<?xml version="1.0" encoding="UTF-8"?><magicdraw><comment classType="Comment" humanType="Comment" icon="index_files/icon_comment_2051026490.jpg" id="_10_5_622020d_1132928310963_696446_7225"><annotatedElement humanName="Annotated Element" mode="s,e"><class classType="Class" humanType="Class" icon="index_files/icon_class_303957224.jpg" name="EventListenerProxy" refid="_9_5_f720368_1110473546706_749379_8863"/></annotatedElement><body humanName="Body" mode="s,e">An abstract wrapper class for an EventListener class which associates a set
of additional parameters with the listener. Subclasses must provide the
storage and accessor methods for the additional arguments or parameters.

Subclasses of EventListenerProxy may be returned by getListeners() methods
as a way of associating named properties with their listeners.

For example, a Bean which supports named properties would have a two
argument method signature for adding a PropertyChangeListener for a
property:

public void addPropertyChangeListener(String propertyName,
PropertyChangeListener listener);

If the Bean also implemented the zero argument get listener method:

public PropertyChangeListener[] getPropertyChangeListeners();

then the array may contain inner PropertyChangeListeners which are also
PropertyChangeListenerProxy objects.

If the calling method is interested in retrieving the named property then it
would have to test the element to see if it is a proxy class.

@since 1.4
</body><documentation humanName="Documentation"/><owner classType="Class" humanName="Owner" humanType="Class" icon="index_files/icon_class_303957224.jpg" mode="s,e" name="EventListenerProxy" refid="_9_5_f720368_1110473546706_749379_8863"/><owningElement classType="Class" humanName="Owning Element" humanType="Class" icon="index_files/icon_class_303957224.jpg" name="EventListenerProxy" refid="_9_5_f720368_1110473546706_749379_8863"/><TO_DO humanName="To Do" mode="s,e"/></comment></magicdraw>