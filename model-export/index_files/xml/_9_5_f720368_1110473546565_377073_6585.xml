<?xml version="1.0" encoding="UTF-8"?><magicdraw><class classType="Class" humanType="Class" icon="index_files/icon_class_555864569.jpg" id="_9_5_f720368_1110473546565_377073_6585" refElementId="_9_5_f720368_1110473546565_377073_6585"><documentation humanName="Documentation" mode="s">An event which indicates that a keystroke occurred in a component.
&lt;p&gt;
This low-level event is generated by a component object (such as a text
field) when a key is pressed, released, or typed.
The event is passed to every &lt;code&gt;KeyListener&lt;/code&gt;
or &lt;code&gt;KeyAdapter&lt;/code&gt; object which registered to receive such
events using the component's &lt;code&gt;addKeyListener&lt;/code&gt; method.
(&lt;code&gt;KeyAdapter&lt;/code&gt; objects implement the
&lt;code&gt;KeyListener&lt;/code&gt; interface.)  Each such listener object
gets this &lt;code&gt;KeyEvent&lt;/code&gt; when the event occurs.
&lt;p&gt;
&lt;em&gt;"Key typed" events&lt;/em&gt; are higher-level and generally do not depend on
the platform or keyboard layout.  They are generated when a Unicode character
is entered, and are the preferred way to find out about character input.
In the simplest case, a key typed event is produced by a single key press
(e.g., 'a').  Often, however, characters are produced by series of key
presses (e.g., 'shift' + 'a'), and the mapping from key pressed events to
key typed events may be many-to-one or many-to-many.  Key releases are not
usually necessary to generate a key typed event, but there are some cases
where the key typed event is not generated until a key is released (e.g.,
entering ASCII sequences via the Alt-Numpad method in Windows).
No key typed events are generated for keys that don't generate Unicode
characters (e.g., action keys, modifier keys, etc.).
&lt;p&gt;
The getKeyChar method always returns a valid Unicode character or
CHAR_UNDEFINED.  Character input is reported by KEY_TYPED events:
KEY_PRESSED and KEY_RELEASED events are not necessarily associated
with character input.  Therefore, the result of the getKeyChar method
is guaranteed to be meaningful only for KEY_TYPED events.
&lt;p&gt;
For key pressed and key released events, the getKeyCode method returns
the event's keyCode.  For key typed events, the getKeyCode method
always returns VK_UNDEFINED.

&lt;p&gt;
&lt;em&gt;"Key pressed" and "key released" events&lt;/em&gt; are lower-level and depend
on the platform and keyboard layout. They are generated whenever a key is
pressed or released, and are the only way to find out about keys that don't
generate character input (e.g., action keys, modifier keys, etc.). The key
being pressed or released is indicated by the getKeyCode method, which returns
a virtual key code.

&lt;p&gt;
&lt;em&gt;Virtual key codes&lt;/em&gt; are used to report which keyboard key has
been pressed, rather than a character generated by the combination
of one or more keystrokes (such as "A", which comes from shift and "a").

&lt;p&gt;
For example, pressing the Shift key will cause a KEY_PRESSED event
with a VK_SHIFT keyCode, while pressing the 'a' key will result in
a VK_A keyCode.  After the 'a' key is released, a KEY_RELEASED event
will be fired with VK_A. Separately, a KEY_TYPED event with a keyChar
value of 'A' is generated.

&lt;p&gt;
Notes:
&lt;ul&gt;
&lt;li&gt;Key combinations which do not result in Unicode characters, such as action
keys like F1 and the HELP key, do not generate KEY_TYPED events.
&lt;li&gt;Not all keyboards or systems are capable of generating all
virtual key codes.  No attempt is made in Java to generate these keys
artificially.
&lt;li&gt;Virtual key codes do not identify a physical key: they depend on the
platform and keyboard layout. For example, the key that generates VK_Q
when using a U.S. keyboard layout will generate VK_A when using a French
keyboard layout.
&lt;li&gt;Not all characters have a keycode associated with them.  For example,
there is no keycode for the question mark because there is no keyboard
for which it appears on the primary layer.
&lt;li&gt;In order to support the platform-independent handling of action keys,
the Java platform uses a few additional virtual key constants for functions
that would otherwise have to be recognized by interpreting virtual key codes
and modifiers. For example, for Japanese Windows keyboards, VK_ALL_CANDIDATES
is returned instead of VK_CONVERT with the ALT modifier.
&lt;/ul&gt;

&lt;p&gt;
WARNING: Aside from those keys that are defined by the Java language
(VK_ENTER, VK_BACK_SPACE, and VK_TAB), do not rely on the values of the VK_
constants.  Sun reserves the right to change these values as needed
to accomodate a wider range of keyboards in the future.

@author Carl Quinn
@author Amy Fowler
@author Norbert Lindenberg
@version 1.75 05/18/04

@see KeyAdapter
@see KeyListener
@see &lt;a href="http://java.sun.com/docs/books/tutorial/post1.0/ui/keylistener.html"&gt;Tutorial: Writing a Key Listener&lt;/a&gt;
@see &lt;a href="http://www.awl.com/cp/javaseries/jcl1_2.html"&gt;Reference: The Java Class Libraries (update file)&lt;/a&gt;

@since 1.1
</documentation><generalization humanName="Generalization"><generalization classType="Generalization" humanType="Generalization" icon="index_files/icon_generalization_1454922150.jpg" isRelationship="true" name="Generalization[JDK 5.0 Classes::java::awt::event::KeyEvent -&gt; JDK 5.0 Classes::java::awt::event::InputEvent]" refElementId="_10_5_622020d_1132928320597_767152_12949" refid="_10_5_622020d_1132928320597_767152_12949"/></generalization><isAbstract humanName="Is Abstract" mode="s,e">false</isAbstract><isActive humanName="Is Active" mode="s,e">false</isActive><isFinalSpecialization humanName="Is Final Specialization" mode="e">false</isFinalSpecialization><isLeaf humanName="Is Leaf" mode="e">false</isLeaf><name humanName="Name" mode="s,e">KeyEvent</name><namespace classType="Package" humanName="Namespace" humanType="Package" icon="index_files/icon_package_1518868172.jpg" name="event" refElementId="_9_5_f720368_1110473547284_7684_16441" refid="_9_5_f720368_1110473547284_7684_16441"/><ownedComment humanName="Owned Comment"><comment classType="Comment" humanType="Comment" icon="index_files/icon_comment_841774062.jpg" name="An event which indicates that a keystroke occurred..." refElementId="_10_5_622020d_1132928305746_193048_3737" refid="_10_5_622020d_1132928305746_193048_3737"/></ownedComment><ownedElement humanName="Owned Element"><generalization classType="Generalization" humanType="Generalization" icon="index_files/icon_generalization_1454922150.jpg" isRelationship="true" name="Generalization[JDK 5.0 Classes::java::awt::event::KeyEvent -&gt; JDK 5.0 Classes::java::awt::event::InputEvent]" refElementId="_10_5_622020d_1132928320597_767152_12949" refid="_10_5_622020d_1132928320597_767152_12949"/><comment classType="Comment" humanType="Comment" icon="index_files/icon_comment_841774062.jpg" name="An event which indicates that a keystroke occurred..." refElementId="_10_5_622020d_1132928305746_193048_3737" refid="_10_5_622020d_1132928305746_193048_3737"/></ownedElement><owner classType="Package" humanName="Owner" humanType="Package" icon="index_files/icon_package_1518868172.jpg" mode="s,e" name="event" refElementId="_9_5_f720368_1110473547284_7684_16441" refid="_9_5_f720368_1110473547284_7684_16441"/><owningPackage classType="Package" humanName="Owning Package" humanType="Package" icon="index_files/icon_package_1518868172.jpg" name="event" refElementId="_9_5_f720368_1110473547284_7684_16441" refid="_9_5_f720368_1110473547284_7684_16441"/><package classType="Package" humanName="Package" humanType="Package" icon="index_files/icon_package_1518868172.jpg" name="event" refElementId="_9_5_f720368_1110473547284_7684_16441" refid="_9_5_f720368_1110473547284_7684_16441"/><qualifiedName humanName="Qualified Name" mode="e">JDK 5.0 Classes::java::awt::event::KeyEvent</qualifiedName><superClass humanName="Super Class"><class classType="Class" humanType="Class" icon="index_files/icon_class_795627831.jpg" name="InputEvent" refElementId="_9_5_f720368_1110473546565_876618_6571" refid="_9_5_f720368_1110473546565_876618_6571"/></superClass><TO_DO humanName="To Do" mode="s,e"/><visibility humanName="Visibility" mode="e">public</visibility></class></magicdraw>