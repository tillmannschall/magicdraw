<?xml version="1.0" encoding="UTF-8"?><magicdraw><class classType="Class" humanType="Class" icon="index_files/icon_class_795627831.jpg" id="_9_5_f720368_1110473546690_289801_8473" refElementId="_9_5_f720368_1110473546690_289801_8473"><documentation humanName="Documentation" mode="s">The KeyPairGenerator class is used to generate pairs of
public and private keys. Key pair generators are constructed using the
&lt;code&gt;getInstance&lt;/code&gt; factory methods (static methods that
return instances of a given class).

&lt;p&gt;A Key pair generator for a particular algorithm creates a public/private
key pair that can be used with this algorithm. It also associates
algorithm-specific parameters with each of the generated keys.

&lt;p&gt;There are two ways to generate a key pair: in an algorithm-independent
manner, and in an algorithm-specific manner.
The only difference between the two is the initialization of the object:

&lt;ul&gt;
&lt;li&gt;&lt;b&gt;Algorithm-Independent Initialization&lt;/b&gt;
&lt;p&gt;All key pair generators share the concepts of a keysize and a
source of randomness. The keysize is interpreted differently for different
algorithms (e.g., in the case of the &lt;i&gt;DSA&lt;/i&gt; algorithm, the keysize
corresponds to the length of the modulus).
There is an
{@link #initialize(int, java.security.SecureRandom) initialize}
method in this KeyPairGenerator class that takes these two universally
shared types of arguments. There is also one that takes just a
&lt;code&gt;keysize&lt;/code&gt; argument, and uses the &lt;code&gt;SecureRandom&lt;/code&gt;
implementation of the highest-priority installed provider as the source
of randomness. (If none of the installed providers supply an implementation
of &lt;code&gt;SecureRandom&lt;/code&gt;, a system-provided source of randomness is
used.)

&lt;p&gt;Since no other parameters are specified when you call the above
algorithm-independent &lt;code&gt;initialize&lt;/code&gt; methods, it is up to the
provider what to do about the algorithm-specific parameters (if any) to be
associated with each of the keys.

&lt;p&gt;If the algorithm is the &lt;i&gt;DSA&lt;/i&gt; algorithm, and the keysize (modulus
size) is 512, 768, or 1024, then the &lt;i&gt;Sun&lt;/i&gt; provider uses a set of
precomputed values for the &lt;code&gt;p&lt;/code&gt;, &lt;code&gt;q&lt;/code&gt;, and
&lt;code&gt;g&lt;/code&gt; parameters. If the modulus size is not one of the above
values, the &lt;i&gt;Sun&lt;/i&gt; provider creates a new set of parameters. Other
providers might have precomputed parameter sets for more than just the
three modulus sizes mentioned above. Still others might not have a list of
precomputed parameters at all and instead always create new parameter sets.
&lt;p&gt;

&lt;li&gt;&lt;b&gt;Algorithm-Specific Initialization&lt;/b&gt;
&lt;p&gt;For situations where a set of algorithm-specific parameters already
exists (e.g., so-called &lt;i&gt;community parameters&lt;/i&gt; in DSA), there are two
{@link #initialize(java.security.spec.AlgorithmParameterSpec)
initialize} methods that have an &lt;code&gt;AlgorithmParameterSpec&lt;/code&gt;
argument. One also has a &lt;code&gt;SecureRandom&lt;/code&gt; argument, while the
the other uses the &lt;code&gt;SecureRandom&lt;/code&gt;
implementation of the highest-priority installed provider as the source
of randomness. (If none of the installed providers supply an implementation
of &lt;code&gt;SecureRandom&lt;/code&gt;, a system-provided source of randomness is
used.)
&lt;/ul&gt;

&lt;p&gt;In case the client does not explicitly initialize the KeyPairGenerator
(via a call to an &lt;code&gt;initialize&lt;/code&gt; method), each provider must
supply (and document) a default initialization.
For example, the &lt;i&gt;Sun&lt;/i&gt; provider uses a default modulus size (keysize)
of 1024 bits.

&lt;p&gt;Note that this class is abstract and extends from
&lt;code&gt;KeyPairGeneratorSpi&lt;/code&gt; for historical reasons.
Application developers should only take notice of the methods defined in
this &lt;code&gt;KeyPairGenerator&lt;/code&gt; class; all the methods in
the superclass are intended for cryptographic service providers who wish to
supply their own implementations of key pair generators.

@author Benjamin Renaud

@version 1.56, 01/28/04

@see java.security.spec.AlgorithmParameterSpec
</documentation><generalization humanName="Generalization"><generalization classType="Generalization" humanType="Generalization" icon="index_files/icon_generalization_1454922150.jpg" isRelationship="true" name="Generalization[JDK 5.0 Classes::java::security::KeyPairGenerator -&gt; JDK 5.0 Classes::java::security::KeyPairGeneratorSpi]" refElementId="_10_5_622020d_1132928321889_158009_14203" refid="_10_5_622020d_1132928321889_158009_14203"/></generalization><isAbstract humanName="Is Abstract" mode="s,e">true</isAbstract><isActive humanName="Is Active" mode="s,e">false</isActive><isFinalSpecialization humanName="Is Final Specialization" mode="e">false</isFinalSpecialization><isLeaf humanName="Is Leaf" mode="e">false</isLeaf><member humanName="Member"><class classType="Class" humanType="Class" icon="index_files/icon_class_555864569.jpg" name="Delegate" refElementId="_9_5_f720368_1110473547737_849001_18765" refid="_9_5_f720368_1110473547737_849001_18765"/></member><name humanName="Name" mode="s,e">KeyPairGenerator</name><namespace classType="Package" humanName="Namespace" humanType="Package" icon="index_files/icon_package_1518868172.jpg" name="security" refElementId="_9_5_f720368_1110473547706_6534_18577" refid="_9_5_f720368_1110473547706_6534_18577"/><nestedClassifier humanName="Nested Classifier"><class classType="Class" humanType="Class" icon="index_files/icon_class_555864569.jpg" name="Delegate" refElementId="_9_5_f720368_1110473547737_849001_18765" refid="_9_5_f720368_1110473547737_849001_18765"/></nestedClassifier><ownedComment humanName="Owned Comment"><comment classType="Comment" humanType="Comment" icon="index_files/icon_comment_841774062.jpg" name="The KeyPairGenerator class is used to generate pai..." refElementId="_10_5_622020d_1132928309331_983827_6031" refid="_10_5_622020d_1132928309331_983827_6031"/></ownedComment><ownedElement humanName="Owned Element"><generalization classType="Generalization" humanType="Generalization" icon="index_files/icon_generalization_1454922150.jpg" isRelationship="true" name="Generalization[JDK 5.0 Classes::java::security::KeyPairGenerator -&gt; JDK 5.0 Classes::java::security::KeyPairGeneratorSpi]" refElementId="_10_5_622020d_1132928321889_158009_14203" refid="_10_5_622020d_1132928321889_158009_14203"/><comment classType="Comment" humanType="Comment" icon="index_files/icon_comment_841774062.jpg" name="The KeyPairGenerator class is used to generate pai..." refElementId="_10_5_622020d_1132928309331_983827_6031" refid="_10_5_622020d_1132928309331_983827_6031"/><class classType="Class" humanType="Class" icon="index_files/icon_class_555864569.jpg" name="Delegate" refElementId="_9_5_f720368_1110473547737_849001_18765" refid="_9_5_f720368_1110473547737_849001_18765"/></ownedElement><ownedMember humanName="Owned Member"><class classType="Class" humanType="Class" icon="index_files/icon_class_555864569.jpg" name="Delegate" refElementId="_9_5_f720368_1110473547737_849001_18765" refid="_9_5_f720368_1110473547737_849001_18765"/></ownedMember><owner classType="Package" humanName="Owner" humanType="Package" icon="index_files/icon_package_1518868172.jpg" mode="s,e" name="security" refElementId="_9_5_f720368_1110473547706_6534_18577" refid="_9_5_f720368_1110473547706_6534_18577"/><owningPackage classType="Package" humanName="Owning Package" humanType="Package" icon="index_files/icon_package_1518868172.jpg" name="security" refElementId="_9_5_f720368_1110473547706_6534_18577" refid="_9_5_f720368_1110473547706_6534_18577"/><package classType="Package" humanName="Package" humanType="Package" icon="index_files/icon_package_1518868172.jpg" name="security" refElementId="_9_5_f720368_1110473547706_6534_18577" refid="_9_5_f720368_1110473547706_6534_18577"/><qualifiedName humanName="Qualified Name" mode="e">JDK 5.0 Classes::java::security::KeyPairGenerator</qualifiedName><superClass humanName="Super Class"><class classType="Class" humanType="Class" icon="index_files/icon_class_795627831.jpg" name="KeyPairGeneratorSpi" refElementId="_9_5_f720368_1110473546690_170500_8475" refid="_9_5_f720368_1110473546690_170500_8475"/></superClass><TO_DO humanName="To Do" mode="s,e"/><visibility humanName="Visibility" mode="e">public</visibility></class></magicdraw>