<?xml version="1.0" encoding="UTF-8"?><magicdraw><class classType="Class" humanType="Class" icon="index_files/icon_class_555864569.jpg" id="_10_5_622020d_1132928310072_445859_6457" refElementId="_10_5_622020d_1132928310072_445859_6457"><UMLClass classType="Class" humanName="Class" humanType="Class" icon="index_files/icon_class_555864569.jpg" name="ConcurrentHashMap" refElementId="_10_5_622020d_1132928310072_295537_6451" refid="_10_5_622020d_1132928310072_295537_6451"/><documentation humanName="Documentation" mode="s">ConcurrentHashMap list entry. Note that this is never exported
out as a user-visible Map.Entry.

Because the value field is volatile, not final, it is legal wrt
the Java Memory Model for an unsynchronized reader to see null
instead of initial value when read via a data race.  Although a
reordering leading to this is not likely to ever actually
occur, the Segment.readValueUnderLock method is used as a
backup in case a null (pre-initialized) value is ever seen in
an unsynchronized access method.
</documentation><isAbstract humanName="Is Abstract" mode="s,e">false</isAbstract><isActive humanName="Is Active" mode="s,e">false</isActive><isFinalSpecialization humanName="Is Final Specialization" mode="e">true</isFinalSpecialization><isLeaf humanName="Is Leaf" mode="e">true</isLeaf><name humanName="Name" mode="s,e">HashEntry</name><namespace classType="Class" humanName="Namespace" humanType="Class" icon="index_files/icon_class_555864569.jpg" name="ConcurrentHashMap" refElementId="_10_5_622020d_1132928310072_295537_6451" refid="_10_5_622020d_1132928310072_295537_6451"/><ownedComment humanName="Owned Comment"><comment classType="Comment" humanType="Comment" icon="index_files/icon_comment_841774062.jpg" name="ConcurrentHashMap list entry. Note that this is ne..." refElementId="_10_5_622020d_1132928310072_703457_6463" refid="_10_5_622020d_1132928310072_703457_6463"/></ownedComment><ownedElement humanName="Owned Element"><redefinabletemplatesignature classType="RedefinableTemplateSignature" humanType="Redefinable Template Signature" icon="index_files/icon_redefinabletemplatesignature_185514701.jpg" name="" refElementId="_10_5_622020d_1132928310072_331172_6458" refid="_10_5_622020d_1132928310072_331172_6458"/><comment classType="Comment" humanType="Comment" icon="index_files/icon_comment_841774062.jpg" name="ConcurrentHashMap list entry. Note that this is ne..." refElementId="_10_5_622020d_1132928310072_703457_6463" refid="_10_5_622020d_1132928310072_703457_6463"/></ownedElement><ownedTemplateSignature classType="RedefinableTemplateSignature" humanName="Owned Template Signature" humanType="Redefinable Template Signature" icon="index_files/icon_redefinabletemplatesignature_185514701.jpg" name="" refElementId="_10_5_622020d_1132928310072_331172_6458" refid="_10_5_622020d_1132928310072_331172_6458"/><owner classType="Class" humanName="Owner" humanType="Class" icon="index_files/icon_class_555864569.jpg" mode="s,e" name="ConcurrentHashMap" refElementId="_10_5_622020d_1132928310072_295537_6451" refid="_10_5_622020d_1132928310072_295537_6451"/><qualifiedName humanName="Qualified Name" mode="e">JDK 5.0 Classes::java::util::concurrent::ConcurrentHashMap::HashEntry</qualifiedName><redefinitionContext humanName="Redefinition Context"><class classType="Class" humanType="Class" icon="index_files/icon_class_555864569.jpg" name="ConcurrentHashMap" refElementId="_10_5_622020d_1132928310072_295537_6451" refid="_10_5_622020d_1132928310072_295537_6451"/></redefinitionContext><TO_DO humanName="To Do" mode="s,e"/><visibility humanName="Visibility" mode="e">package</visibility></class></magicdraw>