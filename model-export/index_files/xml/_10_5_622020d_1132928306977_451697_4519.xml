<?xml version="1.0" encoding="UTF-8"?><magicdraw><comment classType="Comment" humanType="Comment" icon="index_files/icon_comment_841774062.jpg" id="_10_5_622020d_1132928306977_451697_4519" refElementId="_10_5_622020d_1132928306977_451697_4519"><annotatedElement humanName="Annotated Element" mode="s,e"><class classType="Class" humanType="Class" icon="index_files/icon_class_555864569.jpg" name="Statement" refElementId="_9_5_f720368_1110473546596_471691_7331" refid="_9_5_f720368_1110473546596_471691_7331"/></annotatedElement><body humanName="Body" mode="s,e">A &lt;code&gt;Statement&lt;/code&gt; object represents a primitive statement
in which a single method is applied to a target and
a set of arguments - as in &lt;code&gt;"a.setFoo(b)"&lt;/code&gt;.
Note that where this example uses names
to denote the target and its argument, a statement
object does not require a name space and is constructed with
the values themselves.
The statement object associates the named method
with its environment as a simple set of values:
the target and an array of argument values.

@since 1.4

@version 1.29 12/19/03
@author Philip Milne
</body><documentation humanName="Documentation"/><owner classType="Class" humanName="Owner" humanType="Class" icon="index_files/icon_class_555864569.jpg" mode="s,e" name="Statement" refElementId="_9_5_f720368_1110473546596_471691_7331" refid="_9_5_f720368_1110473546596_471691_7331"/><owningElement classType="Class" humanName="Owning Element" humanType="Class" icon="index_files/icon_class_555864569.jpg" name="Statement" refElementId="_9_5_f720368_1110473546596_471691_7331" refid="_9_5_f720368_1110473546596_471691_7331"/><TO_DO humanName="To Do" mode="s,e"/></comment></magicdraw>