<?xml version="1.0" encoding="UTF-8"?><magicdraw><class classType="Class" humanType="Class" icon="index_files/icon_class_303957224.jpg" id="_9_5_f720368_1110473546737_604249_9453"><clientDependency humanName="Client Dependency"><interfacerealization classType="InterfaceRealization" humanType="Interface Realization" icon="index_files/icon_interfacerealization_425275537.jpg" isRelationship="true" name="Interface Realization[JDK 5.0 Classes::javax::print::attribute::EnumSyntax -&gt; JDK 5.0 Classes::java::io::Serializable]" refid="_10_5_622020d_1132928323321_891605_16444"/><interfacerealization classType="InterfaceRealization" humanType="Interface Realization" icon="index_files/icon_interfacerealization_425275537.jpg" isRelationship="true" name="Interface Realization[JDK 5.0 Classes::javax::print::attribute::EnumSyntax -&gt; JDK 5.0 Classes::java::lang::Cloneable]" refid="_10_5_622020d_1132928323321_699178_16445"/></clientDependency><documentation humanName="Documentation" mode="standard">Class EnumSyntax is an abstract base class providing the common
implementation of all "type safe enumeration" objects. An enumeration class
(which extends class EnumSyntax) provides a group of enumeration values
(objects) that are singleton instances of the enumeration class; for example:
&lt;PRE&gt;
public class Bach extends EnumSyntax {
public static final Bach JOHANN_SEBASTIAN     = new Bach(0);
public static final Bach WILHELM_FRIEDEMANN   = new Bach(1);
public static final Bach CARL_PHILIP_EMMANUEL = new Bach(2);
public static final Bach JOHANN_CHRISTIAN     = new Bach(3);
public static final Bach P_D_Q                = new Bach(4);

private static final String[] stringTable = {
"Johann Sebastian Bach",
"Wilhelm Friedemann Bach",
"Carl Philip Emmanuel Bach",
"Johann Christian Bach",
"P.D.Q. Bach"
};

protected String[] getStringTable() {
return stringTable;
}

private static final Bach[] enumValueTable = {
JOHANN_SEBASTIAN,
WILHELM_FRIEDEMANN,
CARL_PHILIP_EMMANUEL,
JOHANN_CHRISTIAN,
P_D_Q
};

protected EnumSyntax[] getEnumValueTable() {
return enumValueTable;
}
}
&lt;/PRE&gt;
You can then write code that uses the &lt;CODE&gt;==&lt;/CODE&gt; and &lt;CODE&gt;!=&lt;/CODE&gt;
operators to test enumeration values; for example:
&lt;PRE&gt;
Bach theComposer;
. . .
if (theComposer == Bach.JOHANN_SEBASTIAN) {
System.out.println ("The greatest composer of all time!");
}
&lt;/PRE&gt;
The &lt;CODE&gt;equals()&lt;/CODE&gt; method for an enumeration class just does a test
for identical objects (&lt;CODE&gt;==&lt;/CODE&gt;).
&lt;P&gt;
You can convert an enumeration value to a string by calling {@link
#toString() &lt;CODE&gt;toString()&lt;/CODE&gt;}. The string is obtained from a table
supplied by the enumeration class.
&lt;P&gt;
Under the hood, an enumeration value is just an integer, a different integer
for each enumeration value within an enumeration class. You can get an
enumeration value's integer value by calling {@link #getValue()
&lt;CODE&gt;getValue()&lt;/CODE&gt;}. An enumeration value's integer value is established
when it is constructed (see {@link #EnumSyntax(int)
&lt;CODE&gt;EnumSyntax(int)&lt;/CODE&gt;}). Since the constructor is protected, the only
possible enumeration values are the singleton objects declared in the
enumeration class; additional enumeration values cannot be created at run
time.
&lt;P&gt;
You can define a subclass of an enumeration class that extends it with
additional enumeration values. The subclass's enumeration values' integer
values need not be distinct from the superclass's enumeration values' integer
values; the &lt;CODE&gt;==&lt;/CODE&gt;, &lt;CODE&gt;!=&lt;/CODE&gt;, &lt;CODE&gt;equals()&lt;/CODE&gt;, and
&lt;CODE&gt;toString()&lt;/CODE&gt; methods will still work properly even if the subclass
uses some of the same integer values as the superclass. However, the
application in which the enumeration class and subclass are used may need to
have distinct integer values in the superclass and subclass.
&lt;P&gt;

@author  David Mendenhall
@author  Alan Kaminsky
</documentation><interfaceRealization humanName="Interface Realization"><interfacerealization classType="InterfaceRealization" humanType="Interface Realization" icon="index_files/icon_interfacerealization_425275537.jpg" isRelationship="true" name="Interface Realization[JDK 5.0 Classes::javax::print::attribute::EnumSyntax -&gt; JDK 5.0 Classes::java::io::Serializable]" refid="_10_5_622020d_1132928323321_891605_16444"/><interfacerealization classType="InterfaceRealization" humanType="Interface Realization" icon="index_files/icon_interfacerealization_425275537.jpg" isRelationship="true" name="Interface Realization[JDK 5.0 Classes::javax::print::attribute::EnumSyntax -&gt; JDK 5.0 Classes::java::lang::Cloneable]" refid="_10_5_622020d_1132928323321_699178_16445"/></interfaceRealization><isAbstract humanName="Is Abstract" mode="s,e">true</isAbstract><isActive humanName="Is Active" mode="s,e">false</isActive><isFinalSpecialization humanName="Is Final Specialization" mode="e">false</isFinalSpecialization><isLeaf humanName="Is Leaf" mode="e">false</isLeaf><name humanName="Name" mode="s,e">EnumSyntax</name><namespace classType="Package" humanName="Namespace" humanType="Package" icon="index_files/icon_package_2000410491.jpg" name="attribute" refid="_9_5_f720368_1110473547987_11292_20190"/><ownedComment humanName="Owned Comment"><comment classType="Comment" humanType="Comment" icon="index_files/icon_comment_2051026490.jpg" refid="_10_5_622020d_1132928315800_566490_10271"/></ownedComment><ownedElement humanName="Owned Element"><comment classType="Comment" humanType="Comment" icon="index_files/icon_comment_2051026490.jpg" refid="_10_5_622020d_1132928315800_566490_10271"/><interfacerealization classType="InterfaceRealization" humanType="Interface Realization" icon="index_files/icon_interfacerealization_425275537.jpg" isRelationship="true" name="Interface Realization[JDK 5.0 Classes::javax::print::attribute::EnumSyntax -&gt; JDK 5.0 Classes::java::io::Serializable]" refid="_10_5_622020d_1132928323321_891605_16444"/><interfacerealization classType="InterfaceRealization" humanType="Interface Realization" icon="index_files/icon_interfacerealization_425275537.jpg" isRelationship="true" name="Interface Realization[JDK 5.0 Classes::javax::print::attribute::EnumSyntax -&gt; JDK 5.0 Classes::java::lang::Cloneable]" refid="_10_5_622020d_1132928323321_699178_16445"/></ownedElement><owner classType="Package" humanName="Owner" humanType="Package" icon="index_files/icon_package_2000410491.jpg" mode="s,e" name="attribute" refid="_9_5_f720368_1110473547987_11292_20190"/><owningPackage classType="Package" humanName="Owning Package" humanType="Package" icon="index_files/icon_package_2000410491.jpg" name="attribute" refid="_9_5_f720368_1110473547987_11292_20190"/><package classType="Package" humanName="Package" humanType="Package" icon="index_files/icon_package_2000410491.jpg" name="attribute" refid="_9_5_f720368_1110473547987_11292_20190"/><qualifiedName humanName="Qualified Name" mode="e">JDK 5.0 Classes::javax::print::attribute::EnumSyntax</qualifiedName><realizedInterfaces humanName="Realized Interface" mode="s,e"><interface classType="Interface" humanType="Interface" icon="index_files/icon_interface_118881143.jpg" name="Cloneable" refid="_9_5_f720368_1110473546612_888397_7587"/><interface classType="Interface" humanType="Interface" icon="index_files/icon_interface_118881143.jpg" name="Serializable" refid="_9_5_f720368_1110473546612_364919_7481"/></realizedInterfaces><TO_DO humanName="To Do" mode="s,e"/><visibility humanName="Visibility" mode="e">public</visibility></class></magicdraw>