<?xml version="1.0" encoding="UTF-8"?><magicdraw><comment classType="Comment" humanType="Comment" icon="index_files/icon_comment_841774062.jpg" id="_10_5_622020d_1132928313347_720440_7419" refElementId="_10_5_622020d_1132928313347_720440_7419"><annotatedElement humanName="Annotated Element" mode="s,e"><class classType="Class" humanType="Class" icon="index_files/icon_class_555864569.jpg" name="PriorityQueue" refElementId="_10_5_622020d_1132928313337_377913_7413" refid="_10_5_622020d_1132928313337_377913_7413"/></annotatedElement><body humanName="Body" mode="s,e">An unbounded priority {@linkplain Queue queue} based on a priority
heap.  This queue orders elements according to an order specified
at construction time, which is specified either according to their
&lt;i&gt;natural order&lt;/i&gt; (see {@link Comparable}), or according to a
{@link java.util.Comparator}, depending on which constructor is
used. A priority queue does not permit &lt;tt&gt;null&lt;/tt&gt; elements.
A priority queue relying on natural ordering also does not
permit insertion of non-comparable objects (doing so may result
in &lt;tt&gt;ClassCastException&lt;/tt&gt;).

&lt;p&gt;The &lt;em&gt;head&lt;/em&gt; of this queue is the &lt;em&gt;least&lt;/em&gt; element
with respect to the specified ordering.  If multiple elements are
tied for least value, the head is one of those elements -- ties are
broken arbitrarily.  The queue retrieval operations &lt;tt&gt;poll&lt;/tt&gt;,
&lt;tt&gt;remove&lt;/tt&gt;, &lt;tt&gt;peek&lt;/tt&gt;, and &lt;tt&gt;element&lt;/tt&gt; access the
element at the head of the queue.

&lt;p&gt;A priority queue is unbounded, but has an internal
&lt;i&gt;capacity&lt;/i&gt; governing the size of an array used to store the
elements on the queue.  It is always at least as large as the queue
size.  As elements are added to a priority queue, its capacity
grows automatically.  The details of the growth policy are not
specified.

&lt;p&gt;This class and its iterator implement all of the
&lt;em&gt;optional&lt;/em&gt; methods of the {@link Collection} and {@link
Iterator} interfaces.
The
Iterator provided in method {@link #iterator()} is &lt;em&gt;not&lt;/em&gt;
guaranteed to traverse the elements of the PriorityQueue in any
particular order. If you need ordered traversal, consider using
&lt;tt&gt;Arrays.sort(pq.toArray())&lt;/tt&gt;.

&lt;p&gt; &lt;strong&gt;Note that this implementation is not synchronized.&lt;/strong&gt;
Multiple threads should not access a &lt;tt&gt;PriorityQueue&lt;/tt&gt;
instance concurrently if any of the threads modifies the list
structurally. Instead, use the thread-safe {@link
java.util.concurrent.PriorityBlockingQueue} class.


&lt;p&gt;Implementation note: this implementation provides O(log(n)) time
for the insertion methods (&lt;tt&gt;offer&lt;/tt&gt;, &lt;tt&gt;poll&lt;/tt&gt;,
&lt;tt&gt;remove()&lt;/tt&gt; and &lt;tt&gt;add&lt;/tt&gt;) methods; linear time for the
&lt;tt&gt;remove(Object)&lt;/tt&gt; and &lt;tt&gt;contains(Object)&lt;/tt&gt; methods; and
constant time for the retrieval methods (&lt;tt&gt;peek&lt;/tt&gt;,
&lt;tt&gt;element&lt;/tt&gt;, and &lt;tt&gt;size&lt;/tt&gt;).

&lt;p&gt;This class is a member of the
&lt;a href="{@docRoot}/../guide/collections/index.html"&gt;
Java Collections Framework&lt;/a&gt;.
@since 1.5
@version 1.6, 06/11/04
@author Josh Bloch
@param &lt;E&gt; the type of elements held in this collection
</body><documentation humanName="Documentation"/><owner classType="Class" humanName="Owner" humanType="Class" icon="index_files/icon_class_555864569.jpg" mode="s,e" name="PriorityQueue" refElementId="_10_5_622020d_1132928313337_377913_7413" refid="_10_5_622020d_1132928313337_377913_7413"/><owningElement classType="Class" humanName="Owning Element" humanType="Class" icon="index_files/icon_class_555864569.jpg" name="PriorityQueue" refElementId="_10_5_622020d_1132928313337_377913_7413" refid="_10_5_622020d_1132928313337_377913_7413"/><TO_DO humanName="To Do" mode="s,e"/></comment></magicdraw>