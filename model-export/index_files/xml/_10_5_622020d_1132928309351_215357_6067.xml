<?xml version="1.0" encoding="UTF-8"?><magicdraw><comment classType="Comment" humanType="Comment" icon="index_files/icon_comment_841774062.jpg" id="_10_5_622020d_1132928309351_215357_6067" refElementId="_10_5_622020d_1132928309351_215357_6067"><annotatedElement humanName="Annotated Element" mode="s,e"><class classType="Class" humanType="Class" icon="index_files/icon_class_795627831.jpg" name="MessageDigest" refElementId="_9_5_f720368_1110473546690_514225_8483" refid="_9_5_f720368_1110473546690_514225_8483"/></annotatedElement><body humanName="Body" mode="s,e">This MessageDigest class provides applications the functionality of a
message digest algorithm, such as MD5 or SHA.
Message digests are secure one-way hash functions that take arbitrary-sized
data and output a fixed-length hash value.

&lt;p&gt;A MessageDigest object starts out initialized. The data is
processed through it using the {@link #update(byte) update}
methods. At any point {@link #reset() reset} can be called
to reset the digest. Once all the data to be updated has been
updated, one of the {@link #digest() digest} methods should
be called to complete the hash computation.

&lt;p&gt;The &lt;code&gt;digest&lt;/code&gt; method can be called once for a given number
of updates. After &lt;code&gt;digest&lt;/code&gt; has been called, the MessageDigest
object is reset to its initialized state.

&lt;p&gt;Implementations are free to implement the Cloneable interface.
Client applications can test cloneability by attempting cloning
and catching the CloneNotSupportedException: &lt;p&gt;

&lt;pre&gt;
MessageDigest md = MessageDigest.getInstance("SHA");

try {
md.update(toChapter1);
MessageDigest tc1 = md.clone();
byte[] toChapter1Digest = tc1.digest();
md.update(toChapter2);
...etc.
} catch (CloneNotSupportedException cnse) {
throw new DigestException("couldn't make digest of partial content");
}
&lt;/pre&gt;

&lt;p&gt;Note that if a given implementation is not cloneable, it is
still possible to compute intermediate digests by instantiating
several instances, if the number of digests is known in advance.

&lt;p&gt;Note that this class is abstract and extends from
&lt;code&gt;MessageDigestSpi&lt;/code&gt; for historical reasons.
Application developers should only take notice of the methods defined in
this &lt;code&gt;MessageDigest&lt;/code&gt; class; all the methods in
the superclass are intended for cryptographic service providers who wish to
supply their own implementations of message digest algorithms.

@author Benjamin Renaud

@version 1.77, 12/19/03

@see DigestInputStream
@see DigestOutputStream
</body><documentation humanName="Documentation"/><owner classType="Class" humanName="Owner" humanType="Class" icon="index_files/icon_class_795627831.jpg" mode="s,e" name="MessageDigest" refElementId="_9_5_f720368_1110473546690_514225_8483" refid="_9_5_f720368_1110473546690_514225_8483"/><owningElement classType="Class" humanName="Owning Element" humanType="Class" icon="index_files/icon_class_795627831.jpg" name="MessageDigest" refElementId="_9_5_f720368_1110473546690_514225_8483" refid="_9_5_f720368_1110473546690_514225_8483"/><TO_DO humanName="To Do" mode="s,e"/></comment></magicdraw>