<?xml version="1.0" encoding="UTF-8"?><magicdraw><comment classType="Comment" humanType="Comment" icon="index_files/icon_comment_2051026490.jpg" id="_10_5_622020d_1132928315009_487060_9531"><annotatedElement humanName="Annotated Element" mode="s,e"><class classType="Class" humanType="Class" icon="index_files/icon_class_1555793073.jpg" name="NoCallStackClassLoader" refid="_10_5_622020d_1132928315009_40555_9529"/></annotatedElement><body humanName="Body" mode="s,e">&lt;p&gt;A class loader that only knows how to define a limited number
of classes, and load a limited number of other classes through
delegation to another loader.  It is used to get around a problem
with Serialization, in particular as used by RMI (including
RMI/IIOP).  The JMX Remote API defines exactly what class loader
must be used to deserialize arguments on the server, and return
values on the client.  We communicate this class loader to RMI by
setting it as the context class loader.  RMI uses the context
class loader to load classes as it deserializes, which is what we
want.  However, before consulting the context class loader, it
looks up the call stack for a class with a non-null class loader,
and uses that if it finds one.  So, in the standalone version of
javax.management.remote, if the class you're looking for is known
to the loader of jmxremote.jar (typically the system class loader)
then that loader will load it.  This contradicts the class-loading
semantics required.

&lt;p&gt;We get around the problem by ensuring that the search up the
call stack will find a non-null class loader that doesn't load any
classes of interest, namely this one.  So even though this loader
is indeed consulted during deserialization, it never finds the
class being deserialized.  RMI then proceeds to use the context
class loader, as we require.
&lt;p&gt;This loader is constructed with the name and byte-code of one
or more classes that it defines, and a class-loader to which it
will delegate certain other classes required by that byte-code.
We construct the byte-code somewhat painstakingly, by compiling
the Java code directly, converting into a string, copying that
string into the class that needs this loader, and using the
stringToBytes method to convert it into the byte array.  We
compile with -g:none because there's not much point in having
line-number information and the like in these directly-encoded
classes.
&lt;p&gt;The referencedClassNames should contain the names of all
classes that are referenced by the classes defined by this loader.
It is not necessary to include standard J2SE classes, however.
Here, a class is referenced if it is the superclass or a
superinterface of a defined class, or if it is the type of a
field, parameter, or return value.  A class is not referenced if
it only appears in the throws clause of a method or constructor.
Of course, referencedClassNames should not contain any classes
that the user might want to deserialize, because the whole point
of this loader is that it does not find such classes.
</body><documentation humanName="Documentation"/><owner classType="Class" humanName="Owner" humanType="Class" icon="index_files/icon_class_1555793073.jpg" mode="s,e" name="NoCallStackClassLoader" refid="_10_5_622020d_1132928315009_40555_9529"/><owningElement classType="Class" humanName="Owning Element" humanType="Class" icon="index_files/icon_class_1555793073.jpg" name="NoCallStackClassLoader" refid="_10_5_622020d_1132928315009_40555_9529"/><TO_DO humanName="To Do" mode="s,e"/></comment></magicdraw>