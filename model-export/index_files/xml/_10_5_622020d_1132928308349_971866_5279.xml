<?xml version="1.0" encoding="UTF-8"?><magicdraw><comment classType="Comment" humanType="Comment" icon="index_files/icon_comment_2051026490.jpg" id="_10_5_622020d_1132928308349_971866_5279"><annotatedElement humanName="Annotated Element" mode="s,e"><class classType="Class" humanType="Class" icon="index_files/icon_class_303957224.jpg" name="JarURLConnection" refid="_9_5_f720368_1110473546643_303191_7777"/></annotatedElement><body humanName="Body" mode="s,e">A URL Connection to a Java ARchive (JAR) file or an entry in a JAR
file.

&lt;p&gt;The syntax of a JAR URL is:

&lt;pre&gt;
jar:&lt;url&gt;!/{entry}
&lt;/pre&gt;

&lt;p&gt;for example:

&lt;p&gt;&lt;code&gt;
jar:http://www.foo.com/bar/baz.jar!/COM/foo/Quux.class&lt;br&gt;
&lt;/code&gt;

&lt;p&gt;Jar URLs should be used to refer to a JAR file or entries in
a JAR file. The example above is a JAR URL which refers to a JAR
entry. If the entry name is omitted, the URL refers to the whole
JAR file:

&lt;code&gt;
jar:http://www.foo.com/bar/baz.jar!
&lt;/code&gt;

&lt;p&gt;Users should cast the generic URLConnection to a
JarURLConnection when they know that the URL they created is a JAR
URL, and they need JAR-specific functionality. For example:

&lt;pre&gt;
URL url = new URL("jar:file:/home/duke/duke.jar!/");
JarURLConnection jarConnection = (JarURLConnection)url.openConnection();
Manifest manifest = jarConnection.getManifest();
&lt;/pre&gt;

&lt;p&gt;JarURLConnection instances can only be used to read from JAR files.
It is not possible to get a {@link java.io.OutputStream} to modify or write
to the underlying JAR file using this class.
&lt;p&gt;Examples:

&lt;dl&gt;

&lt;dt&gt;A Jar entry
&lt;dd&gt;&lt;code&gt;jar:http://www.foo.com/bar/baz.jar!/COM/foo/Quux.class&lt;/code&gt;

&lt;dt&gt;A Jar file
&lt;dd&gt;&lt;code&gt;jar:http://www.foo.com/bar/baz.jar!/&lt;/code&gt;

&lt;dt&gt;A Jar directory
&lt;dd&gt;&lt;code&gt;jar:http://www.foo.com/bar/baz.jar!/COM/foo/&lt;/code&gt;

&lt;/dl&gt;

&lt;p&gt;&lt;code&gt;!/&lt;/code&gt; is refered to as the &lt;em&gt;separator&lt;/em&gt;.

&lt;p&gt;When constructing a JAR url via &lt;code&gt;new URL(context, spec)&lt;/code&gt;,
the following rules apply:

&lt;ul&gt;

&lt;li&gt;if there is no context URL and the specification passed to the
URL constructor doesn't contain a separator, the URL is considered
to refer to a JarFile.

&lt;li&gt;if there is a context URL, the context URL is assumed to refer
to a JAR file or a Jar directory.

&lt;li&gt;if the specification begins with a '/', the Jar directory is
ignored, and the spec is considered to be at the root of the Jar
file.

&lt;p&gt;Examples:

&lt;dl&gt;

&lt;dt&gt;context: &lt;b&gt;jar:http://www.foo.com/bar/jar.jar!/&lt;/b&gt;,
spec:&lt;b&gt;baz/entry.txt&lt;/b&gt;

&lt;dd&gt;url:&lt;b&gt;jar:http://www.foo.com/bar/jar.jar!/baz/entry.txt&lt;/b&gt;

&lt;dt&gt;context: &lt;b&gt;jar:http://www.foo.com/bar/jar.jar!/baz&lt;/b&gt;,
spec:&lt;b&gt;entry.txt&lt;/b&gt;

&lt;dd&gt;url:&lt;b&gt;jar:http://www.foo.com/bar/jar.jar!/baz/entry.txt&lt;/b&gt;

&lt;dt&gt;context: &lt;b&gt;jar:http://www.foo.com/bar/jar.jar!/baz&lt;/b&gt;,
spec:&lt;b&gt;/entry.txt&lt;/b&gt;

&lt;dd&gt;url:&lt;b&gt;jar:http://www.foo.com/bar/jar.jar!/entry.txt&lt;/b&gt;

&lt;/dl&gt;

&lt;/ul&gt;

@see java.net.URL
@see java.net.URLConnection

@see java.util.jar.JarFile
@see java.util.jar.JarInputStream
@see java.util.jar.Manifest
@see java.util.zip.ZipEntry

@author Benjamin Renaud
@since 1.2
</body><documentation humanName="Documentation"/><owner classType="Class" humanName="Owner" humanType="Class" icon="index_files/icon_class_303957224.jpg" mode="s,e" name="JarURLConnection" refid="_9_5_f720368_1110473546643_303191_7777"/><owningElement classType="Class" humanName="Owning Element" humanType="Class" icon="index_files/icon_class_303957224.jpg" name="JarURLConnection" refid="_9_5_f720368_1110473546643_303191_7777"/><TO_DO humanName="To Do" mode="s,e"/></comment></magicdraw>