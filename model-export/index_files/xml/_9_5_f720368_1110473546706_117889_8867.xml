<?xml version="1.0" encoding="UTF-8"?><magicdraw><class classType="Class" humanType="Class" icon="index_files/icon_class_1555793073.jpg" id="_9_5_f720368_1110473546706_117889_8867"><documentation humanName="Documentation" mode="standard">&lt;code&gt;GregorianCalendar&lt;/code&gt; is a concrete subclass of
&lt;code&gt;Calendar&lt;/code&gt; and provides the standard calendar system
used by most of the world.

&lt;p&gt; &lt;code&gt;GregorianCalendar&lt;/code&gt; is a hybrid calendar that
supports both the Julian and Gregorian calendar systems with the
support of a single discontinuity, which corresponds by default to
the Gregorian date when the Gregorian calendar was instituted
(October 15, 1582 in some countries, later in others).  The cutover
date may be changed by the caller by calling {@link
#setGregorianChange(Date) setGregorianChange()}.

&lt;p&gt;
Historically, in those countries which adopted the Gregorian calendar first,
October 4, 1582 (Julian) was thus followed by October 15, 1582 (Gregorian). This calendar models
this correctly.  Before the Gregorian cutover, &lt;code&gt;GregorianCalendar&lt;/code&gt;
implements the Julian calendar.  The only difference between the Gregorian
and the Julian calendar is the leap year rule. The Julian calendar specifies
leap years every four years, whereas the Gregorian calendar omits century
years which are not divisible by 400.

&lt;p&gt;
&lt;code&gt;GregorianCalendar&lt;/code&gt; implements &lt;em&gt;proleptic&lt;/em&gt; Gregorian and
Julian calendars. That is, dates are computed by extrapolating the current
rules indefinitely far backward and forward in time. As a result,
&lt;code&gt;GregorianCalendar&lt;/code&gt; may be used for all years to generate
meaningful and consistent results. However, dates obtained using
&lt;code&gt;GregorianCalendar&lt;/code&gt; are historically accurate only from March 1, 4
AD onward, when modern Julian calendar rules were adopted.  Before this date,
leap year rules were applied irregularly, and before 45 BC the Julian
calendar did not even exist.

&lt;p&gt;
Prior to the institution of the Gregorian calendar, New Year's Day was
March 25. To avoid confusion, this calendar always uses January 1. A manual
adjustment may be made if desired for dates that are prior to the Gregorian
changeover and which fall between January 1 and March 24.

&lt;p&gt;Values calculated for the &lt;code&gt;WEEK_OF_YEAR&lt;/code&gt; field range from 1 to
53.  Week 1 for a year is the earliest seven day period starting on
&lt;code&gt;getFirstDayOfWeek()&lt;/code&gt; that contains at least
&lt;code&gt;getMinimalDaysInFirstWeek()&lt;/code&gt; days from that year.  It thus
depends on the values of &lt;code&gt;getMinimalDaysInFirstWeek()&lt;/code&gt;,
&lt;code&gt;getFirstDayOfWeek()&lt;/code&gt;, and the day of the week of January 1.
Weeks between week 1 of one year and week 1 of the following year are
numbered sequentially from 2 to 52 or 53 (as needed).
&lt;p&gt;For example, January 1, 1998 was a Thursday.  If
&lt;code&gt;getFirstDayOfWeek()&lt;/code&gt; is &lt;code&gt;MONDAY&lt;/code&gt; and
&lt;code&gt;getMinimalDaysInFirstWeek()&lt;/code&gt; is 4 (these are the values
reflecting ISO 8601 and many national standards), then week 1 of 1998 starts
on December 29, 1997, and ends on January 4, 1998.  If, however,
&lt;code&gt;getFirstDayOfWeek()&lt;/code&gt; is &lt;code&gt;SUNDAY&lt;/code&gt;, then week 1 of 1998
starts on January 4, 1998, and ends on January 10, 1998; the first three days
of 1998 then are part of week 53 of 1997.

&lt;p&gt;Values calculated for the &lt;code&gt;WEEK_OF_MONTH&lt;/code&gt; field range from 0
to 6.  Week 1 of a month (the days with &lt;code&gt;WEEK_OF_MONTH =
1&lt;/code&gt;) is the earliest set of at least
&lt;code&gt;getMinimalDaysInFirstWeek()&lt;/code&gt; contiguous days in that month,
ending on the day before &lt;code&gt;getFirstDayOfWeek()&lt;/code&gt;.  Unlike
week 1 of a year, week 1 of a month may be shorter than 7 days, need
not start on &lt;code&gt;getFirstDayOfWeek()&lt;/code&gt;, and will not include days of
the previous month.  Days of a month before week 1 have a
&lt;code&gt;WEEK_OF_MONTH&lt;/code&gt; of 0.

&lt;p&gt;For example, if &lt;code&gt;getFirstDayOfWeek()&lt;/code&gt; is &lt;code&gt;SUNDAY&lt;/code&gt;
and &lt;code&gt;getMinimalDaysInFirstWeek()&lt;/code&gt; is 4, then the first week of
January 1998 is Sunday, January 4 through Saturday, January 10.  These days
have a &lt;code&gt;WEEK_OF_MONTH&lt;/code&gt; of 1.  Thursday, January 1 through
Saturday, January 3 have a &lt;code&gt;WEEK_OF_MONTH&lt;/code&gt; of 0.  If
&lt;code&gt;getMinimalDaysInFirstWeek()&lt;/code&gt; is changed to 3, then January 1
through January 3 have a &lt;code&gt;WEEK_OF_MONTH&lt;/code&gt; of 1.

&lt;p&gt;The &lt;code&gt;clear&lt;/code&gt; methods set calendar field(s)
undefined. &lt;code&gt;GregorianCalendar&lt;/code&gt; uses the following
default value for each calendar field if its value is undefined.

&lt;table cellpadding="0" cellspacing="3" border="0"
summary="GregorianCalendar default field values"
style="text-align: left; width: 66%;"&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;th style="vertical-align: top; background-color: rgb(204, 204, 255);
text-align: center;"&gt;Field&lt;br&gt;
&lt;/th&gt;
&lt;th style="vertical-align: top; background-color: rgb(204, 204, 255);
text-align: center;"&gt;Default Value&lt;br&gt;
&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="vertical-align: middle;"&gt;
&lt;code&gt;ERA&lt;br&gt;&lt;/code&gt;
&lt;/td&gt;
&lt;td style="vertical-align: middle;"&gt;
&lt;code&gt;AD&lt;br&gt;&lt;/code&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="vertical-align: middle; background-color: rgb(238, 238, 255);"&gt;
&lt;code&gt;YEAR&lt;br&gt;&lt;/code&gt;
&lt;/td&gt;
&lt;td style="vertical-align: middle; background-color: rgb(238, 238, 255);"&gt;
&lt;code&gt;1970&lt;br&gt;&lt;/code&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="vertical-align: middle;"&gt;
&lt;code&gt;MONTH&lt;br&gt;&lt;/code&gt;
&lt;/td&gt;
&lt;td style="vertical-align: middle;"&gt;
&lt;code&gt;JANUARY&lt;br&gt;&lt;/code&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="vertical-align: top; background-color: rgb(238, 238, 255);"&gt;
&lt;code&gt;DAY_OF_MONTH&lt;br&gt;&lt;/code&gt;
&lt;/td&gt;
&lt;td style="vertical-align: top; background-color: rgb(238, 238, 255);"&gt;
&lt;code&gt;1&lt;br&gt;&lt;/code&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="vertical-align: middle;"&gt;
&lt;code&gt;DAY_OF_WEEK&lt;br&gt;&lt;/code&gt;
&lt;/td&gt;
&lt;td style="vertical-align: middle;"&gt;
&lt;code&gt;the first day of week&lt;br&gt;&lt;/code&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="vertical-align: top; background-color: rgb(238, 238, 255);"&gt;
&lt;code&gt;WEEK_OF_MONTH&lt;br&gt;&lt;/code&gt;
&lt;/td&gt;
&lt;td style="vertical-align: top; background-color: rgb(238, 238, 255);"&gt;
&lt;code&gt;0&lt;br&gt;&lt;/code&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="vertical-align: top;"&gt;
&lt;code&gt;DAY_OF_WEEK_IN_MONTH&lt;br&gt;&lt;/code&gt;
&lt;/td&gt;
&lt;td style="vertical-align: top;"&gt;
&lt;code&gt;1&lt;br&gt;&lt;/code&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="vertical-align: middle; background-color: rgb(238, 238, 255);"&gt;
&lt;code&gt;AM_PM&lt;br&gt;&lt;/code&gt;
&lt;/td&gt;
&lt;td style="vertical-align: middle; background-color: rgb(238, 238, 255);"&gt;
&lt;code&gt;AM&lt;br&gt;&lt;/code&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="vertical-align: middle;"&gt;
&lt;code&gt;HOUR, HOUR_OF_DAY, MINUTE, SECOND, MILLISECOND&lt;br&gt;&lt;/code&gt;
&lt;/td&gt;
&lt;td style="vertical-align: middle;"&gt;
&lt;code&gt;0&lt;br&gt;&lt;/code&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;br&gt;Default values are not applicable for the fields not listed above.

&lt;p&gt;
&lt;strong&gt;Example:&lt;/strong&gt;
&lt;blockquote&gt;
&lt;pre&gt;
get the supported ids for GMT-08:00 (Pacific Standard Time)
String[] ids = TimeZone.getAvailableIDs(-8 * 60 * 60 * 1000);
if no ids were returned, something is wrong. get out.
if (ids.length == 0)
System.exit(0);

begin output
System.out.println("Current Time");

create a Pacific Standard Time time zone
SimpleTimeZone pdt = new SimpleTimeZone(-8 * 60 * 60 * 1000, ids[0]);

set up rules for daylight savings time
pdt.setStartRule(Calendar.APRIL, 1, Calendar.SUNDAY, 2 * 60 * 60 * 1000);
pdt.setEndRule(Calendar.OCTOBER, -1, Calendar.SUNDAY, 2 * 60 * 60 * 1000);

create a GregorianCalendar with the Pacific Daylight time zone
and the current date and time
Calendar calendar = new GregorianCalendar(pdt);
Date trialTime = new Date();
calendar.setTime(trialTime);

print out a bunch of interesting things
System.out.println("ERA: " + calendar.get(Calendar.ERA));
System.out.println("YEAR: " + calendar.get(Calendar.YEAR));
System.out.println("MONTH: " + calendar.get(Calendar.MONTH));
System.out.println("WEEK_OF_YEAR: " + calendar.get(Calendar.WEEK_OF_YEAR));
System.out.println("WEEK_OF_MONTH: " + calendar.get(Calendar.WEEK_OF_MONTH));
System.out.println("DATE: " + calendar.get(Calendar.DATE));
System.out.println("DAY_OF_MONTH: " + calendar.get(Calendar.DAY_OF_MONTH));
System.out.println("DAY_OF_YEAR: " + calendar.get(Calendar.DAY_OF_YEAR));
System.out.println("DAY_OF_WEEK: " + calendar.get(Calendar.DAY_OF_WEEK));
System.out.println("DAY_OF_WEEK_IN_MONTH: "
+ calendar.get(Calendar.DAY_OF_WEEK_IN_MONTH));
System.out.println("AM_PM: " + calendar.get(Calendar.AM_PM));
System.out.println("HOUR: " + calendar.get(Calendar.HOUR));
System.out.println("HOUR_OF_DAY: " + calendar.get(Calendar.HOUR_OF_DAY));
System.out.println("MINUTE: " + calendar.get(Calendar.MINUTE));
System.out.println("SECOND: " + calendar.get(Calendar.SECOND));
System.out.println("MILLISECOND: " + calendar.get(Calendar.MILLISECOND));
System.out.println("ZONE_OFFSET: "
+ (calendar.get(Calendar.ZONE_OFFSET)/(60*60*1000)));
System.out.println("DST_OFFSET: "
+ (calendar.get(Calendar.DST_OFFSET)/(60*60*1000)));
System.out.println("Current Time, with hour reset to 3");
calendar.clear(Calendar.HOUR_OF_DAY); // so doesn't override
calendar.set(Calendar.HOUR, 3);
System.out.println("ERA: " + calendar.get(Calendar.ERA));
System.out.println("YEAR: " + calendar.get(Calendar.YEAR));
System.out.println("MONTH: " + calendar.get(Calendar.MONTH));
System.out.println("WEEK_OF_YEAR: " + calendar.get(Calendar.WEEK_OF_YEAR));
System.out.println("WEEK_OF_MONTH: " + calendar.get(Calendar.WEEK_OF_MONTH));
System.out.println("DATE: " + calendar.get(Calendar.DATE));
System.out.println("DAY_OF_MONTH: " + calendar.get(Calendar.DAY_OF_MONTH));
System.out.println("DAY_OF_YEAR: " + calendar.get(Calendar.DAY_OF_YEAR));
System.out.println("DAY_OF_WEEK: " + calendar.get(Calendar.DAY_OF_WEEK));
System.out.println("DAY_OF_WEEK_IN_MONTH: "
+ calendar.get(Calendar.DAY_OF_WEEK_IN_MONTH));
System.out.println("AM_PM: " + calendar.get(Calendar.AM_PM));
System.out.println("HOUR: " + calendar.get(Calendar.HOUR));
System.out.println("HOUR_OF_DAY: " + calendar.get(Calendar.HOUR_OF_DAY));
System.out.println("MINUTE: " + calendar.get(Calendar.MINUTE));
System.out.println("SECOND: " + calendar.get(Calendar.SECOND));
System.out.println("MILLISECOND: " + calendar.get(Calendar.MILLISECOND));
System.out.println("ZONE_OFFSET: "
+ (calendar.get(Calendar.ZONE_OFFSET)/(60*60*1000))); // in hours
System.out.println("DST_OFFSET: "
+ (calendar.get(Calendar.DST_OFFSET)/(60*60*1000))); // in hours
&lt;/pre&gt;
&lt;/blockquote&gt;

@see          TimeZone
@version      1.84
@author David Goldsmith, Mark Davis, Chen-Lieh Huang, Alan Liu
@since JDK1.1
</documentation><generalization humanName="Generalization"><generalization classType="Generalization" humanType="Generalization" icon="index_files/icon_generalization_99042020.jpg" isRelationship="true" refid="_10_5_622020d_1132928322560_200812_14939"/></generalization><isAbstract humanName="Is Abstract" mode="s,e">false</isAbstract><isActive humanName="Is Active" mode="s,e">false</isActive><isFinalSpecialization humanName="Is Final Specialization" mode="e">false</isFinalSpecialization><isLeaf humanName="Is Leaf" mode="e">false</isLeaf><name humanName="Name" mode="s,e">GregorianCalendar</name><namespace classType="Package" humanName="Namespace" humanType="Package" icon="index_files/icon_package_2000410491.jpg" name="util" refid="_9_5_f720368_1110473547799_165814_19031"/><ownedComment humanName="Owned Comment"><comment classType="Comment" humanType="Comment" icon="index_files/icon_comment_2051026490.jpg" refid="_10_5_622020d_1132928313206_156384_7253"/></ownedComment><ownedElement humanName="Owned Element"><generalization classType="Generalization" humanType="Generalization" icon="index_files/icon_generalization_99042020.jpg" isRelationship="true" refid="_10_5_622020d_1132928322560_200812_14939"/><comment classType="Comment" humanType="Comment" icon="index_files/icon_comment_2051026490.jpg" refid="_10_5_622020d_1132928313206_156384_7253"/></ownedElement><owner classType="Package" humanName="Owner" humanType="Package" icon="index_files/icon_package_2000410491.jpg" mode="s,e" name="util" refid="_9_5_f720368_1110473547799_165814_19031"/><owningPackage classType="Package" humanName="Owning Package" humanType="Package" icon="index_files/icon_package_2000410491.jpg" name="util" refid="_9_5_f720368_1110473547799_165814_19031"/><package classType="Package" humanName="Package" humanType="Package" icon="index_files/icon_package_2000410491.jpg" name="util" refid="_9_5_f720368_1110473547799_165814_19031"/><qualifiedName humanName="Qualified Name" mode="e">JDK 5.0 Classes::java::util::GregorianCalendar</qualifiedName><superClass humanName="Super Class"><class classType="Class" humanType="Class" icon="index_files/icon_class_303957224.jpg" name="Calendar" refid="_9_5_f720368_1110473546706_973459_8839"/></superClass><TO_DO humanName="To Do" mode="s,e"/><visibility humanName="Visibility" mode="e">public</visibility></class></magicdraw>