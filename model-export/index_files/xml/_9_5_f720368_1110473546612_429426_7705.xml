<?xml version="1.0" encoding="UTF-8"?><magicdraw><class classType="Class" humanType="Class" icon="index_files/icon_class_1555793073.jpg" id="_9_5_f720368_1110473546612_429426_7705"><documentation humanName="Documentation" mode="standard">An instance of &lt;code&gt;ThreadDeath&lt;/code&gt; is thrown in the victim
thread when the &lt;code&gt;stop&lt;/code&gt; method with zero arguments in
class &lt;code&gt;Thread&lt;/code&gt; is called.
&lt;p&gt;
An application should catch instances of this class only if it
must clean up after being terminated asynchronously. If
&lt;code&gt;ThreadDeath&lt;/code&gt; is caught by a method, it is important
that it be rethrown so that the thread actually dies.
&lt;p&gt;
The top-level error handler does not print out a message if
&lt;code&gt;ThreadDeath&lt;/code&gt; is never caught.
&lt;p&gt;
The class &lt;code&gt;ThreadDeath&lt;/code&gt; is specifically a subclass of
&lt;code&gt;Error&lt;/code&gt; rather than &lt;code&gt;Exception&lt;/code&gt;, even though
it is a "normal occurrence", because many applications
catch all occurrences of &lt;code&gt;Exception&lt;/code&gt; and then discard
the exception.

@author unascribed
@version 1.15, 12/19/03
@see     java.lang.Thread#stop()
@since   JDK1.0
</documentation><generalization humanName="Generalization"><generalization classType="Generalization" humanType="Generalization" icon="index_files/icon_generalization_99042020.jpg" isRelationship="true" refid="_10_5_622020d_1132928321699_456059_13760"/></generalization><isAbstract humanName="Is Abstract" mode="s,e">false</isAbstract><isActive humanName="Is Active" mode="s,e">false</isActive><isFinalSpecialization humanName="Is Final Specialization" mode="e">false</isFinalSpecialization><isLeaf humanName="Is Leaf" mode="e">false</isLeaf><name humanName="Name" mode="s,e">ThreadDeath</name><namespace classType="Package" humanName="Namespace" humanType="Package" icon="index_files/icon_package_2000410491.jpg" name="lang" refid="_9_5_f720368_1110473547503_52464_17780"/><ownedComment humanName="Owned Comment"><comment classType="Comment" humanType="Comment" icon="index_files/icon_comment_2051026490.jpg" refid="_10_5_622020d_1132928308179_813059_5181"/></ownedComment><ownedElement humanName="Owned Element"><generalization classType="Generalization" humanType="Generalization" icon="index_files/icon_generalization_99042020.jpg" isRelationship="true" refid="_10_5_622020d_1132928321699_456059_13760"/><comment classType="Comment" humanType="Comment" icon="index_files/icon_comment_2051026490.jpg" refid="_10_5_622020d_1132928308179_813059_5181"/></ownedElement><owner classType="Package" humanName="Owner" humanType="Package" icon="index_files/icon_package_2000410491.jpg" mode="s,e" name="lang" refid="_9_5_f720368_1110473547503_52464_17780"/><owningPackage classType="Package" humanName="Owning Package" humanType="Package" icon="index_files/icon_package_2000410491.jpg" name="lang" refid="_9_5_f720368_1110473547503_52464_17780"/><package classType="Package" humanName="Package" humanType="Package" icon="index_files/icon_package_2000410491.jpg" name="lang" refid="_9_5_f720368_1110473547503_52464_17780"/><qualifiedName humanName="Qualified Name" mode="e">JDK 5.0 Classes::java::lang::ThreadDeath</qualifiedName><superClass humanName="Super Class"><class classType="Class" humanType="Class" icon="index_files/icon_class_1555793073.jpg" name="Error" refid="_9_5_f720368_1110473546612_180337_7597"/></superClass><TO_DO humanName="To Do" mode="s,e"/><visibility humanName="Visibility" mode="e">public</visibility></class></magicdraw>