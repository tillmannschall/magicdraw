<?xml version="1.0" encoding="UTF-8"?><magicdraw><comment classType="Comment" humanType="Comment" icon="index_files/icon_comment_841774062.jpg" id="_10_5_622020d_1132928310142_395071_6535" refElementId="_10_5_622020d_1132928310142_395071_6535"><annotatedElement humanName="Annotated Element" mode="s,e"><class classType="Class" humanType="Class" icon="index_files/icon_class_555864569.jpg" name="CountDownLatch" refElementId="_10_5_622020d_1132928310142_391749_6531" refid="_10_5_622020d_1132928310142_391749_6531"/></annotatedElement><body humanName="Body" mode="s,e">A synchronization aid that allows one or more threads to wait until
a set of operations being performed in other threads completes.

&lt;p&gt;A &lt;tt&gt;CountDownLatch&lt;/tt&gt; is initialized with a given
&lt;em&gt;count&lt;/em&gt;.  The {@link #await await} methods block until the current
{@link #getCount count} reaches zero due to invocations of the
{@link #countDown} method, after which all waiting threads are
released and any subsequent invocations of {@link #await await} return
immediately. This is a one-shot phenomenon -- the count cannot be
reset.  If you need a version that resets the count, consider using
a {@link CyclicBarrier}.

&lt;p&gt;A &lt;tt&gt;CountDownLatch&lt;/tt&gt; is a versatile synchronization tool
and can be used for a number of purposes.  A
&lt;tt&gt;CountDownLatch&lt;/tt&gt; initialized with a count of one serves as a
simple on/off latch, or gate: all threads invoking {@link #await await}
wait at the gate until it is opened by a thread invoking {@link
#countDown}.  A &lt;tt&gt;CountDownLatch&lt;/tt&gt; initialized to &lt;em&gt;N&lt;/em&gt;
can be used to make one thread wait until &lt;em&gt;N&lt;/em&gt; threads have
completed some action, or some action has been completed N times.
&lt;p&gt;A useful property of a &lt;tt&gt;CountDownLatch&lt;/tt&gt; is that it
doesn't require that threads calling &lt;tt&gt;countDown&lt;/tt&gt; wait for
the count to reach zero before proceeding, it simply prevents any
thread from proceeding past an {@link #await await} until all
threads could pass.

&lt;p&gt;&lt;b&gt;Sample usage:&lt;/b&gt; Here is a pair of classes in which a group
of worker threads use two countdown latches:
&lt;ul&gt;
&lt;li&gt;The first is a start signal that prevents any worker from proceeding
until the driver is ready for them to proceed;
&lt;li&gt;The second is a completion signal that allows the driver to wait
until all workers have completed.
&lt;/ul&gt;

&lt;pre&gt;
class Driver { // ...
void main() throws InterruptedException {
CountDownLatch startSignal = new CountDownLatch(1);
CountDownLatch doneSignal = new CountDownLatch(N);

for (int i = 0; i &lt; N; ++i) // create and start threads
new Thread(new Worker(startSignal, doneSignal)).start();

doSomethingElse();            // don't let run yet
startSignal.countDown();      // let all threads proceed
doSomethingElse();
doneSignal.await();           // wait for all to finish
}
}

class Worker implements Runnable {
private final CountDownLatch startSignal;
private final CountDownLatch doneSignal;
Worker(CountDownLatch startSignal, CountDownLatch doneSignal) {
this.startSignal = startSignal;
this.doneSignal = doneSignal;
}
public void run() {
try {
startSignal.await();
doWork();
doneSignal.countDown();
} catch (InterruptedException ex) {} // return;
}

void doWork() { ... }
}

&lt;/pre&gt;

&lt;p&gt;Another typical usage would be to divide a problem into N parts,
describe each part with a Runnable that executes that portion and
counts down on the latch, and queue all the Runnables to an
Executor.  When all sub-parts are complete, the coordinating thread
will be able to pass through await. (When threads must repeatedly
count down in this way, instead use a {@link CyclicBarrier}.)

&lt;pre&gt;
class Driver2 { // ...
void main() throws InterruptedException {
CountDownLatch doneSignal = new CountDownLatch(N);
Executor e = ...

for (int i = 0; i &lt; N; ++i) // create and start threads
e.execute(new WorkerRunnable(doneSignal, i));

doneSignal.await();           // wait for all to finish
}
}

class WorkerRunnable implements Runnable {
private final CountDownLatch doneSignal;
private final int i;
WorkerRunnable(CountDownLatch doneSignal, int i) {
this.doneSignal = doneSignal;
this.i = i;
}
public void run() {
try {
doWork(i);
doneSignal.countDown();
} catch (InterruptedException ex) {} // return;
}

void doWork() { ... }
}

&lt;/pre&gt;

@since 1.5
@author Doug Lea
</body><documentation humanName="Documentation"/><owner classType="Class" humanName="Owner" humanType="Class" icon="index_files/icon_class_555864569.jpg" mode="s,e" name="CountDownLatch" refElementId="_10_5_622020d_1132928310142_391749_6531" refid="_10_5_622020d_1132928310142_391749_6531"/><owningElement classType="Class" humanName="Owning Element" humanType="Class" icon="index_files/icon_class_555864569.jpg" name="CountDownLatch" refElementId="_10_5_622020d_1132928310142_391749_6531" refid="_10_5_622020d_1132928310142_391749_6531"/><TO_DO humanName="To Do" mode="s,e"/></comment></magicdraw>