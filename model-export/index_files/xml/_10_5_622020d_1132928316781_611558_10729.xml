<?xml version="1.0" encoding="UTF-8"?><magicdraw><comment classType="Comment" humanType="Comment" icon="index_files/icon_comment_841774062.jpg" id="_10_5_622020d_1132928316781_611558_10729" refElementId="_10_5_622020d_1132928316781_611558_10729"><annotatedElement humanName="Annotated Element" mode="s,e"><interface classType="Interface" humanType="Interface" icon="index_files/icon_interface_1046467249.jpg" name="FilteredRowSet" refElementId="_10_5_622020d_1132928316781_354065_10727" refid="_10_5_622020d_1132928316781_354065_10727"/></annotatedElement><body humanName="Body" mode="s,e">The standard interface that all standard implementations of
&lt;code&gt;FilteredRowSet&lt;/code&gt; must implement. The &lt;code&gt;FilteredRowSetImpl&lt;/code&gt; class
provides the reference implementation which may be extended if required.
Alternatively, a vendor is free to implement its own version
by implementing this interface.

&lt;h3&gt;1.0 Background&lt;/h3&gt;

There are occasions when a &lt;code&gt;RowSet&lt;/code&gt; object has a need to provide a degree
of filtering to its contents. One possible solution is to provide
a query language for all standard &lt;code&gt;RowSet&lt;/code&gt; implementations; however,
this is an impractical approach for lightweight components such as disconnected
&lt;code&gt;RowSet&lt;/code&gt;
objects. The &lt;code&gt;FilteredRowSet&lt;/code&gt; interface seeks to address this need
without supplying a heavyweight query language along with the processing that
such a query language would require.
&lt;p&gt;
A JDBC &lt;code&gt;FilteredRowSet&lt;/code&gt; standard implementation implements the
&lt;code&gt;RowSet&lt;/code&gt; interfaces and extends the
&lt;code&gt;CachedRowSet&lt;/code&gt;&lt;sup&gt;&lt;font size=-2&gt;TM&lt;/font&gt;&lt;/sup&gt; class. The
&lt;code&gt;CachedRowSet&lt;/code&gt; class provides a set of protected cursor manipulation
methods, which a &lt;code&gt;FilteredRowSet&lt;/code&gt; implementation can override
to supply filtering support.

&lt;h3&gt;2.0 Predicate Sharing&lt;/h3&gt;

If a &lt;code&gt;FilteredRowSet&lt;/code&gt; implementation is shared using the
inherited &lt;code&gt;createShared&lt;/code&gt; method in parent interfaces, the
&lt;code&gt;Predicate&lt;/code&gt; should be shared without modification by all
&lt;code&gt;FilteredRowSet&lt;/code&gt; instance clones.

&lt;h3&gt;3.0 Usage&lt;/h3&gt;
&lt;p&gt;
By implementing a &lt;code&gt;Predicate&lt;/code&gt; (see example in &lt;a href="Predicate.html"&gt;Predicate&lt;/a&gt;
class JavaDoc), a &lt;code&gt;FilteredRowSet&lt;/code&gt; could then be used as described
below.
&lt;P&gt;
&lt;code&gt;
&lt;pre&gt;
FilteredRowSet frs = new FilteredRowSetImpl();
frs.populate(rs);

Range name = new Range("Alpha", "Bravo", "columnName");
frs.setFilter(name);

frs.next() // only names from "Alpha" to "Bravo" will be returned
&lt;/pre&gt;
&lt;/code&gt;
In the example above, we initialize a &lt;code&gt;Range&lt;/code&gt; object which
implements the &lt;code&gt;Predicate&lt;/code&gt; interface. This object expresses
the following constraints: All rows outputted or modified from this
&lt;code&gt;FilteredRowSet&lt;/code&gt; object must fall between the values 'Alpha' and
'Bravo' both values inclusive, in the column 'columnName'. If a filter is
applied to a &lt;code&gt;FilteredRowSet&lt;/code&gt; object that contains no data that
falls within the range of the filter, no rows are returned.
&lt;p&gt;
This framework allows multiple classes implementing predicates to be
used in combination to achieved the required filtering result with
out the need for query language processing.
&lt;p&gt;
&lt;h3&gt;4.0 Updating a &lt;code&gt;FilteredRowSet&lt;/code&gt; Object&lt;/h3&gt;
The predicate set on a &lt;code&gt;FilteredRowSet&lt;/code&gt; object
applies a criterion on all rows in a
&lt;code&gt;RowSet&lt;/code&gt; object to manage a subset of rows in a &lt;code&gt;RowSet&lt;/code&gt;
object. This criterion governs the subset of rows that are visible and also
defines which rows can be modified, deleted or inserted.
&lt;p&gt;
Therefore, the predicate set on a &lt;code&gt;FilteredRowSet&lt;/code&gt; object must be
considered as bi-directional and the set criterion as the gating mechanism
for all views and updates to the &lt;code&gt;FilteredRowSet&lt;/code&gt; object. Any attempt
to update the &lt;code&gt;FilteredRowSet&lt;/code&gt; that violates the criterion will
result in a &lt;code&gt;SQLException&lt;/code&gt; object being thrown.
&lt;p&gt;
The &lt;code&gt;FilteredRowSet&lt;/code&gt; range criterion can be modified by applying
a new &lt;code&gt;Predicate&lt;/code&gt; object to the &lt;code&gt;FilteredRowSet&lt;/code&gt;
instance at any time. This is  possible if no additional references to the
&lt;code&gt;FilteredRowSet&lt;/code&gt; object are detected. A new filter has has an
immediate effect on criterion enforcement within the
&lt;code&gt;FilteredRowSet&lt;/code&gt; object, and all subsequent views and updates will be
subject to similar enforcement.
&lt;p&gt;
&lt;h3&gt;5.0 Behavior of Rows Outside the Filter&lt;/h3&gt;
Rows that fall outside of the filter set on a &lt;code&gt;FilteredRowSet&lt;/code&gt;
object cannot be modified until the filter is removed or a
new filter is applied.
&lt;p&gt;
Furthermore, only rows that fall within the bounds of a filter will be
synchronized with the data source.

@author Jonathan Bruce
</body><documentation humanName="Documentation"/><owner classType="Interface" humanName="Owner" humanType="Interface" icon="index_files/icon_interface_1046467249.jpg" mode="s,e" name="FilteredRowSet" refElementId="_10_5_622020d_1132928316781_354065_10727" refid="_10_5_622020d_1132928316781_354065_10727"/><owningElement classType="Interface" humanName="Owning Element" humanType="Interface" icon="index_files/icon_interface_1046467249.jpg" name="FilteredRowSet" refElementId="_10_5_622020d_1132928316781_354065_10727" refid="_10_5_622020d_1132928316781_354065_10727"/><TO_DO humanName="To Do" mode="s,e"/></comment></magicdraw>