<?xml version="1.0" encoding="UTF-8"?><magicdraw><comment classType="Comment" humanType="Comment" icon="index_files/icon_comment_2051026490.jpg" id="_10_5_622020d_1132928307057_778312_4571"><annotatedElement humanName="Annotated Element" mode="s,e"><class classType="Class" humanType="Class" icon="index_files/icon_class_1555793073.jpg" name="FileDescriptor" refid="_9_5_f720368_1110473546596_562419_7385"/></annotatedElement><body humanName="Body" mode="s,e">Instances of the file descriptor class serve as an opaque handle
to the underlying machine-specific structure representing an open
file, an open socket, or another source or sink of bytes. The
main practical use for a file descriptor is to create a
&lt;code&gt;FileInputStream&lt;/code&gt; or &lt;code&gt;FileOutputStream&lt;/code&gt; to
contain it.
&lt;p&gt;
Applications should not create their own file descriptors.

@author  Pavani Diwanji
@version 1.3, 12/19/03
@see	    java.io.FileInputStream
@see	    java.io.FileOutputStream
@since   JDK1.0
</body><documentation humanName="Documentation"/><owner classType="Class" humanName="Owner" humanType="Class" icon="index_files/icon_class_1555793073.jpg" mode="s,e" name="FileDescriptor" refid="_9_5_f720368_1110473546596_562419_7385"/><owningElement classType="Class" humanName="Owning Element" humanType="Class" icon="index_files/icon_class_1555793073.jpg" name="FileDescriptor" refid="_9_5_f720368_1110473546596_562419_7385"/><TO_DO humanName="To Do" mode="s,e"/></comment></magicdraw>