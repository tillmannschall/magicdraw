<?xml version="1.0" encoding="UTF-8"?><magicdraw><comment classType="Comment" humanType="Comment" icon="index_files/icon_comment_841774062.jpg" id="_10_5_622020d_1132928306767_264912_4362" refElementId="_10_5_622020d_1132928306767_264912_4362"><annotatedElement humanName="Annotated Element" mode="s,e"><class classType="Class" humanType="Class" icon="index_files/icon_class_555864569.jpg" name="Window" refElementId="_9_5_f720368_1110473546596_890326_7145" refid="_9_5_f720368_1110473546596_890326_7145"/></annotatedElement><body humanName="Body" mode="s,e">A &lt;code&gt;Window&lt;/code&gt; object is a top-level window with no borders and no
menubar.
The default layout for a window is &lt;code&gt;BorderLayout&lt;/code&gt;.
&lt;p&gt;
A window must have either a frame, dialog, or another window defined as its
owner when it's constructed.
&lt;p&gt;
In a multi-screen environment, you can create a &lt;code&gt;Window&lt;/code&gt;
on a different screen device by constructing the &lt;code&gt;Window&lt;/code&gt;
with {@link #Window(Window, GraphicsConfiguration)}.  The
&lt;code&gt;GraphicsConfiguration&lt;/code&gt; object is one of the
&lt;code&gt;GraphicsConfiguration&lt;/code&gt; objects of the target screen device.
&lt;p&gt;
In a virtual device multi-screen environment in which the desktop
area could span multiple physical screen devices, the bounds of all
configurations are relative to the virtual device coordinate system.
The origin of the virtual-coordinate system is at the upper left-hand
corner of the primary physical screen.  Depending on the location of
the primary screen in the virtual device, negative coordinates are
possible, as shown in the following figure.
&lt;p&gt;
&lt;img src="doc-files/MultiScreen.gif"
alt="Diagram shows virtual device containing 4 physical screens. Primary physical screen shows coords (0,0), other screen shows (-80,-100)."
ALIGN=center HSPACE=10 VSPACE=7&gt;
&lt;p&gt;
In such an environment, when calling &lt;code&gt;setLocation&lt;/code&gt;,
you must pass a virtual coordinate to this method.  Similarly,
calling &lt;code&gt;getLocationOnScreen&lt;/code&gt; on a &lt;code&gt;Window&lt;/code&gt; returns
virtual device coordinates.  Call the &lt;code&gt;getBounds&lt;/code&gt; method
of a &lt;code&gt;GraphicsConfiguration&lt;/code&gt; to find its origin in the virtual
coordinate system.
&lt;p&gt;
The following code sets the location of a &lt;code&gt;Window&lt;/code&gt;
at (10, 10) relative to the origin of the physical screen
of the corresponding &lt;code&gt;GraphicsConfiguration&lt;/code&gt;.  If the
bounds of the &lt;code&gt;GraphicsConfiguration&lt;/code&gt; is not taken
into account, the &lt;code&gt;Window&lt;/code&gt; location would be set
at (10, 10) relative to the virtual-coordinate system and would appear
on the primary physical screen, which might be different from the
physical screen of the specified &lt;code&gt;GraphicsConfiguration&lt;/code&gt;.

&lt;pre&gt;
Window w = new Window(Window owner, GraphicsConfiguration gc);
Rectangle bounds = gc.getBounds();
w.setLocation(10 + bounds.x, 10 + bounds.y);
&lt;/pre&gt;

&lt;p&gt;
Note: the location and size of top-level windows (including
&lt;code&gt;Window&lt;/code&gt;s, &lt;code&gt;Frame&lt;/code&gt;s, and &lt;code&gt;Dialog&lt;/code&gt;s)
are under the control of the desktop's window management system.
Calls to &lt;code&gt;setLocation&lt;/code&gt;, &lt;code&gt;setSize&lt;/code&gt;, and
&lt;code&gt;setBounds&lt;/code&gt; are requests (not directives) which are
forwarded to the window management system.  Every effort will be
made to honor such requests.  However, in some cases the window
management system may ignore such requests, or modify the requested
geometry in order to place and size the &lt;code&gt;Window&lt;/code&gt; in a way
that more closely matches the desktop settings.

Due to the asynchronous nature of native event handling, the results
returned by &lt;code&gt;getBounds&lt;/code&gt;, &lt;code&gt;getLocation&lt;/code&gt;,
&lt;code&gt;getLocationOnScreen&lt;/code&gt;, and &lt;code&gt;getSize&lt;/code&gt; might not
reflect the actual geometry of the Window on screen until the last
request has been processed.  During the processing of subsequent
requests these values might change accordingly while the window
management system fulfills the requests.

&lt;p&gt;
Windows are capable of generating the following WindowEvents:
WindowOpened, WindowClosed, WindowGainedFocus, WindowLostFocus.

@version 	1.208, 06/28/04
@author 	Sami Shaio
@author 	Arthur van Hoff
@see WindowEvent
@see #addWindowListener
@see java.awt.BorderLayout
@since       JDK1.0
</body><documentation humanName="Documentation"/><owner classType="Class" humanName="Owner" humanType="Class" icon="index_files/icon_class_555864569.jpg" mode="s,e" name="Window" refElementId="_9_5_f720368_1110473546596_890326_7145" refid="_9_5_f720368_1110473546596_890326_7145"/><owningElement classType="Class" humanName="Owning Element" humanType="Class" icon="index_files/icon_class_555864569.jpg" name="Window" refElementId="_9_5_f720368_1110473546596_890326_7145" refid="_9_5_f720368_1110473546596_890326_7145"/><TO_DO humanName="To Do" mode="s,e"/></comment></magicdraw>