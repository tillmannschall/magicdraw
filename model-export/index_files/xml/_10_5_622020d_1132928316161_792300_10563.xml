<?xml version="1.0" encoding="UTF-8"?><magicdraw><comment classType="Comment" humanType="Comment" icon="index_files/icon_comment_841774062.jpg" id="_10_5_622020d_1132928316161_792300_10563" refElementId="_10_5_622020d_1132928316161_792300_10563"><annotatedElement humanName="Annotated Element" mode="s,e"><class classType="Class" humanType="Class" icon="index_files/icon_class_795627831.jpg" name="MidiMessage" refElementId="_9_5_f720368_1110473546737_33565_9669" refid="_9_5_f720368_1110473546737_33565_9669"/></annotatedElement><body humanName="Body" mode="s,e">&lt;code&gt;MidiMessage&lt;/code&gt; is the base class for MIDI messages.  They include
not only the standard MIDI messages that a synthesizer can respond to, but also
"meta-events" that can be used by sequencer programs.  There are meta-events
for such information as lyrics, copyrights, tempo indications, time and key
signatures, markers, etc.  For more information, see the Standard MIDI Files 1.0
specification, which is part of the Complete MIDI 1.0 Detailed Specification
published by the MIDI Manufacturer's Association
(&lt;a href = http://www.midi.org&gt;http://www.midi.org&lt;/a&gt;).
&lt;p&gt;
The base &lt;code&gt;MidiMessage&lt;/code&gt; class provides access to three types of
information about a MIDI message:
&lt;ul&gt;
&lt;li&gt;The messages's status byte&lt;/li&gt;
&lt;li&gt;The total length of the message in bytes (the status byte plus any data bytes)&lt;/li&gt;
&lt;li&gt;A byte array containing the complete message&lt;/li&gt;
&lt;/ul&gt;

&lt;code&gt;MidiMessage&lt;/code&gt; includes methods to get, but not set, these values.
Setting them is a subclass responsibility.
&lt;p&gt;
&lt;a name="integersVsBytes"&gt;&lt;/a&gt;
The MIDI standard expresses MIDI data in bytes.  However, because
Java&lt;sup&gt;TM&lt;/sup&gt; uses signed bytes, the Java Sound API uses integers
instead of bytes when expressing MIDI data.  For example, the
{@link #getStatus()} method of
&lt;code&gt;MidiMessage&lt;/code&gt; returns MIDI status bytes as integers.  If you are
processing MIDI data that originated outside Java Sound and now
is encoded as signed bytes, the bytes can
can be converted to integers using this conversion:
&lt;center&gt;&lt;code&gt;int i = (int)(byte &amp; 0xFF)&lt;/code&gt;&lt;/center&gt;
&lt;p&gt;
If you simply need to pass a known MIDI byte value as a method parameter,
it can be expressed directly as an integer, using (for example) decimal or
hexidecimal notation.  For instance, to pass the "active sensing" status byte
as the first argument to ShortMessage's
{@link ShortMessage#setMessage(int) setMessage(int)}
method, you can express it as 254 or 0xFE.

@see Track
@see Sequence
@see Receiver

@version 1.29, 03/12/19
@author David Rivas
@author Kara Kytle
</body><documentation humanName="Documentation"/><owner classType="Class" humanName="Owner" humanType="Class" icon="index_files/icon_class_795627831.jpg" mode="s,e" name="MidiMessage" refElementId="_9_5_f720368_1110473546737_33565_9669" refid="_9_5_f720368_1110473546737_33565_9669"/><owningElement classType="Class" humanName="Owning Element" humanType="Class" icon="index_files/icon_class_795627831.jpg" name="MidiMessage" refElementId="_9_5_f720368_1110473546737_33565_9669" refid="_9_5_f720368_1110473546737_33565_9669"/><TO_DO humanName="To Do" mode="s,e"/></comment></magicdraw>