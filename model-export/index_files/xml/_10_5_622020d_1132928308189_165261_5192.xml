<?xml version="1.0" encoding="UTF-8"?><magicdraw><comment classType="Comment" humanType="Comment" icon="index_files/icon_comment_2051026490.jpg" id="_10_5_622020d_1132928308189_165261_5192"><annotatedElement humanName="Annotated Element" mode="s,e"><class classType="Class" humanType="Class" icon="index_files/icon_class_1555793073.jpg" name="Throwable" refid="_9_5_f720368_1110473546612_726183_7711"/></annotatedElement><body humanName="Body" mode="s,e">The &lt;code&gt;Throwable&lt;/code&gt; class is the superclass of all errors and
exceptions in the Java language. Only objects that are instances of this
class (or one of its subclasses) are thrown by the Java Virtual Machine or
can be thrown by the Java &lt;code&gt;throw&lt;/code&gt; statement. Similarly, only
this class or one of its subclasses can be the argument type in a
&lt;code&gt;catch&lt;/code&gt; clause.

&lt;p&gt;Instances of two subclasses, {@link java.lang.Error} and
{@link java.lang.Exception}, are conventionally used to indicate
that exceptional situations have occurred. Typically, these instances
are freshly created in the context of the exceptional situation so
as to include relevant information (such as stack trace data).

&lt;p&gt;A throwable contains a snapshot of the execution stack of its thread at
the time it was created. It can also contain a message string that gives
more information about the error. Finally, it can contain a &lt;i&gt;cause&lt;/i&gt;:
another throwable that caused this throwable to get thrown.  The cause
facility is new in release 1.4.  It is also known as the &lt;i&gt;chained
exception&lt;/i&gt; facility, as the cause can, itself, have a cause, and so on,
leading to a "chain" of exceptions, each caused by another.

&lt;p&gt;One reason that a throwable may have a cause is that the class that
throws it is built atop a lower layered abstraction, and an operation on
the upper layer fails due to a failure in the lower layer.  It would be bad
design to let the throwable thrown by the lower layer propagate outward, as
it is generally unrelated to the abstraction provided by the upper layer.
Further, doing so would tie the API of the upper layer to the details of
its implementation, assuming the lower layer's exception was a checked
exception.  Throwing a "wrapped exception" (i.e., an exception containing a
cause) allows the upper layer to communicate the details of the failure to
its caller without incurring either of these shortcomings.  It preserves
the flexibility to change the implementation of the upper layer without
changing its API (in particular, the set of exceptions thrown by its
methods).

&lt;p&gt;A second reason that a throwable may have a cause is that the method
that throws it must conform to a general-purpose interface that does not
permit the method to throw the cause directly.  For example, suppose
a persistent collection conforms to the {@link java.util.Collection
Collection} interface, and that its persistence is implemented atop
&lt;tt&gt;java.io&lt;/tt&gt;.  Suppose the internals of the &lt;tt&gt;put&lt;/tt&gt; method
can throw an {@link java.io.IOException IOException}.  The implementation
can communicate the details of the &lt;tt&gt;IOException&lt;/tt&gt; to its caller
while conforming to the &lt;tt&gt;Collection&lt;/tt&gt; interface by wrapping the
&lt;tt&gt;IOException&lt;/tt&gt; in an appropriate unchecked exception.  (The
specification for the persistent collection should indicate that it is
capable of throwing such exceptions.)

&lt;p&gt;A cause can be associated with a throwable in two ways: via a
constructor that takes the cause as an argument, or via the
{@link #initCause(Throwable)} method.  New throwable classes that
wish to allow causes to be associated with them should provide constructors
that take a cause and delegate (perhaps indirectly) to one of the
&lt;tt&gt;Throwable&lt;/tt&gt; constructors that takes a cause.  For example:
&lt;pre&gt;
try {
lowLevelOp();
} catch (LowLevelException le) {
throw new HighLevelException(le);  // Chaining-aware constructor
}
&lt;/pre&gt;
Because the &lt;tt&gt;initCause&lt;/tt&gt; method is public, it allows a cause to be
associated with any throwable, even a "legacy throwable" whose
implementation predates the addition of the exception chaining mechanism to
&lt;tt&gt;Throwable&lt;/tt&gt;. For example:
&lt;pre&gt;
try {
lowLevelOp();
} catch (LowLevelException le) {
throw (HighLevelException)
new HighLevelException().initCause(le);  // Legacy constructor
}
&lt;/pre&gt;

&lt;p&gt;Prior to release 1.4, there were many throwables that had their own
non-standard exception chaining mechanisms (
{@link ExceptionInInitializerError}, {@link ClassNotFoundException},
{@link java.lang.reflect.UndeclaredThrowableException},
{@link java.lang.reflect.InvocationTargetException},
{@link java.io.WriteAbortedException},
{@link java.security.PrivilegedActionException},
{@link java.awt.print.PrinterIOException},
{@link java.rmi.RemoteException} and
{@link javax.naming.NamingException}).
All of these throwables have been retrofitted to
use the standard exception chaining mechanism, while continuing to
implement their "legacy" chaining mechanisms for compatibility.

&lt;p&gt;Further, as of release 1.4, many general purpose &lt;tt&gt;Throwable&lt;/tt&gt;
classes (for example {@link Exception}, {@link RuntimeException},
{@link Error}) have been retrofitted with constructors that take
a cause.  This was not strictly necessary, due to the existence of the
&lt;tt&gt;initCause&lt;/tt&gt; method, but it is more convenient and expressive to
delegate to a constructor that takes a cause.

&lt;p&gt;By convention, class &lt;code&gt;Throwable&lt;/code&gt; and its subclasses have two
constructors, one that takes no arguments and one that takes a
&lt;code&gt;String&lt;/code&gt; argument that can be used to produce a detail message.
Further, those subclasses that might likely have a cause associated with
them should have two more constructors, one that takes a
&lt;code&gt;Throwable&lt;/code&gt; (the cause), and one that takes a
&lt;code&gt;String&lt;/code&gt; (the detail message) and a &lt;code&gt;Throwable&lt;/code&gt; (the
cause).

&lt;p&gt;Also introduced in release 1.4 is the {@link #getStackTrace()} method,
which allows programmatic access to the stack trace information that was
previously available only in text form, via the various forms of the
{@link #printStackTrace()} method.  This information has been added to the
&lt;i&gt;serialized representation&lt;/i&gt; of this class so &lt;tt&gt;getStackTrace&lt;/tt&gt;
and &lt;tt&gt;printStackTrace&lt;/tt&gt; will operate properly on a throwable that
was obtained by deserialization.

@author  unascribed
@author  Josh Bloch (Added exception chaining and programmatic access to
stack trace in 1.4.)
@version 1.53, 12/19/03
@since JDK1.0
</body><documentation humanName="Documentation"/><owner classType="Class" humanName="Owner" humanType="Class" icon="index_files/icon_class_1555793073.jpg" mode="s,e" name="Throwable" refid="_9_5_f720368_1110473546612_726183_7711"/><owningElement classType="Class" humanName="Owning Element" humanType="Class" icon="index_files/icon_class_1555793073.jpg" name="Throwable" refid="_9_5_f720368_1110473546612_726183_7711"/><TO_DO humanName="To Do" mode="s,e"/></comment></magicdraw>