<?xml version="1.0" encoding="UTF-8"?><magicdraw><comment classType="Comment" humanType="Comment" icon="index_files/icon_comment_2051026490.jpg" id="_10_5_622020d_1132928317583_122873_12023"><annotatedElement humanName="Annotated Element" mode="s,e"><class classType="Class" humanType="Class" icon="index_files/icon_class_1555793073.jpg" name="DefaultFormatterFactory" refid="_9_5_f720368_1110473546784_592144_10445"/></annotatedElement><body humanName="Body" mode="s,e">An implementation of
&lt;code&gt;JFormattedTextField.AbstractFormatterFactory&lt;/code&gt;.
&lt;code&gt;DefaultFormatterFactory&lt;/code&gt; allows specifying a number of
different &lt;code&gt;JFormattedTextField.AbstractFormatter&lt;/code&gt;s that are to
be used.
The most important one is the default one
(&lt;code&gt;setDefaultFormatter&lt;/code&gt;). The default formatter will be used
if a more specific formatter could not be found. The following process
is used to determine the appropriate formatter to use.
&lt;ol&gt;
&lt;li&gt;Is the passed in value null? Use the null formatter.
&lt;li&gt;Does the &lt;code&gt;JFormattedTextField&lt;/code&gt; have focus? Use the edit
formatter.
&lt;li&gt;Otherwise, use the display formatter.
&lt;li&gt;If a non-null &lt;code&gt;AbstractFormatter&lt;/code&gt; has not been found, use
the default formatter.
&lt;/ol&gt;
&lt;p&gt;
The following code shows how to configure a
&lt;code&gt;JFormattedTextField&lt;/code&gt; with two
&lt;code&gt;JFormattedTextField.AbstractFormatter&lt;/code&gt;s, one for display and
one for editing.
&lt;pre&gt;
JFormattedTextField.AbstractFormatter editFormatter = ...;
JFormattedTextField.AbstractFormatter displayFormatter = ...;
DefaultFormatterFactory factory = new DefaultFormatterFactory(
displayFormatter, displayFormatter, editFormatter);
JFormattedTextField tf = new JFormattedTextField(factory);
&lt;/pre&gt;
&lt;p&gt;
&lt;strong&gt;Warning:&lt;/strong&gt;
Serialized objects of this class will not be compatible with
future Swing releases. The current serialization support is
appropriate for short term storage or RMI between applications running
the same version of Swing.  As of 1.4, support for long term storage
of all JavaBeans&lt;sup&gt;&lt;font size="-2"&gt;TM&lt;/font&gt;&lt;/sup&gt;
has been added to the &lt;code&gt;java.beans&lt;/code&gt; package.
Please see {@link java.beans.XMLEncoder}.

@see javax.swing.JFormattedTextField

@version 1.8 12/19/03
@since 1.4
</body><documentation humanName="Documentation"/><owner classType="Class" humanName="Owner" humanType="Class" icon="index_files/icon_class_1555793073.jpg" mode="s,e" name="DefaultFormatterFactory" refid="_9_5_f720368_1110473546784_592144_10445"/><owningElement classType="Class" humanName="Owning Element" humanType="Class" icon="index_files/icon_class_1555793073.jpg" name="DefaultFormatterFactory" refid="_9_5_f720368_1110473546784_592144_10445"/><TO_DO humanName="To Do" mode="s,e"/></comment></magicdraw>