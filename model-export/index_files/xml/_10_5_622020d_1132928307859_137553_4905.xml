<?xml version="1.0" encoding="UTF-8"?><magicdraw><comment classType="Comment" humanType="Comment" icon="index_files/icon_comment_2051026490.jpg" id="_10_5_622020d_1132928307859_137553_4905"><annotatedElement humanName="Annotated Element" mode="s,e"><class classType="Class" humanType="Class" icon="index_files/icon_class_1555793073.jpg" name="Proxy" refid="_9_5_f720368_1110473546612_195925_7541"/></annotatedElement><body humanName="Body" mode="s,e">&lt;code&gt;Proxy&lt;/code&gt; provides static methods for creating dynamic proxy
classes and instances, and it is also the superclass of all
dynamic proxy classes created by those methods.

&lt;p&gt;To create a proxy for some interface &lt;code&gt;Foo&lt;/code&gt;:
&lt;pre&gt;
InvocationHandler handler = new MyInvocationHandler(...);
Class proxyClass = Proxy.getProxyClass(
Foo.class.getClassLoader(), new Class[] { Foo.class });
Foo f = (Foo) proxyClass.
getConstructor(new Class[] { InvocationHandler.class }).
newInstance(new Object[] { handler });
&lt;/pre&gt;
or more simply:
&lt;pre&gt;
Foo f = (Foo) Proxy.newProxyInstance(Foo.class.getClassLoader(),
new Class[] { Foo.class },
handler);
&lt;/pre&gt;

&lt;p&gt;A &lt;i&gt;dynamic proxy class&lt;/i&gt; (simply referred to as a &lt;i&gt;proxy
class&lt;/i&gt; below) is a class that implements a list of interfaces
specified at runtime when the class is created, with behavior as
described below.

A &lt;i&gt;proxy interface&lt;/i&gt; is such an interface that is implemented
by a proxy class.

A &lt;i&gt;proxy instance&lt;/i&gt; is an instance of a proxy class.

Each proxy instance has an associated &lt;i&gt;invocation handler&lt;/i&gt;
object, which implements the interface {@link InvocationHandler}.
A method invocation on a proxy instance through one of its proxy
interfaces will be dispatched to the {@link InvocationHandler#invoke
invoke} method of the instance's invocation handler, passing the proxy
instance, a &lt;code&gt;java.lang.reflect.Method&lt;/code&gt; object identifying
the method that was invoked, and an array of type &lt;code&gt;Object&lt;/code&gt;
containing the arguments.  The invocation handler processes the
encoded method invocation as appropriate and the result that it
returns will be returned as the result of the method invocation on
the proxy instance.

&lt;p&gt;A proxy class has the following properties:

&lt;ul&gt;
&lt;li&gt;Proxy classes are public, final, and not abstract.

&lt;li&gt;The unqualified name of a proxy class is unspecified.  The space
of class names that begin with the string &lt;code&gt;"$Proxy"&lt;/code&gt;
should be, however, reserved for proxy classes.

&lt;li&gt;A proxy class extends &lt;code&gt;java.lang.reflect.Proxy&lt;/code&gt;.

&lt;li&gt;A proxy class implements exactly the interfaces specified at its
creation, in the same order.

&lt;li&gt;If a proxy class implements a non-public interface, then it will
be defined in the same package as that interface.  Otherwise, the
package of a proxy class is also unspecified.  Note that package
sealing will not prevent a proxy class from being successfully defined
in a particular package at runtime, and neither will classes already
defined by the same class loader and the same package with particular
signers.

&lt;li&gt;Since a proxy class implements all of the interfaces specified at
its creation, invoking &lt;code&gt;getInterfaces&lt;/code&gt; on its
&lt;code&gt;Class&lt;/code&gt; object will return an array containing the same
list of interfaces (in the order specified at its creation), invoking
&lt;code&gt;getMethods&lt;/code&gt; on its &lt;code&gt;Class&lt;/code&gt; object will return
an array of &lt;code&gt;Method&lt;/code&gt; objects that include all of the
methods in those interfaces, and invoking &lt;code&gt;getMethod&lt;/code&gt; will
find methods in the proxy interfaces as would be expected.

&lt;li&gt;The {@link Proxy#isProxyClass Proxy.isProxyClass} method will
return true if it is passed a proxy class-- a class returned by
&lt;code&gt;Proxy.getProxyClass&lt;/code&gt; or the class of an object returned by
&lt;code&gt;Proxy.newProxyInstance&lt;/code&gt;-- and false otherwise.

&lt;li&gt;The &lt;code&gt;java.security.ProtectionDomain&lt;/code&gt; of a proxy class
is the same as that of system classes loaded by the bootstrap class
loader, such as &lt;code&gt;java.lang.Object&lt;/code&gt;, because the code for a
proxy class is generated by trusted system code.  This protection
domain will typically be granted
&lt;code&gt;java.security.AllPermission&lt;/code&gt;.

&lt;li&gt;Each proxy class has one public constructor that takes one argument,
an implementation of the interface {@link InvocationHandler}, to set
the invocation handler for a proxy instance.  Rather than having to use
the reflection API to access the public constructor, a proxy instance
can be also be created by calling the {@link Proxy#newProxyInstance
Proxy.newInstance} method, which combines the actions of calling
{@link Proxy#getProxyClass Proxy.getProxyClass} with invoking the
constructor with an invocation handler.
&lt;/ul&gt;

&lt;p&gt;A proxy instance has the following properties:

&lt;ul&gt;
&lt;li&gt;Given a proxy instance &lt;code&gt;proxy&lt;/code&gt; and one of the
interfaces implemented by its proxy class &lt;code&gt;Foo&lt;/code&gt;, the
following expression will return true:
&lt;pre&gt;
&lt;code&gt;proxy instanceof Foo&lt;/code&gt;
&lt;/pre&gt;
and the following cast operation will succeed (rather than throwing
a &lt;code&gt;ClassCastException&lt;/code&gt;):
&lt;pre&gt;
&lt;code&gt;(Foo) proxy&lt;/code&gt;
&lt;/pre&gt;

&lt;li&gt;Each proxy instance has an associated invocation handler, the one
that was passed to its constructor.  The static
{@link Proxy#getInvocationHandler Proxy.getInvocationHandler} method
will return the invocation handler associated with the proxy instance
passed as its argument.

&lt;li&gt;An interface method invocation on a proxy instance will be
encoded and dispatched to the invocation handler's {@link
InvocationHandler#invoke invoke} method as described in the
documentation for that method.

&lt;li&gt;An invocation of the &lt;code&gt;hashCode&lt;/code&gt;,
&lt;code&gt;equals&lt;/code&gt;, or &lt;code&gt;toString&lt;/code&gt; methods declared in
&lt;code&gt;java.lang.Object&lt;/code&gt; on a proxy instance will be encoded and
dispatched to the invocation handler's &lt;code&gt;invoke&lt;/code&gt; method in
the same manner as interface method invocations are encoded and
dispatched, as described above.  The declaring class of the
&lt;code&gt;Method&lt;/code&gt; object passed to &lt;code&gt;invoke&lt;/code&gt; will be
&lt;code&gt;java.lang.Object&lt;/code&gt;.  Other public methods of a proxy
instance inherited from &lt;code&gt;java.lang.Object&lt;/code&gt; are not
overridden by a proxy class, so invocations of those methods behave
like they do for instances of &lt;code&gt;java.lang.Object&lt;/code&gt;.
&lt;/ul&gt;

&lt;h3&gt;Methods Duplicated in Multiple Proxy Interfaces&lt;/h3&gt;

&lt;p&gt;When two or more interfaces of a proxy class contain a method with
the same name and parameter signature, the order of the proxy class's
interfaces becomes significant.  When such a &lt;i&gt;duplicate method&lt;/i&gt;
is invoked on a proxy instance, the &lt;code&gt;Method&lt;/code&gt; object passed
to the invocation handler will not necessarily be the one whose
declaring class is assignable from the reference type of the interface
that the proxy's method was invoked through.  This limitation exists
because the corresponding method implementation in the generated proxy
class cannot determine which interface it was invoked through.
Therefore, when a duplicate method is invoked on a proxy instance,
the &lt;code&gt;Method&lt;/code&gt; object for the method in the foremost interface
that contains the method (either directly or inherited through a
superinterface) in the proxy class's list of interfaces is passed to
the invocation handler's &lt;code&gt;invoke&lt;/code&gt; method, regardless of the
reference type through which the method invocation occurred.

&lt;p&gt;If a proxy interface contains a method with the same name and
parameter signature as the &lt;code&gt;hashCode&lt;/code&gt;, &lt;code&gt;equals&lt;/code&gt;,
or &lt;code&gt;toString&lt;/code&gt; methods of &lt;code&gt;java.lang.Object&lt;/code&gt;,
when such a method is invoked on a proxy instance, the
&lt;code&gt;Method&lt;/code&gt; object passed to the invocation handler will have
&lt;code&gt;java.lang.Object&lt;/code&gt; as its declaring class.  In other words,
the public, non-final methods of &lt;code&gt;java.lang.Object&lt;/code&gt;
logically precede all of the proxy interfaces for the determination of
which &lt;code&gt;Method&lt;/code&gt; object to pass to the invocation handler.

&lt;p&gt;Note also that when a duplicate method is dispatched to an
invocation handler, the &lt;code&gt;invoke&lt;/code&gt; method may only throw
checked exception types that are assignable to one of the exception
types in the &lt;code&gt;throws&lt;/code&gt; clause of the method in &lt;i&gt;all&lt;/i&gt; of
the proxy interfaces that it can be invoked through.  If the
&lt;code&gt;invoke&lt;/code&gt; method throws a checked exception that is not
assignable to any of the exception types declared by the method in one
of the proxy interfaces that it can be invoked through, then an
unchecked &lt;code&gt;UndeclaredThrowableException&lt;/code&gt; will be thrown by
the invocation on the proxy instance.  This restriction means that not
all of the exception types returned by invoking
&lt;code&gt;getExceptionTypes&lt;/code&gt; on the &lt;code&gt;Method&lt;/code&gt; object
passed to the &lt;code&gt;invoke&lt;/code&gt; method can necessarily be thrown
successfully by the &lt;code&gt;invoke&lt;/code&gt; method.

@author	Peter Jones
@version	1.20, 04/04/20
@see		InvocationHandler
@since	1.3
</body><documentation humanName="Documentation"/><owner classType="Class" humanName="Owner" humanType="Class" icon="index_files/icon_class_1555793073.jpg" mode="s,e" name="Proxy" refid="_9_5_f720368_1110473546612_195925_7541"/><owningElement classType="Class" humanName="Owning Element" humanType="Class" icon="index_files/icon_class_1555793073.jpg" name="Proxy" refid="_9_5_f720368_1110473546612_195925_7541"/><TO_DO humanName="To Do" mode="s,e"/></comment></magicdraw>