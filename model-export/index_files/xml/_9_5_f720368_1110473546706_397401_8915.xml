<?xml version="1.0" encoding="UTF-8"?><magicdraw><class classType="Class" humanType="Class" icon="index_files/icon_class_795627831.jpg" id="_9_5_f720368_1110473546706_397401_8915" refElementId="_9_5_f720368_1110473546706_397401_8915"><documentation humanName="Documentation" mode="s">Resource bundles contain locale-specific objects.
When your program needs a locale-specific resource,
a &lt;code&gt;String&lt;/code&gt; for example, your program can load it
from the resource bundle that is appropriate for the
current user's locale. In this way, you can write
program code that is largely independent of the user's
locale isolating most, if not all, of the locale-specific
information in resource bundles.

&lt;p&gt;
This allows you to write programs that can:
&lt;UL type=SQUARE&gt;
&lt;LI&gt; be easily localized, or translated, into different languages
&lt;LI&gt; handle multiple locales at once
&lt;LI&gt; be easily modified later to support even more locales
&lt;/UL&gt;

&lt;P&gt;
Resource bundles belong to families whose members share a common base
name, but whose names also have additional components that identify
their locales. For example, the base name of a family of resource
bundles might be "MyResources". The family should have a default
resource bundle which simply has the same name as its family -
"MyResources" - and will be used as the bundle of last resort if a
specific locale is not supported. The family can then provide as
many locale-specific members as needed, for example a German one
named "MyResources_de".

&lt;P&gt;
Each resource bundle in a family contains the same items, but the items have
been translated for the locale represented by that resource bundle.
For example, both "MyResources" and "MyResources_de" may have a
&lt;code&gt;String&lt;/code&gt; that's used on a button for canceling operations.
In "MyResources" the &lt;code&gt;String&lt;/code&gt; may contain "Cancel" and in
"MyResources_de" it may contain "Abbrechen".

&lt;P&gt;
If there are different resources for different countries, you
can make specializations: for example, "MyResources_de_CH" contains objects for
the German language (de) in Switzerland (CH). If you want to only
modify some of the resources
in the specialization, you can do so.

&lt;P&gt;
When your program needs a locale-specific object, it loads
the &lt;code&gt;ResourceBundle&lt;/code&gt; class using the
{@link #getBundle(java.lang.String, java.util.Locale) getBundle}
method:
&lt;blockquote&gt;
&lt;pre&gt;
ResourceBundle myResources =
ResourceBundle.getBundle("MyResources", currentLocale);
&lt;/pre&gt;
&lt;/blockquote&gt;

&lt;P&gt;
Resource bundles contain key/value pairs. The keys uniquely
identify a locale-specific object in the bundle. Here's an
example of a &lt;code&gt;ListResourceBundle&lt;/code&gt; that contains
two key/value pairs:
&lt;blockquote&gt;
&lt;pre&gt;
public class MyResources extends ListResourceBundle {
public Object[][] getContents() {
return contents;
}
static final Object[][] contents = {
LOCALIZE THIS
{"OkKey", "OK"},
{"CancelKey", "Cancel"},
END OF MATERIAL TO LOCALIZE
};
}
&lt;/pre&gt;
&lt;/blockquote&gt;
Keys are always &lt;code&gt;String&lt;/code&gt;s.
In this example, the keys are "OkKey" and "CancelKey".
In the above example, the values
are also &lt;code&gt;String&lt;/code&gt;s--"OK" and "Cancel"--but
they don't have to be. The values can be any type of object.

&lt;P&gt;
You retrieve an object from resource bundle using the appropriate
getter method. Because "OkKey" and "CancelKey"
are both strings, you would use &lt;code&gt;getString&lt;/code&gt; to retrieve them:
&lt;blockquote&gt;
&lt;pre&gt;
button1 = new Button(myResources.getString("OkKey"));
button2 = new Button(myResources.getString("CancelKey"));
&lt;/pre&gt;
&lt;/blockquote&gt;
The getter methods all require the key as an argument and return
the object if found. If the object is not found, the getter method
throws a &lt;code&gt;MissingResourceException&lt;/code&gt;.

&lt;P&gt;
Besides &lt;code&gt;getString&lt;/code&gt;, ResourceBundle also provides
a method for getting string arrays, &lt;code&gt;getStringArray&lt;/code&gt;,
as well as a generic &lt;code&gt;getObject&lt;/code&gt; method for any other
type of object. When using &lt;code&gt;getObject&lt;/code&gt;, you'll
have to cast the result to the appropriate type. For example:
&lt;blockquote&gt;
&lt;pre&gt;
int[] myIntegers = (int[]) myResources.getObject("intList");
&lt;/pre&gt;
&lt;/blockquote&gt;

&lt;P&gt;
The Java 2 platform provides two subclasses of &lt;code&gt;ResourceBundle&lt;/code&gt;,
&lt;code&gt;ListResourceBundle&lt;/code&gt; and &lt;code&gt;PropertyResourceBundle&lt;/code&gt;,
that provide a fairly simple way to create resources.
As you saw briefly in a previous example, &lt;code&gt;ListResourceBundle&lt;/code&gt;
manages its resource as a List of key/value pairs.
&lt;code&gt;PropertyResourceBundle&lt;/code&gt; uses a properties file to manage
its resources.

&lt;p&gt;
If &lt;code&gt;ListResourceBundle&lt;/code&gt; or &lt;code&gt;PropertyResourceBundle&lt;/code&gt;
do not suit your needs, you can write your own &lt;code&gt;ResourceBundle&lt;/code&gt;
subclass.  Your subclasses must override two methods: &lt;code&gt;handleGetObject&lt;/code&gt;
and &lt;code&gt;getKeys()&lt;/code&gt;.

&lt;P&gt;
The following is a very simple example of a &lt;code&gt;ResourceBundle&lt;/code&gt;
subclass, MyResources, that manages two resources (for a larger number of
resources you would probably use a &lt;code&gt;Hashtable&lt;/code&gt;).
Notice that you don't need to supply a value if
a "parent-level" &lt;code&gt;ResourceBundle&lt;/code&gt; handles the same
key with the same value (as for the okKey below).
&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;
&lt;blockquote&gt;
&lt;pre&gt;
default (English language, United States)
public class MyResources extends ResourceBundle {
public Object handleGetObject(String key) {
if (key.equals("okKey")) return "Ok";
if (key.equals("cancelKey")) return "Cancel";
return null;
}
}

German language
public class MyResources_de extends MyResources {
public Object handleGetObject(String key) {
don't need okKey, since parent level handles it.
if (key.equals("cancelKey")) return "Abbrechen";
return null;
}
}
&lt;/pre&gt;
&lt;/blockquote&gt;
You do not have to restrict yourself to using a single family of
&lt;code&gt;ResourceBundle&lt;/code&gt;s. For example, you could have a set of bundles for
exception messages, &lt;code&gt;ExceptionResources&lt;/code&gt;
(&lt;code&gt;ExceptionResources_fr&lt;/code&gt;, &lt;code&gt;ExceptionResources_de&lt;/code&gt;, ...),
and one for widgets, &lt;code&gt;WidgetResource&lt;/code&gt; (&lt;code&gt;WidgetResources_fr&lt;/code&gt;,
&lt;code&gt;WidgetResources_de&lt;/code&gt;, ...); breaking up the resources however you like.

@see ListResourceBundle
@see PropertyResourceBundle
@see MissingResourceException
@since JDK1.1
</documentation><isAbstract humanName="Is Abstract" mode="s,e">true</isAbstract><isActive humanName="Is Active" mode="s,e">false</isActive><isFinalSpecialization humanName="Is Final Specialization" mode="e">false</isFinalSpecialization><isLeaf humanName="Is Leaf" mode="e">false</isLeaf><member humanName="Member"><class classType="Class" humanType="Class" icon="index_files/icon_class_555864569.jpg" name="ResourceCacheKey" refElementId="_9_5_f720368_1110473547878_819105_19567" refid="_9_5_f720368_1110473547878_819105_19567"/><class classType="Class" humanType="Class" icon="index_files/icon_class_555864569.jpg" name="LoaderReference" refElementId="_10_5_622020d_1132928313357_233904_7450" refid="_10_5_622020d_1132928313357_233904_7450"/></member><name humanName="Name" mode="s,e">ResourceBundle</name><namespace classType="Package" humanName="Namespace" humanType="Package" icon="index_files/icon_package_1518868172.jpg" name="util" refElementId="_9_5_f720368_1110473547799_165814_19031" refid="_9_5_f720368_1110473547799_165814_19031"/><nestedClassifier humanName="Nested Classifier"><class classType="Class" humanType="Class" icon="index_files/icon_class_555864569.jpg" name="ResourceCacheKey" refElementId="_9_5_f720368_1110473547878_819105_19567" refid="_9_5_f720368_1110473547878_819105_19567"/><class classType="Class" humanType="Class" icon="index_files/icon_class_555864569.jpg" name="LoaderReference" refElementId="_10_5_622020d_1132928313357_233904_7450" refid="_10_5_622020d_1132928313357_233904_7450"/></nestedClassifier><ownedComment humanName="Owned Comment"><comment classType="Comment" humanType="Comment" icon="index_files/icon_comment_841774062.jpg" name="Resource bundles contain locale-specific objects. ..." refElementId="_10_5_622020d_1132928313407_488604_7453" refid="_10_5_622020d_1132928313407_488604_7453"/></ownedComment><ownedElement humanName="Owned Element"><comment classType="Comment" humanType="Comment" icon="index_files/icon_comment_841774062.jpg" name="Resource bundles contain locale-specific objects. ..." refElementId="_10_5_622020d_1132928313407_488604_7453" refid="_10_5_622020d_1132928313407_488604_7453"/><class classType="Class" humanType="Class" icon="index_files/icon_class_555864569.jpg" name="ResourceCacheKey" refElementId="_9_5_f720368_1110473547878_819105_19567" refid="_9_5_f720368_1110473547878_819105_19567"/><class classType="Class" humanType="Class" icon="index_files/icon_class_555864569.jpg" name="LoaderReference" refElementId="_10_5_622020d_1132928313357_233904_7450" refid="_10_5_622020d_1132928313357_233904_7450"/></ownedElement><ownedMember humanName="Owned Member"><class classType="Class" humanType="Class" icon="index_files/icon_class_555864569.jpg" name="ResourceCacheKey" refElementId="_9_5_f720368_1110473547878_819105_19567" refid="_9_5_f720368_1110473547878_819105_19567"/><class classType="Class" humanType="Class" icon="index_files/icon_class_555864569.jpg" name="LoaderReference" refElementId="_10_5_622020d_1132928313357_233904_7450" refid="_10_5_622020d_1132928313357_233904_7450"/></ownedMember><owner classType="Package" humanName="Owner" humanType="Package" icon="index_files/icon_package_1518868172.jpg" mode="s,e" name="util" refElementId="_9_5_f720368_1110473547799_165814_19031" refid="_9_5_f720368_1110473547799_165814_19031"/><owningPackage classType="Package" humanName="Owning Package" humanType="Package" icon="index_files/icon_package_1518868172.jpg" name="util" refElementId="_9_5_f720368_1110473547799_165814_19031" refid="_9_5_f720368_1110473547799_165814_19031"/><package classType="Package" humanName="Package" humanType="Package" icon="index_files/icon_package_1518868172.jpg" name="util" refElementId="_9_5_f720368_1110473547799_165814_19031" refid="_9_5_f720368_1110473547799_165814_19031"/><qualifiedName humanName="Qualified Name" mode="e">JDK 5.0 Classes::java::util::ResourceBundle</qualifiedName><TO_DO humanName="To Do" mode="s,e"/><visibility humanName="Visibility" mode="e">public</visibility></class></magicdraw>