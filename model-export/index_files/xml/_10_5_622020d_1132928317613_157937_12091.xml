<?xml version="1.0" encoding="UTF-8"?><magicdraw><comment classType="Comment" humanType="Comment" icon="index_files/icon_comment_841774062.jpg" id="_10_5_622020d_1132928317613_157937_12091" refElementId="_10_5_622020d_1132928317613_157937_12091"><annotatedElement humanName="Annotated Element" mode="s,e"><class classType="Class" humanType="Class" icon="index_files/icon_class_555864569.jpg" name="KeymapWrapper" refElementId="_9_5_f720368_1110473548362_832812_23550" refid="_9_5_f720368_1110473548362_832812_23550"/></annotatedElement><body humanName="Body" mode="s,e">KeymapWrapper wraps a Keymap inside an InputMap. For KeymapWrapper
to be useful it must be used with a KeymapActionMap.
KeymapWrapper for the most part, is an InputMap with two parents.
The first parent visited is ALWAYS the Keymap, with the second
parent being the parent inherited from InputMap. If
&lt;code&gt;keymap.getAction&lt;/code&gt; returns null, implying the Keymap
does not have a binding for the KeyStroke,
the parent is then visited. If the Keymap has a binding, the
Action is returned, if not and the KeyStroke represents a
KeyTyped event and the Keymap has a defaultAction,
&lt;code&gt;DefaultActionKey&lt;/code&gt; is returned.
&lt;p&gt;KeymapActionMap is then able to transate the object passed in
to either message the Keymap, or message its default implementation.
</body><documentation humanName="Documentation"/><owner classType="Class" humanName="Owner" humanType="Class" icon="index_files/icon_class_555864569.jpg" mode="s,e" name="KeymapWrapper" refElementId="_9_5_f720368_1110473548362_832812_23550" refid="_9_5_f720368_1110473548362_832812_23550"/><owningElement classType="Class" humanName="Owning Element" humanType="Class" icon="index_files/icon_class_555864569.jpg" name="KeymapWrapper" refElementId="_9_5_f720368_1110473548362_832812_23550" refid="_9_5_f720368_1110473548362_832812_23550"/><TO_DO humanName="To Do" mode="s,e"/></comment></magicdraw>