<?xml version="1.0" encoding="UTF-8"?><magicdraw><interface classType="Interface" humanType="Interface" icon="index_files/icon_interface_1046467249.jpg" id="_10_5_622020d_1132928310032_500764_6391" refElementId="_10_5_622020d_1132928310032_500764_6391"><documentation humanName="Documentation" mode="s">A &lt;tt&gt;ReadWriteLock&lt;/tt&gt; maintains a pair of associated {@link
Lock locks}, one for read-only operations and one for writing.
The {@link #readLock read lock} may be held simultaneously by
multiple reader threads, so long as there are no writers.  The
{@link #writeLock write lock} is exclusive.

&lt;p&gt;A read-write lock allows for a greater level of concurrency in
accessing shared data than that permitted by a mutual exclusion lock.
It exploits the fact that while only a single thread at a time (a
&lt;em&gt;writer&lt;/em&gt; thread) can modify the shared data, in many cases any
number of threads can concurrently read the data (hence &lt;em&gt;reader&lt;/em&gt;
threads).
In theory, the increase in concurrency permitted by the use of a read-write
lock will lead to performance improvements over the use of a mutual
exclusion lock. In practice this increase in concurrency will only be fully
realized on a multi-processor, and then only if the access patterns for
the shared data are suitable.

&lt;p&gt;Whether or not a read-write lock will improve performance over the use
of a mutual exclusion lock depends on the frequency that the data is
read compared to being modified, the duration of the read and write
operations, and the contention for the data - that is, the number of
threads that will try to read or write the data at the same time.
For example, a collection that is initially populated with data and
thereafter infrequently modified, while being frequently searched
(such as a directory of some kind) is an ideal candidate for the use of
a read-write lock. However, if updates become frequent then the data
spends most of its time being exclusively locked and there is little, if any
increase in concurrency. Further, if the read operations are too short
the overhead of the read-write lock implementation (which is inherently
more complex than a mutual exclusion lock) can dominate the execution
cost, particularly as many read-write lock implementations still serialize
all threads through a small section of code. Ultimately, only profiling
and measurement will establish whether the use of a read-write lock is
suitable for your application.


&lt;p&gt;Although the basic operation of a read-write lock is straight-forward,
there are many policy decisions that an implementation must make, which
may affect the effectiveness of the read-write lock in a given application.
Examples of these policies include:
&lt;ul&gt;
&lt;li&gt;Determining whether to grant the read lock or the write lock, when
both readers and writers are waiting, at the time that a writer releases
the write lock. Writer preference is common, as writes are expected to be
short and infrequent. Reader preference is less common as it can lead to
lengthy delays for a write if the readers are frequent and long-lived as
expected. Fair, or "in-order" implementations are also possible.

&lt;li&gt;Determining whether readers that request the read lock while a
reader is active and a writer is waiting, are granted the read lock.
Preference to the reader can delay the writer indefinitely, while
preference to the writer can reduce the potential for concurrency.

&lt;li&gt;Determining whether the locks are reentrant: can a thread with the
write lock reacquire it? Can it acquire a read lock while holding the
write lock? Is the read lock itself reentrant?

&lt;li&gt;Can the write lock be downgraded to a read lock without allowing
an intervening writer? Can a read lock be upgraded to a write lock,
in preference to other waiting readers or writers?

&lt;/ul&gt;
You should consider all of these things when evaluating the suitability
of a given implementation for your application.

@see ReentrantReadWriteLock
@see Lock
@see ReentrantLock

@since 1.5
@author Doug Lea
</documentation><isAbstract humanName="Is Abstract">true</isAbstract><isFinalSpecialization humanName="Is Final Specialization" mode="e">false</isFinalSpecialization><isLeaf humanName="Is Leaf" mode="e">false</isLeaf><name humanName="Name" mode="s,e">ReadWriteLock</name><namespace classType="Package" humanName="Namespace" humanType="Package" icon="index_files/icon_package_1518868172.jpg" name="locks" refElementId="_10_5_622020d_1132928309932_22311_6374" refid="_10_5_622020d_1132928309932_22311_6374"/><ownedComment humanName="Owned Comment"><comment classType="Comment" humanType="Comment" icon="index_files/icon_comment_841774062.jpg" name="A &lt;tt&gt;ReadWriteLock&lt;/tt&gt; maintains a pair of assoc..." refElementId="_10_5_622020d_1132928310032_119106_6393" refid="_10_5_622020d_1132928310032_119106_6393"/></ownedComment><ownedElement humanName="Owned Element"><comment classType="Comment" humanType="Comment" icon="index_files/icon_comment_841774062.jpg" name="A &lt;tt&gt;ReadWriteLock&lt;/tt&gt; maintains a pair of assoc..." refElementId="_10_5_622020d_1132928310032_119106_6393" refid="_10_5_622020d_1132928310032_119106_6393"/></ownedElement><owner classType="Package" humanName="Owner" humanType="Package" icon="index_files/icon_package_1518868172.jpg" mode="s,e" name="locks" refElementId="_10_5_622020d_1132928309932_22311_6374" refid="_10_5_622020d_1132928309932_22311_6374"/><owningPackage classType="Package" humanName="Owning Package" humanType="Package" icon="index_files/icon_package_1518868172.jpg" name="locks" refElementId="_10_5_622020d_1132928309932_22311_6374" refid="_10_5_622020d_1132928309932_22311_6374"/><package classType="Package" humanName="Package" humanType="Package" icon="index_files/icon_package_1518868172.jpg" name="locks" refElementId="_10_5_622020d_1132928309932_22311_6374" refid="_10_5_622020d_1132928309932_22311_6374"/><qualifiedName humanName="Qualified Name" mode="e">JDK 5.0 Classes::java::util::concurrent::locks::ReadWriteLock</qualifiedName><supplierDependency humanName="Supplier Dependency"><interfacerealization classType="InterfaceRealization" humanType="Interface Realization" icon="index_files/icon_interfacerealization_1152342155.jpg" isRelationship="true" name="Interface Realization[JDK 5.0 Classes::java::util::concurrent::locks::ReentrantReadWriteLock -&gt; JDK 5.0 Classes::java::util::concurrent::locks::ReadWriteLock]" refElementId="_10_5_622020d_1132928321979_320099_14340" refid="_10_5_622020d_1132928321979_320099_14340"/></supplierDependency><TO_DO humanName="To Do" mode="s,e"/><visibility humanName="Visibility">public</visibility></interface></magicdraw>