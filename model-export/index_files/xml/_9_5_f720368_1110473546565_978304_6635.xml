<?xml version="1.0" encoding="UTF-8"?><magicdraw><class classType="Class" humanType="Class" icon="index_files/icon_class_555864569.jpg" id="_9_5_f720368_1110473546565_978304_6635" refElementId="_9_5_f720368_1110473546565_978304_6635"><documentation humanName="Documentation" mode="s">The &lt;code&gt;LineBreakMeasurer&lt;/code&gt; class allows styled text to be
broken into lines (or segments) that fit within a particular visual
advance.  This is useful for clients who wish to display a paragraph of
text that fits within a specific width, called the &lt;b&gt;wrapping
width&lt;/b&gt;.
&lt;p&gt;
&lt;code&gt;LineBreakMeasurer&lt;/code&gt; is constructed with an iterator over
styled text.  The iterator's range should be a single paragraph in the
text.
&lt;code&gt;LineBreakMeasurer&lt;/code&gt; maintains a position in the text for the
start of the next text segment.  Initially, this position is the
start of text.  Paragraphs are assigned an overall direction (either
left-to-right or right-to-left) according to the bidirectional
formatting rules.  All segments obtained from a paragraph have the
same direction as the paragraph.
&lt;p&gt;
Segments of text are obtained by calling the method
&lt;code&gt;nextLayout&lt;/code&gt;, which returns a {@link TextLayout}
representing the text that fits within the wrapping width.
The &lt;code&gt;nextLayout&lt;/code&gt; method moves the current position
to the end of the layout returned from &lt;code&gt;nextLayout&lt;/code&gt;.
&lt;p&gt;
&lt;code&gt;LineBreakMeasurer&lt;/code&gt; implements the most commonly used
line-breaking policy: Every word that fits within the wrapping
width is placed on the line. If the first word does not fit, then all
of the characters that fit within the wrapping width are placed on the
line.  At least one character is placed on each line.
&lt;p&gt;
The &lt;code&gt;TextLayout&lt;/code&gt; instances returned by
&lt;code&gt;LineBreakMeasurer&lt;/code&gt; treat tabs like 0-width spaces.  Clients
who wish to obtain tab-delimited segments for positioning should use
the overload of &lt;code&gt;nextLayout&lt;/code&gt; which takes a limiting offset
in the text.
The limiting offset should be the first character after the tab.
The &lt;code&gt;TextLayout&lt;/code&gt; objects returned from this method end
at the limit provided (or before, if the text between the current
position and the limit won't fit entirely within the  wrapping
width).
&lt;p&gt;
Clients who are laying out tab-delimited text need a slightly
different line-breaking policy after the first segment has been
placed on a line.  Instead of fitting partial words in the
remaining space, they should place words which don't fit in the
remaining space entirely on the next line.  This change of policy
can be requested in the overload of &lt;code&gt;nextLayout&lt;/code&gt; which
takes a &lt;code&gt;boolean&lt;/code&gt; parameter.  If this parameter is
&lt;code&gt;true&lt;/code&gt;, &lt;code&gt;nextLayout&lt;/code&gt; returns
&lt;code&gt;null&lt;/code&gt; if the first word won't fit in
the given space.  See the tab sample below.
&lt;p&gt;
In general, if the text used to construct the
&lt;code&gt;LineBreakMeasurer&lt;/code&gt; changes, a new
&lt;code&gt;LineBreakMeasurer&lt;/code&gt; must be constructed to reflect
the change.  (The old &lt;code&gt;LineBreakMeasurer&lt;/code&gt; continues to
function properly, but it won't be aware of the text change.)
Nevertheless, if the text change is the insertion or deletion of a
single character, an existing &lt;code&gt;LineBreakMeasurer&lt;/code&gt; can be
'updated' by calling &lt;code&gt;insertChar&lt;/code&gt; or
&lt;code&gt;deleteChar&lt;/code&gt;. Updating an existing
&lt;code&gt;LineBreakMeasurer&lt;/code&gt; is much faster than creating a new one.
Clients who modify text based on user typing should take advantage
of these methods.
&lt;p&gt;
&lt;strong&gt;Examples&lt;/strong&gt;:&lt;p&gt;
Rendering a paragraph in a component
&lt;blockquote&gt;
&lt;pre&gt;
public void paint(Graphics graphics) {

Point2D pen = new Point2D(10, 20);
Graphics2D g2d = (Graphics2D)graphics;
FontRenderContext frc = g2d.getFontRenderContext();

let styledText be an AttributedCharacterIterator containing at least
one character

LineBreakMeasurer measurer = new LineBreakMeasurer(styledText, frc);
float wrappingWidth = getSize().width - 15;

while (measurer.getPosition() &lt; fStyledText.length()) {

TextLayout layout = measurer.nextLayout(wrappingWidth);

pen.y += (layout.getAscent());
float dx = layout.isLeftToRight() ?
0 : (wrappingWidth - layout.getAdvance());

layout.draw(graphics, pen.x + dx, pen.y);
pen.y += layout.getDescent() + layout.getLeading();
}
}
&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;
Rendering text with tabs.  For simplicity, the overall text
direction is assumed to be left-to-right
&lt;blockquote&gt;
&lt;pre&gt;
public void paint(Graphics graphics) {

float leftMargin = 10, rightMargin = 310;
float[] tabStops = { 100, 250 };

assume styledText is an AttributedCharacterIterator, and the number
of tabs in styledText is tabCount

int[] tabLocations = new int[tabCount+1];

int i = 0;
for (char c = styledText.first(); c != styledText.DONE; c = styledText.next()) {
if (c == '\t') {
tabLocations[i++] = styledText.getIndex();
}
}
tabLocations[tabCount] = styledText.getEndIndex() - 1;

Now tabLocations has an entry for every tab's offset in
the text.  For convenience, the last entry is tabLocations
is the offset of the last character in the text.

LineBreakMeasurer measurer = new LineBreakMeasurer(styledText);
int currentTab = 0;
float verticalPos = 20;

while (measurer.getPosition() &lt; styledText.getEndIndex()) {

Lay out and draw each line.  All segments on a line
must be computed before any drawing can occur, since
we must know the largest ascent on the line.
TextLayouts are computed and stored in a Vector;
their horizontal positions are stored in a parallel
Vector.

lineContainsText is true after first segment is drawn
boolean lineContainsText = false;
boolean lineComplete = false;
float maxAscent = 0, maxDescent = 0;
float horizontalPos = leftMargin;
Vector layouts = new Vector(1);
Vector penPositions = new Vector(1);

while (!lineComplete) {
float wrappingWidth = rightMargin - horizontalPos;
TextLayout layout =
measurer.nextLayout(wrappingWidth,
tabLocations[currentTab]+1,
lineContainsText);

layout can be null if lineContainsText is true
if (layout != null) {
layouts.addElement(layout);
penPositions.addElement(new Float(horizontalPos));
horizontalPos += layout.getAdvance();
maxAscent = Math.max(maxAscent, layout.getAscent());
maxDescent = Math.max(maxDescent,
layout.getDescent() + layout.getLeading());
} else {
lineComplete = true;
}

lineContainsText = true;

if (measurer.getPosition() == tabLocations[currentTab]+1) {
currentTab++;
}

if (measurer.getPosition() == styledText.getEndIndex())
lineComplete = true;
else if (horizontalPos &gt;= tabStops[tabStops.length-1])
lineComplete = true;

if (!lineComplete) {
move to next tab stop
int j;
for (j=0; horizontalPos &gt;= tabStops[j]; j++) {}
horizontalPos = tabStops[j];
}
}

verticalPos += maxAscent;

Enumeration layoutEnum = layouts.elements();
Enumeration positionEnum = penPositions.elements();

now iterate through layouts and draw them
while (layoutEnum.hasMoreElements()) {
TextLayout nextLayout = (TextLayout) layoutEnum.nextElement();
Float nextPosition = (Float) positionEnum.nextElement();
nextLayout.draw(graphics, nextPosition.floatValue(), verticalPos);
}

verticalPos += maxDescent;
}
}
&lt;/pre&gt;
&lt;/blockquote&gt;
@see TextLayout
</documentation><isAbstract humanName="Is Abstract" mode="s,e">false</isAbstract><isActive humanName="Is Active" mode="s,e">false</isActive><isFinalSpecialization humanName="Is Final Specialization" mode="e">true</isFinalSpecialization><isLeaf humanName="Is Leaf" mode="e">true</isLeaf><name humanName="Name" mode="s,e">LineBreakMeasurer</name><namespace classType="Package" humanName="Namespace" humanType="Package" icon="index_files/icon_package_1518868172.jpg" name="font" refElementId="_9_5_f720368_1110473547299_819550_16532" refid="_9_5_f720368_1110473547299_819550_16532"/><ownedComment humanName="Owned Comment"><comment classType="Comment" humanType="Comment" icon="index_files/icon_comment_841774062.jpg" name="The &lt;code&gt;LineBreakMeasurer&lt;/code&gt; class allows st..." refElementId="_10_5_622020d_1132928305836_927956_3785" refid="_10_5_622020d_1132928305836_927956_3785"/></ownedComment><ownedElement humanName="Owned Element"><comment classType="Comment" humanType="Comment" icon="index_files/icon_comment_841774062.jpg" name="The &lt;code&gt;LineBreakMeasurer&lt;/code&gt; class allows st..." refElementId="_10_5_622020d_1132928305836_927956_3785" refid="_10_5_622020d_1132928305836_927956_3785"/></ownedElement><owner classType="Package" humanName="Owner" humanType="Package" icon="index_files/icon_package_1518868172.jpg" mode="s,e" name="font" refElementId="_9_5_f720368_1110473547299_819550_16532" refid="_9_5_f720368_1110473547299_819550_16532"/><owningPackage classType="Package" humanName="Owning Package" humanType="Package" icon="index_files/icon_package_1518868172.jpg" name="font" refElementId="_9_5_f720368_1110473547299_819550_16532" refid="_9_5_f720368_1110473547299_819550_16532"/><package classType="Package" humanName="Package" humanType="Package" icon="index_files/icon_package_1518868172.jpg" name="font" refElementId="_9_5_f720368_1110473547299_819550_16532" refid="_9_5_f720368_1110473547299_819550_16532"/><qualifiedName humanName="Qualified Name" mode="e">JDK 5.0 Classes::java::awt::font::LineBreakMeasurer</qualifiedName><TO_DO humanName="To Do" mode="s,e"/><visibility humanName="Visibility" mode="e">public</visibility></class></magicdraw>