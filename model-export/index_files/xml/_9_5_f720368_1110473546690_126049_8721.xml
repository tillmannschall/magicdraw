<?xml version="1.0" encoding="UTF-8"?><magicdraw><class classType="Class" humanType="Class" icon="index_files/icon_class_555864569.jpg" id="_9_5_f720368_1110473546690_126049_8721" refElementId="_9_5_f720368_1110473546690_126049_8721"><documentation humanName="Documentation" mode="s">Simple file logging &lt;tt&gt;Handler&lt;/tt&gt;.
&lt;p&gt;
The &lt;tt&gt;FileHandler&lt;/tt&gt; can either write to a specified file,
or it can write to a rotating set of files.
&lt;p&gt;
For a rotating set of files, as each file reaches a given size
limit, it is closed, rotated out, and a new file opened.
Successively older files are named by adding "0", "1", "2",
etc into the base filename.
&lt;p&gt;
By default buffering is enabled in the IO libraries but each log
record is flushed out when it is complete.
&lt;p&gt;
By default the &lt;tt&gt;XMLFormatter&lt;/tt&gt; class is used for formatting.
&lt;p&gt;
&lt;b&gt;Configuration:&lt;/b&gt;
By default each &lt;tt&gt;FileHandler&lt;/tt&gt; is initialized using the following
&lt;tt&gt;LogManager&lt;/tt&gt; configuration properties.  If properties are not defined
(or have invalid values) then the specified default values are used.
&lt;ul&gt;
&lt;li&gt;   java.util.logging.FileHandler.level
specifies the default level for the &lt;tt&gt;Handler&lt;/tt&gt;
(defaults to &lt;tt&gt;Level.ALL&lt;/tt&gt;).
&lt;li&gt;   java.util.logging.FileHandler.filter
specifies the name of a &lt;tt&gt;Filter&lt;/tt&gt; class to use
(defaults to no &lt;tt&gt;Filter&lt;/tt&gt;).
&lt;li&gt;   java.util.logging.FileHandler.formatter
specifies the name of a &lt;/tt&gt;Formatter&lt;/tt&gt; class to use
(defaults to &lt;tt&gt;java.util.logging.XMLFormatter&lt;/tt&gt;)
&lt;li&gt;   java.util.logging.FileHandler.encoding
the name of the character set encoding to use (defaults to
the default platform encoding).
&lt;li&gt;   java.util.logging.FileHandler.limit
specifies an approximate maximum amount to write (in bytes)
to any one file.  If this is zero, then there is no limit.
(Defaults to no limit).
&lt;li&gt;   java.util.logging.FileHandler.count
specifies how many output files to cycle through (defaults to 1).
&lt;li&gt;   java.util.logging.FileHandler.pattern
specifies a pattern for generating the output file name.  See
below for details. (Defaults to "%h/java%u.log").
&lt;li&gt;   java.util.logging.FileHandler.append
specifies whether the FileHandler should append onto
any existing files (defaults to false).
&lt;/ul&gt;
&lt;p&gt;
&lt;p&gt;
A pattern consists of a string that includes the following special
components that will be replaced at runtime:
&lt;ul&gt;
&lt;li&gt;    "/"    the local pathname separator
&lt;li&gt;     "%t"   the system temporary directory
&lt;li&gt;     "%h"   the value of the "user.home" system property
&lt;li&gt;     "%g"   the generation number to distinguish rotated logs
&lt;li&gt;     "%u"   a unique number to resolve conflicts
&lt;li&gt;     "%%"   translates to a single percent sign "%"
&lt;/ul&gt;
If no "%g" field has been specified and the file count is greater
than one, then the generation number will be added to the end of
the generated filename, after a dot.
&lt;p&gt;
Thus for example a pattern of "%t/java%g.log" with a count of 2
would typically cause log files to be written on Solaris to
var/tmp/java0.log and /var/tmp/java1.log whereas on Windows 95 they
would be typically written to C:\TEMP\java0.log and C:\TEMP\java1.log
&lt;p&gt;
Generation numbers follow the sequence 0, 1, 2, etc.
&lt;p&gt;
Normally the "%u" unique field is set to 0.  However, if the &lt;tt&gt;FileHandler&lt;/tt&gt;
tries to open the filename and finds the file is currently in use by
another process it will increment the unique number field and try
again.  This will be repeated until &lt;tt&gt;FileHandler&lt;/tt&gt; finds a file name that
is  not currently in use. If there is a conflict and no "%u" field has
been specified, it will be added at the end of the filename after a dot.
(This will be after any automatically added generation number.)
&lt;p&gt;
Thus if three processes were all trying to log to fred%u.%g.txt then
they  might end up using fred0.0.txt, fred1.0.txt, fred2.0.txt as
the first file in their rotating sequences.
&lt;p&gt;
Note that the use of unique ids to avoid conflicts is only guaranteed
to work reliably when using a local disk file system.

@version 1.34, 04/05/04
@since 1.4
</documentation><generalization humanName="Generalization"><generalization classType="Generalization" humanType="Generalization" icon="index_files/icon_generalization_1454922150.jpg" isRelationship="true" name="Generalization[JDK 5.0 Classes::java::util::logging::FileHandler -&gt; JDK 5.0 Classes::java::util::logging::StreamHandler]" refElementId="_10_5_622020d_1132928322319_274490_14555" refid="_10_5_622020d_1132928322319_274490_14555"/></generalization><isAbstract humanName="Is Abstract" mode="s,e">false</isAbstract><isActive humanName="Is Active" mode="s,e">false</isActive><isFinalSpecialization humanName="Is Final Specialization" mode="e">false</isFinalSpecialization><isLeaf humanName="Is Leaf" mode="e">false</isLeaf><member humanName="Member"><class classType="Class" humanType="Class" icon="index_files/icon_class_555864569.jpg" name="MeteredStream" refElementId="_9_5_f720368_1110473547799_892555_19066" refid="_9_5_f720368_1110473547799_892555_19066"/><class classType="Class" humanType="Class" icon="index_files/icon_class_555864569.jpg" name="InitializationErrorManager" refElementId="_9_5_f720368_1110473547799_672391_19067" refid="_9_5_f720368_1110473547799_672391_19067"/></member><name humanName="Name" mode="s,e">FileHandler</name><namespace classType="Package" humanName="Namespace" humanType="Package" icon="index_files/icon_package_1518868172.jpg" name="logging" refElementId="_9_5_f720368_1110473547799_233532_19062" refid="_9_5_f720368_1110473547799_233532_19062"/><nestedClassifier humanName="Nested Classifier"><class classType="Class" humanType="Class" icon="index_files/icon_class_555864569.jpg" name="MeteredStream" refElementId="_9_5_f720368_1110473547799_892555_19066" refid="_9_5_f720368_1110473547799_892555_19066"/><class classType="Class" humanType="Class" icon="index_files/icon_class_555864569.jpg" name="InitializationErrorManager" refElementId="_9_5_f720368_1110473547799_672391_19067" refid="_9_5_f720368_1110473547799_672391_19067"/></nestedClassifier><ownedComment humanName="Owned Comment"><comment classType="Comment" humanType="Comment" icon="index_files/icon_comment_841774062.jpg" name="Simple file logging &lt;tt&gt;Handler&lt;/tt&gt;. &lt;p&gt; The &lt;tt&gt;..." refElementId="_10_5_622020d_1132928310322_139326_6745" refid="_10_5_622020d_1132928310322_139326_6745"/></ownedComment><ownedElement humanName="Owned Element"><generalization classType="Generalization" humanType="Generalization" icon="index_files/icon_generalization_1454922150.jpg" isRelationship="true" name="Generalization[JDK 5.0 Classes::java::util::logging::FileHandler -&gt; JDK 5.0 Classes::java::util::logging::StreamHandler]" refElementId="_10_5_622020d_1132928322319_274490_14555" refid="_10_5_622020d_1132928322319_274490_14555"/><comment classType="Comment" humanType="Comment" icon="index_files/icon_comment_841774062.jpg" name="Simple file logging &lt;tt&gt;Handler&lt;/tt&gt;. &lt;p&gt; The &lt;tt&gt;..." refElementId="_10_5_622020d_1132928310322_139326_6745" refid="_10_5_622020d_1132928310322_139326_6745"/><class classType="Class" humanType="Class" icon="index_files/icon_class_555864569.jpg" name="MeteredStream" refElementId="_9_5_f720368_1110473547799_892555_19066" refid="_9_5_f720368_1110473547799_892555_19066"/><class classType="Class" humanType="Class" icon="index_files/icon_class_555864569.jpg" name="InitializationErrorManager" refElementId="_9_5_f720368_1110473547799_672391_19067" refid="_9_5_f720368_1110473547799_672391_19067"/></ownedElement><ownedMember humanName="Owned Member"><class classType="Class" humanType="Class" icon="index_files/icon_class_555864569.jpg" name="MeteredStream" refElementId="_9_5_f720368_1110473547799_892555_19066" refid="_9_5_f720368_1110473547799_892555_19066"/><class classType="Class" humanType="Class" icon="index_files/icon_class_555864569.jpg" name="InitializationErrorManager" refElementId="_9_5_f720368_1110473547799_672391_19067" refid="_9_5_f720368_1110473547799_672391_19067"/></ownedMember><owner classType="Package" humanName="Owner" humanType="Package" icon="index_files/icon_package_1518868172.jpg" mode="s,e" name="logging" refElementId="_9_5_f720368_1110473547799_233532_19062" refid="_9_5_f720368_1110473547799_233532_19062"/><owningPackage classType="Package" humanName="Owning Package" humanType="Package" icon="index_files/icon_package_1518868172.jpg" name="logging" refElementId="_9_5_f720368_1110473547799_233532_19062" refid="_9_5_f720368_1110473547799_233532_19062"/><package classType="Package" humanName="Package" humanType="Package" icon="index_files/icon_package_1518868172.jpg" name="logging" refElementId="_9_5_f720368_1110473547799_233532_19062" refid="_9_5_f720368_1110473547799_233532_19062"/><qualifiedName humanName="Qualified Name" mode="e">JDK 5.0 Classes::java::util::logging::FileHandler</qualifiedName><superClass humanName="Super Class"><class classType="Class" humanType="Class" icon="index_files/icon_class_555864569.jpg" name="StreamHandler" refElementId="_9_5_f720368_1110473546690_89383_8745" refid="_9_5_f720368_1110473546690_89383_8745"/></superClass><TO_DO humanName="To Do" mode="s,e"/><visibility humanName="Visibility" mode="e">public</visibility></class></magicdraw>