<?xml version="1.0" encoding="UTF-8"?><magicdraw><interface classType="Interface" humanType="Interface" icon="index_files/icon_interface_1046467249.jpg" id="_10_5_622020d_1132928316351_820130_10709" refElementId="_10_5_622020d_1132928316351_820130_10709"><documentation humanName="Documentation" mode="s">Defines a framework that allows applications to use a manual decision tree
to decide what should be done when a synchronization conflict occurs.
Although it is not mandatory for
applications to resolve synchronization conflicts manually, this
framework provides the means to delegate to the application when conflicts
arise.
&lt;p&gt;
Note that a conflict is a situation where the &lt;code&gt;RowSet&lt;/code&gt; object's original
values for a row do not match the values in the data source, which indicates that
the data source row has been modified since the last synchronization. Note also that
a &lt;code&gt;RowSet&lt;/code&gt; object's original values are the values it had just prior to the
the last synchronization, which are not necessarily its initial values.
&lt;p&gt;

&lt;H2&gt;Description of a &lt;code&gt;SyncResolver&lt;/code&gt; Object&lt;/H2&gt;

A &lt;code&gt;SyncResolver&lt;/code&gt; object is a specialized &lt;code&gt;RowSet&lt;/code&gt; object
that implements the &lt;code&gt;SyncResolver&lt;/code&gt; interface.
It &lt;b&gt;may&lt;/b&gt; operate as either a connected &lt;code&gt;RowSet&lt;/code&gt; object (an
implementation of the &lt;code&gt;JdbcRowSet&lt;/code&gt; interface) or a connected
&lt;code&gt;RowSet&lt;/code&gt; object (an implementation of the
&lt;code&gt;CachedRowSet&lt;/code&gt; interface or one of its subinterfaces). For information
on the subinterfaces, see the
&lt;a href="../package-summary.html"&gt;&lt;code&gt;javax.sql.rowset&lt;/code&gt;&lt;/a&gt; package
description. The reference implementation for &lt;code&gt;SyncResolver&lt;/code&gt; implements
the &lt;code&gt;CachedRowSet&lt;/code&gt; interface, but other implementations
may choose to implement the &lt;code&gt;JdbcRowSet&lt;/code&gt; interface to satisfy
particular needs.
&lt;P&gt;
After an application has attempted to synchronize a &lt;code&gt;RowSet&lt;/code&gt; object with
the data source (by calling the &lt;code&gt;CachedRowSet&lt;/code&gt;
method &lt;code&gt;acceptChanges&lt;/code&gt;), and one or more conflicts have been found,
a rowset's &lt;code&gt;SyncProvider&lt;/code&gt; object creates an instance of
&lt;code&gt;SyncResolver&lt;/code&gt;. This new &lt;code&gt;SyncResolver&lt;/code&gt; object has
the same number of rows and columns as the
&lt;code&gt;RowSet&lt;/code&gt; object that was attempting the synchronization. The
&lt;code&gt;SyncResolver&lt;/code&gt; object contains the values from the data source that caused
the conflict(s) and &lt;code&gt;null&lt;/code&gt; for all other values.
In addition, it contains information about each conflict.
&lt;P&gt;

&lt;H2&gt;Getting and Using a &lt;code&gt;SyncResolver&lt;/code&gt; Object&lt;/H2&gt;

When the method &lt;code&gt;acceptChanges&lt;/code&gt; encounters conflicts, the
&lt;code&gt;SyncProvider&lt;/code&gt; object creates a &lt;code&gt;SyncProviderException&lt;/code&gt;
object and sets it with the new &lt;code&gt;SyncResolver&lt;/code&gt; object. The method
&lt;code&gt;acceptChanges&lt;/code&gt; will throw this exception, which
the application can then catch and use to retrieve the
&lt;code&gt;SyncResolver&lt;/code&gt; object it contains. The following code snippet uses the
&lt;code&gt;SyncProviderException&lt;/code&gt; method &lt;code&gt;getSyncResolver&lt;/code&gt; to get
the &lt;code&gt;SyncResolver&lt;/code&gt; object &lt;i&gt;resolver&lt;/i&gt;.
&lt;PRE&gt;
} catch (SyncProviderException spe) {
SyncResolver resolver = spe.getSyncResolver();
...
}
&lt;/PRE&gt;
&lt;P&gt;
With &lt;i&gt;resolver&lt;/i&gt; in hand, an application can use it to get the information
it contains about the conflict or conflicts.  A &lt;code&gt;SyncResolver&lt;/code&gt; object
such as &lt;i&gt;resolver&lt;/i&gt; keeps
track of the conflicts for each row in which there is a conflict.  It also places a
lock on the table or tables affected by the rowset's command so that no more
conflicts can occur while the current conflicts are being resolved.
&lt;P&gt;
The following kinds of information can be obtained from a &lt;code&gt;SyncResolver&lt;/code&gt;
object:
&lt;P&gt;
&lt;LI&gt;What operation was being attempted when a conflict occurred&lt;BR&gt;
The &lt;code&gt;SyncProvider&lt;/code&gt; interface defines four constants
describing states that may occur. Three
constants describe the type of operation (update, delete, or insert) that a
&lt;code&gt;RowSet&lt;/code&gt; object was attempting to perform when a conflict was discovered,
and the fourth indicates that there is no conflict.
These constants are the possible return values when a &lt;code&gt;SyncResolver&lt;/code&gt; object
calls the method &lt;code&gt;getStatus&lt;/code&gt;.
&lt;PRE&gt;
int operation = resolver.getStatus();
&lt;/PRE&gt;
&lt;P&gt;
&lt;LI&gt;The value in the data source that caused a conflict&lt;BR&gt;
A conflict exists when a value that a &lt;code&gt;RowSet&lt;/code&gt; object has changed
and is attempting to write to the data source
has also been changed in the data source since the last synchronization.  An
application can call the &lt;code&gt;SyncResolver&lt;/code&gt; method
&lt;code&gt;getConflictValue&lt;/code &gt; to retrieve the
value in the data source that is the cause of the conflict because the values in a
&lt;code&gt;SyncResolver&lt;/code&gt; object are the conflict values from the data source.
&lt;PRE&gt;
java.lang.Object conflictValue = resolver.getConflictValue(2);
&lt;/PRE&gt;
Note that the column in &lt;i&gt;resolver&lt;/i&gt; can be designated by the column number,
as is done in the preceding line of code, or by the column name.
&lt;/UL&gt;
&lt;P&gt;
With the information retrieved from the methods &lt;code&gt;getStatus&lt;/code&gt; and
&lt;code&gt;getConflictValue&lt;/code&gt;, the application may make a determination as to
which value should be persisted in the data source. The application then calls the
&lt;code&gt;SyncResolver&lt;/code&gt; method &lt;code&gt;setResolvedValue&lt;/code&gt;, which sets the value
to be persisted in the &lt;code&gt;RowSet&lt;/code&gt; object and also in the data source.
&lt;PRE&gt;
resolver.setResolvedValue("DEPT", 8390426);
&lt;/PRE&gt;
In the preceding line of code,
the column name designates the column in the &lt;code&gt;RowSet&lt;/code&gt; object
that is to be set with the given value. The column number can also be used to
designate the column.
&lt;P&gt;
An application calls the method &lt;code&gt;setResolvedValue&lt;/code&gt; after it has
resolved all of the conflicts in the current conflict row and repeats this process
for each conflict row in the &lt;code&gt;SyncResolver&lt;/code&gt; object.
&lt;P&gt;

&lt;H2&gt;Navigating a &lt;code&gt;SyncResolver&lt;/code&gt; Object&lt;/H2&gt;

Because a &lt;code&gt;SyncResolver&lt;/code&gt; object is a &lt;code&gt;RowSet&lt;/code&gt; object, an
application can use all of the &lt;code&gt;RowSet&lt;/code&gt; methods for moving the cursor
to navigate a &lt;code&gt;SyncResolver&lt;/code&gt; object. For example, an application can
use the &lt;code&gt;RowSet&lt;/code&gt; method &lt;code&gt;next&lt;/code&gt; to get to each row and then
call the &lt;code&gt;SyncResolver&lt;/code&gt; method &lt;code&gt;getStatus&lt;/code&gt; to see if the row
contains a conflict.  In a row with one or more conflicts, the application can
iterate through the columns to find any non-null values, which will be the values
from the data source that are in conflict.
&lt;P&gt;
To make it easier to navigate a &lt;code&gt;SyncResolver&lt;/code&gt; object, especially when
there are large numbers of rows with no conflicts, the &lt;code&gt;SyncResolver&lt;/code&gt;
interface defines the methods &lt;code&gt;nextConflict&lt;/code&gt; and
&lt;code&gt;previousConflict&lt;/code&gt;, which move only to rows
that contain at least one conflict value. Then an application can call the
&lt;code&gt;SyncResolver&lt;/code&gt; method &lt;code&gt;getConflictValue&lt;/code&gt;, supplying it
with the column number, to get the conflict value itself. The code fragment in the
next section gives an example.

&lt;H2&gt;Code Example&lt;/H2&gt;

The following code fragment demonstrates how a disconnected &lt;code&gt;RowSet&lt;/code&gt;
object &lt;i&gt;crs&lt;/i&gt; might attempt to synchronize itself with the
underlying data source and then resolve the conflicts. In the &lt;code&gt;try&lt;/code&gt;
block, &lt;i&gt;crs&lt;/i&gt; calls the method &lt;code&gt;acceptChanges&lt;/code&gt;, passing it the
&lt;code&gt;Connection&lt;/code&gt; object &lt;i&gt;con&lt;/i&gt;.  If there are no conflicts, the
changes in &lt;i&gt;crs&lt;/i&gt; are simply written to the data source.  However, if there
is a conflict, the method &lt;code&gt;acceptChanges&lt;/code&gt; throws a
&lt;code&gt;SyncProviderException&lt;/code&gt; object, and the
&lt;code&gt;catch&lt;/code&gt; block takes effect.  In this example, which
illustrates one of the many ways a &lt;code&gt;SyncResolver&lt;/code&gt; object can be used,
the &lt;code&gt;SyncResolver&lt;/code&gt; method &lt;code&gt;nextConflict&lt;/code&gt; is used in a
&lt;code&gt;while&lt;/code&gt; loop. The loop will end when &lt;code&gt;nextConflict&lt;/code&gt; returns
&lt;code&gt;false&lt;/code&gt;, which will occur when there are no more conflict rows in the
&lt;code&gt;SyncResolver&lt;/code&gt; object &lt;i&gt;resolver&lt;/i&gt;. In This particular code fragment,
&lt;i&gt;resolver&lt;/i&gt; looks for rows that have update conflicts (rows with the status
&lt;code&gt;SyncResolver.UPDATE_ROW_CONFLICT&lt;/code&gt;), and the rest of this code fragment
executes only for rows where conflicts occurred because &lt;i&gt;crs&lt;/i&gt; was attempting an
update.
&lt;P&gt;
After the cursor for &lt;i&gt;resolver&lt;/i&gt; has moved to the next conflict row that
has an update conflict, the method &lt;code&gt;getRow&lt;/code&gt; indicates the number of the
current row, and
the cursor for the &lt;code&gt;CachedRowSet&lt;/code&gt; object &lt;i&gt;crs&lt;/i&gt; is moved to
the comparable row in &lt;i&gt;crs&lt;/i&gt;. By iterating
through the columns of that row in both &lt;i&gt;resolver&lt;/i&gt; and &lt;i&gt;crs&lt;/i&gt;, the conflicting
values can be retrieved and compared to decide which one should be persisted. In this
code fragment, the value in &lt;i&gt;crs&lt;/i&gt; is the one set as the resolved value, which means
that it will be used to overwrite the conflict value in the data source.

&lt;PRE&gt;
try {

crs.acceptChanges(con);

} catch (SyncProviderException spe) {

SyncResolver resolver = spe.getSyncResolver();

Object crsValue;  // value in the &lt;code&gt;RowSet&lt;/code&gt; object
Object resolverValue:  // value in the &lt;code&gt;SyncResolver&lt;/code&gt; object
Object resolvedValue:  // value to be persisted

while(resolver.nextConflict())  {
if(resolver.getStatus() == SyncResolver.UPDATE_ROW_CONFLICT)  {
int row = resolver.getRow();
crs.absolute(row);

int colCount = crs.getMetaData().getColumnCount();
for(int j = 1; j &lt;= colCount; j++) {
if (resolver.getConflictValue(j) != null)  {
crsValue = crs.getObject(j);
resolverValue = resolver.getConflictValue(j);
. . .
compare crsValue and resolverValue to determine
which should be the resolved value (the value to persist)
resolvedValue = crsValue;

resolver.setResolvedValue(j, resolvedValue);
}
}
}
}
}
&lt;/PRE&gt;
@author  Jonathan Bruce
</documentation><general humanName="General"><interface classType="Interface" humanType="Interface" icon="index_files/icon_interface_1046467249.jpg" name="RowSet" refElementId="_9_5_f720368_1110473546753_419892_9761" refid="_9_5_f720368_1110473546753_419892_9761"/></general><generalization humanName="Generalization"><generalization classType="Generalization" humanType="Generalization" icon="index_files/icon_generalization_1454922150.jpg" isRelationship="true" name="Generalization[JDK 5.0 Classes::javax::sql::rowset::spi::SyncResolver -&gt; JDK 5.0 Classes::javax::sql::RowSet]" refElementId="_10_5_622020d_1132928323371_284174_16642" refid="_10_5_622020d_1132928323371_284174_16642"/></generalization><isAbstract humanName="Is Abstract">true</isAbstract><isFinalSpecialization humanName="Is Final Specialization" mode="e">false</isFinalSpecialization><isLeaf humanName="Is Leaf" mode="e">false</isLeaf><name humanName="Name" mode="s,e">SyncResolver</name><namespace classType="Package" humanName="Namespace" humanType="Package" icon="index_files/icon_package_1518868172.jpg" name="spi" refElementId="_10_5_622020d_1132928316291_669465_10693" refid="_10_5_622020d_1132928316291_669465_10693"/><ownedComment humanName="Owned Comment"><comment classType="Comment" humanType="Comment" icon="index_files/icon_comment_841774062.jpg" name="Defines a framework that allows applications to us..." refElementId="_10_5_622020d_1132928316401_226730_10711" refid="_10_5_622020d_1132928316401_226730_10711"/></ownedComment><ownedElement humanName="Owned Element"><generalization classType="Generalization" humanType="Generalization" icon="index_files/icon_generalization_1454922150.jpg" isRelationship="true" name="Generalization[JDK 5.0 Classes::javax::sql::rowset::spi::SyncResolver -&gt; JDK 5.0 Classes::javax::sql::RowSet]" refElementId="_10_5_622020d_1132928323371_284174_16642" refid="_10_5_622020d_1132928323371_284174_16642"/><comment classType="Comment" humanType="Comment" icon="index_files/icon_comment_841774062.jpg" name="Defines a framework that allows applications to us..." refElementId="_10_5_622020d_1132928316401_226730_10711" refid="_10_5_622020d_1132928316401_226730_10711"/></ownedElement><owner classType="Package" humanName="Owner" humanType="Package" icon="index_files/icon_package_1518868172.jpg" mode="s,e" name="spi" refElementId="_10_5_622020d_1132928316291_669465_10693" refid="_10_5_622020d_1132928316291_669465_10693"/><owningPackage classType="Package" humanName="Owning Package" humanType="Package" icon="index_files/icon_package_1518868172.jpg" name="spi" refElementId="_10_5_622020d_1132928316291_669465_10693" refid="_10_5_622020d_1132928316291_669465_10693"/><package classType="Package" humanName="Package" humanType="Package" icon="index_files/icon_package_1518868172.jpg" name="spi" refElementId="_10_5_622020d_1132928316291_669465_10693" refid="_10_5_622020d_1132928316291_669465_10693"/><qualifiedName humanName="Qualified Name" mode="e">JDK 5.0 Classes::javax::sql::rowset::spi::SyncResolver</qualifiedName><TO_DO humanName="To Do" mode="s,e"/><visibility humanName="Visibility">public</visibility></interface></magicdraw>