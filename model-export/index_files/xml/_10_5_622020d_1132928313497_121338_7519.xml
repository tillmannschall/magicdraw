<?xml version="1.0" encoding="UTF-8"?><magicdraw><comment classType="Comment" humanType="Comment" icon="index_files/icon_comment_841774062.jpg" id="_10_5_622020d_1132928313497_121338_7519" refElementId="_10_5_622020d_1132928313497_121338_7519"><annotatedElement humanName="Annotated Element" mode="s,e"><class classType="Class" humanType="Class" icon="index_files/icon_class_555864569.jpg" name="TreeSet" refElementId="_9_5_f720368_1110473546706_504953_8945" refid="_9_5_f720368_1110473546706_504953_8945"/></annotatedElement><body humanName="Body" mode="s,e">This class implements the &lt;tt&gt;Set&lt;/tt&gt; interface, backed by a
&lt;tt&gt;TreeMap&lt;/tt&gt; instance.  This class guarantees that the sorted set will
be in ascending element order, sorted according to the &lt;i&gt;natural order&lt;/i&gt;
of the elements (see &lt;tt&gt;Comparable&lt;/tt&gt;), or by the comparator provided at
set creation time, depending on which constructor is used.&lt;p&gt;

This implementation provides guaranteed log(n) time cost for the basic
operations (&lt;tt&gt;add&lt;/tt&gt;, &lt;tt&gt;remove&lt;/tt&gt; and &lt;tt&gt;contains&lt;/tt&gt;).&lt;p&gt;

Note that the ordering maintained by a set (whether or not an explicit
comparator is provided) must be &lt;i&gt;consistent with equals&lt;/i&gt; if it is to
correctly implement the &lt;tt&gt;Set&lt;/tt&gt; interface.  (See &lt;tt&gt;Comparable&lt;/tt&gt;
or &lt;tt&gt;Comparator&lt;/tt&gt; for a precise definition of &lt;i&gt;consistent with
equals&lt;/i&gt;.)  This is so because the &lt;tt&gt;Set&lt;/tt&gt; interface is defined in
terms of the &lt;tt&gt;equals&lt;/tt&gt; operation, but a &lt;tt&gt;TreeSet&lt;/tt&gt; instance
performs all key comparisons using its &lt;tt&gt;compareTo&lt;/tt&gt; (or
&lt;tt&gt;compare&lt;/tt&gt;) method, so two keys that are deemed equal by this method
are, from the standpoint of the set, equal.  The behavior of a set
&lt;i&gt;is&lt;/i&gt; well-defined even if its ordering is inconsistent with equals; it
just fails to obey the general contract of the &lt;tt&gt;Set&lt;/tt&gt; interface.&lt;p&gt;

&lt;b&gt;Note that this implementation is not synchronized.&lt;/b&gt; If multiple
threads access a set concurrently, and at least one of the threads modifies
the set, it &lt;i&gt;must&lt;/i&gt; be synchronized externally.  This is typically
accomplished by synchronizing on some object that naturally encapsulates
the set.  If no such object exists, the set should be "wrapped" using the
&lt;tt&gt;Collections.synchronizedSet&lt;/tt&gt; method.  This is best done at creation
time, to prevent accidental unsynchronized access to the set: &lt;pre&gt;
SortedSet s = Collections.synchronizedSortedSet(new TreeSet(...));
&lt;/pre&gt;&lt;p&gt;

The Iterators returned by this class's &lt;tt&gt;iterator&lt;/tt&gt; method are
&lt;i&gt;fail-fast&lt;/i&gt;: if the set is modified at any time after the iterator is
created, in any way except through the iterator's own &lt;tt&gt;remove&lt;/tt&gt;
method, the iterator will throw a &lt;tt&gt;ConcurrentModificationException&lt;/tt&gt;.
Thus, in the face of concurrent modification, the iterator fails quickly
and cleanly, rather than risking arbitrary, non-deterministic behavior at
an undetermined time in the future.

&lt;p&gt;Note that the fail-fast behavior of an iterator cannot be guaranteed
as it is, generally speaking, impossible to make any hard guarantees in the
presence of unsynchronized concurrent modification.  Fail-fast iterators
throw &lt;tt&gt;ConcurrentModificationException&lt;/tt&gt; on a best-effort basis.
Therefore, it would be wrong to write a program that depended on this
exception for its correctness:   &lt;i&gt;the fail-fast behavior of iterators
should be used only to detect bugs.&lt;/i&gt;&lt;p&gt;

This class is a member of the
&lt;a href="{@docRoot}/../guide/collections/index.html"&gt;
Java Collections Framework&lt;/a&gt;.

@author  Josh Bloch
@version 1.32, 12/19/03
@see	    Collection
@see	    Set
@see	    HashSet
@see     Comparable
@see     Comparator
@see	    Collections#synchronizedSortedSet(SortedSet)
@see	    TreeMap
@since   1.2
</body><documentation humanName="Documentation"/><owner classType="Class" humanName="Owner" humanType="Class" icon="index_files/icon_class_555864569.jpg" mode="s,e" name="TreeSet" refElementId="_9_5_f720368_1110473546706_504953_8945" refid="_9_5_f720368_1110473546706_504953_8945"/><owningElement classType="Class" humanName="Owning Element" humanType="Class" icon="index_files/icon_class_555864569.jpg" name="TreeSet" refElementId="_9_5_f720368_1110473546706_504953_8945" refid="_9_5_f720368_1110473546706_504953_8945"/><TO_DO humanName="To Do" mode="s,e"/></comment></magicdraw>