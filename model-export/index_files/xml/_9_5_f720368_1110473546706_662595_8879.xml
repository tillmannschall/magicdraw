<?xml version="1.0" encoding="UTF-8"?><magicdraw><class classType="Class" humanType="Class" icon="index_files/icon_class_1555793073.jpg" id="_9_5_f720368_1110473546706_662595_8879"><clientDependency humanName="Client Dependency"><interfacerealization classType="InterfaceRealization" humanType="Interface Realization" icon="index_files/icon_interfacerealization_425275537.jpg" isRelationship="true" name="Interface Realization[JDK 5.0 Classes::java::util::LinkedHashMap -&gt; JDK 5.0 Classes::java::util::concurrent::Map&lt;K, V&gt;]" refid="_10_5_622020d_1132928322600_720335_15024"/></clientDependency><documentation humanName="Documentation" mode="standard">&lt;p&gt;Hash table and linked list implementation of the &lt;tt&gt;Map&lt;/tt&gt; interface,
with predictable iteration order.  This implementation differs from
&lt;tt&gt;HashMap&lt;/tt&gt; in that it maintains a doubly-linked list running through
all of its entries.  This linked list defines the iteration ordering,
which is normally the order in which keys were inserted into the map
(&lt;i&gt;insertion-order&lt;/i&gt;).  Note that insertion order is not affected
if a key is &lt;i&gt;re-inserted&lt;/i&gt; into the map.  (A key &lt;tt&gt;k&lt;/tt&gt; is
reinserted into a map &lt;tt&gt;m&lt;/tt&gt; if &lt;tt&gt;m.put(k, v)&lt;/tt&gt; is invoked when
&lt;tt&gt;m.containsKey(k)&lt;/tt&gt; would return &lt;tt&gt;true&lt;/tt&gt; immediately prior to
the invocation.)

&lt;p&gt;This implementation spares its clients from the unspecified, generally
chaotic ordering provided by {@link HashMap} (and {@link Hashtable}),
without incurring the increased cost associated with {@link TreeMap}.  It
can be used to produce a copy of a map that has the same order as the
original, regardless of the original map's implementation:
&lt;pre&gt;
void foo(Map m) {
Map copy = new LinkedHashMap(m);
...
}
&lt;/pre&gt;
This technique is particularly useful if a module takes a map on input,
copies it, and later returns results whose order is determined by that of
the copy.  (Clients generally appreciate having things returned in the same
order they were presented.)

&lt;p&gt;A special {@link #LinkedHashMap(int,float,boolean) constructor} is
provided to create a linked hash map whose order of iteration is the order
in which its entries were last accessed, from least-recently accessed to
most-recently (&lt;i&gt;access-order&lt;/i&gt;).  This kind of map is well-suited to
building LRU caches.  Invoking the &lt;tt&gt;put&lt;/tt&gt; or &lt;tt&gt;get&lt;/tt&gt; method
results in an access to the corresponding entry (assuming it exists after
the invocation completes).  The &lt;tt&gt;putAll&lt;/tt&gt; method generates one entry
access for each mapping in the specified map, in the order that key-value
mappings are provided by the specified map's entry set iterator.  &lt;i&gt;No
other methods generate entry accesses.&lt;/i&gt; In particular, operations on
collection-views do &lt;i&gt;not&lt;/i&gt; affect the order of iteration of the backing
map.

&lt;p&gt;The {@link #removeEldestEntry(Map.Entry)} method may be overridden to
impose a policy for removing stale mappings automatically when new mappings
are added to the map.

&lt;p&gt;This class provides all of the optional &lt;tt&gt;Map&lt;/tt&gt; operations, and
permits null elements.  Like &lt;tt&gt;HashMap&lt;/tt&gt;, it provides constant-time
performance for the basic operations (&lt;tt&gt;add&lt;/tt&gt;, &lt;tt&gt;contains&lt;/tt&gt; and
&lt;tt&gt;remove&lt;/tt&gt;), assuming the hash function disperses elements
properly among the buckets.  Performance is likely to be just slightly
below that of &lt;tt&gt;HashMap&lt;/tt&gt;, due to the added expense of maintaining the
linked list, with one exception: Iteration over the collection-views
of a &lt;tt&gt;LinkedHashMap&lt;/tt&gt; requires time proportional to the &lt;i&gt;size&lt;/i&gt;
of the map, regardless of its capacity.  Iteration over a &lt;tt&gt;HashMap&lt;/tt&gt;
is likely to be more expensive, requiring time proportional to its
&lt;i&gt;capacity&lt;/i&gt;.

&lt;p&gt;A linked hash map has two parameters that affect its performance:
&lt;i&gt;initial capacity&lt;/i&gt; and &lt;i&gt;load factor&lt;/i&gt;.  They are defined precisely
as for &lt;tt&gt;HashMap&lt;/tt&gt;.  Note, however, that the penalty for choosing an
excessively high value for initial capacity is less severe for this class
than for &lt;tt&gt;HashMap&lt;/tt&gt;, as iteration times for this class are unaffected
by capacity.

&lt;p&gt;&lt;strong&gt;Note that this implementation is not synchronized.&lt;/strong&gt; If
multiple threads access a linked hash map concurrently, and at least
one of the threads modifies the map structurally, it &lt;em&gt;must&lt;/em&gt; be
synchronized externally.  This is typically accomplished by synchronizing
on some object that naturally encapsulates the map.  If no such object
exists, the map should be "wrapped" using the
&lt;tt&gt;Collections.synchronizedMap&lt;/tt&gt;method.  This is best done at creation
time, to prevent accidental unsynchronized access:
&lt;pre&gt;
Map m = Collections.synchronizedMap(new LinkedHashMap(...));
&lt;/pre&gt;
A structural modification is any operation that adds or deletes one or more
mappings or, in the case of access-ordered linked hash maps, affects
iteration order.  In insertion-ordered linked hash maps, merely changing
the value associated with a key that is already contained in the map is not
a structural modification.  &lt;strong&gt;In access-ordered linked hash maps,
merely querying the map with &lt;tt&gt;get&lt;/tt&gt; is a structural
modification.&lt;/strong&gt;)

&lt;p&gt;The iterators returned by the &lt;tt&gt;iterator&lt;/tt&gt; methods of the
collections returned by all of this class's collection view methods are
&lt;em&gt;fail-fast&lt;/em&gt;: if the map is structurally modified at any time after
the iterator is created, in any way except through the iterator's own
remove method, the iterator will throw a
&lt;tt&gt;ConcurrentModificationException&lt;/tt&gt;.  Thus, in the face of concurrent
modification, the Iterator fails quickly and cleanly, rather than risking
arbitrary, non-deterministic behavior at an undetermined time in the
future.

&lt;p&gt;Note that the fail-fast behavior of an iterator cannot be guaranteed
as it is, generally speaking, impossible to make any hard guarantees in the
presence of unsynchronized concurrent modification.  Fail-fast iterators
throw &lt;tt&gt;ConcurrentModificationException&lt;/tt&gt; on a best-effort basis.
Therefore, it would be wrong to write a program that depended on this
exception for its correctness:   &lt;i&gt;the fail-fast behavior of iterators
should be used only to detect bugs.&lt;/i&gt;

&lt;p&gt;This class is a member of the
&lt;a href="{@docRoot}/../guide/collections/index.html"&gt;
Java Collections Framework&lt;/a&gt;.

@author  Josh Bloch
@version 1.18, 02/19/04
@see     Object#hashCode()
@see     Collection
@see     Map
@see     HashMap
@see     TreeMap
@see     Hashtable
@since   JDK1.4
</documentation><generalization humanName="Generalization"><generalization classType="Generalization" humanType="Generalization" icon="index_files/icon_generalization_99042020.jpg" isRelationship="true" refid="_10_5_622020d_1132928322600_141032_15029"/></generalization><interfaceRealization humanName="Interface Realization"><interfacerealization classType="InterfaceRealization" humanType="Interface Realization" icon="index_files/icon_interfacerealization_425275537.jpg" isRelationship="true" name="Interface Realization[JDK 5.0 Classes::java::util::LinkedHashMap -&gt; JDK 5.0 Classes::java::util::concurrent::Map&lt;K, V&gt;]" refid="_10_5_622020d_1132928322600_720335_15024"/></interfaceRealization><isAbstract humanName="Is Abstract" mode="s,e">false</isAbstract><isActive humanName="Is Active" mode="s,e">false</isActive><isFinalSpecialization humanName="Is Final Specialization" mode="e">false</isFinalSpecialization><isLeaf humanName="Is Leaf" mode="e">false</isLeaf><member humanName="Member"><class classType="Class" humanType="Class" icon="index_files/icon_class_1555793073.jpg" name="Entry" refid="_9_5_f720368_1110473547878_693537_19538"/><class classType="Class" humanType="Class" icon="index_files/icon_class_1555793073.jpg" name="EntryIterator" refid="_9_5_f720368_1110473547878_449234_19544"/><class classType="Class" humanType="Class" icon="index_files/icon_class_1555793073.jpg" name="KeyIterator" refid="_9_5_f720368_1110473547878_949547_19542"/><class classType="Class" humanType="Class" icon="index_files/icon_class_303957224.jpg" name="LinkedHashIterator" refid="_9_5_f720368_1110473547878_474201_19541"/><class classType="Class" humanType="Class" icon="index_files/icon_class_1555793073.jpg" name="ValueIterator" refid="_9_5_f720368_1110473547878_937042_19543"/></member><name humanName="Name" mode="s,e">LinkedHashMap</name><namespace classType="Package" humanName="Namespace" humanType="Package" icon="index_files/icon_package_2000410491.jpg" name="util" refid="_9_5_f720368_1110473547799_165814_19031"/><nestedClassifier humanName="Nested Classifier"><class classType="Class" humanType="Class" icon="index_files/icon_class_1555793073.jpg" name="Entry" refid="_9_5_f720368_1110473547878_693537_19538"/><class classType="Class" humanType="Class" icon="index_files/icon_class_1555793073.jpg" name="EntryIterator" refid="_9_5_f720368_1110473547878_449234_19544"/><class classType="Class" humanType="Class" icon="index_files/icon_class_1555793073.jpg" name="KeyIterator" refid="_9_5_f720368_1110473547878_949547_19542"/><class classType="Class" humanType="Class" icon="index_files/icon_class_303957224.jpg" name="LinkedHashIterator" refid="_9_5_f720368_1110473547878_474201_19541"/><class classType="Class" humanType="Class" icon="index_files/icon_class_1555793073.jpg" name="ValueIterator" refid="_9_5_f720368_1110473547878_937042_19543"/></nestedClassifier><ownedComment humanName="Owned Comment"><comment classType="Comment" humanType="Comment" icon="index_files/icon_comment_2051026490.jpg" refid="_10_5_622020d_1132928313276_339012_7358"/></ownedComment><ownedElement humanName="Owned Element"><redefinabletemplatesignature classType="RedefinableTemplateSignature" humanType="Redefinable Template Signature" icon="index_files/icon_redefinabletemplatesignature_1318872564.jpg" name="" refid="_10_5_622020d_1132928313266_431409_7343"/><generalization classType="Generalization" humanType="Generalization" icon="index_files/icon_generalization_99042020.jpg" isRelationship="true" refid="_10_5_622020d_1132928322600_141032_15029"/><comment classType="Comment" humanType="Comment" icon="index_files/icon_comment_2051026490.jpg" refid="_10_5_622020d_1132928313276_339012_7358"/><class classType="Class" humanType="Class" icon="index_files/icon_class_1555793073.jpg" name="Entry" refid="_9_5_f720368_1110473547878_693537_19538"/><class classType="Class" humanType="Class" icon="index_files/icon_class_1555793073.jpg" name="EntryIterator" refid="_9_5_f720368_1110473547878_449234_19544"/><interfacerealization classType="InterfaceRealization" humanType="Interface Realization" icon="index_files/icon_interfacerealization_425275537.jpg" isRelationship="true" name="Interface Realization[JDK 5.0 Classes::java::util::LinkedHashMap -&gt; JDK 5.0 Classes::java::util::concurrent::Map&lt;K, V&gt;]" refid="_10_5_622020d_1132928322600_720335_15024"/><class classType="Class" humanType="Class" icon="index_files/icon_class_1555793073.jpg" name="KeyIterator" refid="_9_5_f720368_1110473547878_949547_19542"/><class classType="Class" humanType="Class" icon="index_files/icon_class_303957224.jpg" name="LinkedHashIterator" refid="_9_5_f720368_1110473547878_474201_19541"/><class classType="Class" humanType="Class" icon="index_files/icon_class_1555793073.jpg" name="ValueIterator" refid="_9_5_f720368_1110473547878_937042_19543"/></ownedElement><ownedMember humanName="Owned Member"><class classType="Class" humanType="Class" icon="index_files/icon_class_1555793073.jpg" name="Entry" refid="_9_5_f720368_1110473547878_693537_19538"/><class classType="Class" humanType="Class" icon="index_files/icon_class_1555793073.jpg" name="EntryIterator" refid="_9_5_f720368_1110473547878_449234_19544"/><class classType="Class" humanType="Class" icon="index_files/icon_class_1555793073.jpg" name="KeyIterator" refid="_9_5_f720368_1110473547878_949547_19542"/><class classType="Class" humanType="Class" icon="index_files/icon_class_303957224.jpg" name="LinkedHashIterator" refid="_9_5_f720368_1110473547878_474201_19541"/><class classType="Class" humanType="Class" icon="index_files/icon_class_1555793073.jpg" name="ValueIterator" refid="_9_5_f720368_1110473547878_937042_19543"/></ownedMember><ownedTemplateSignature classType="RedefinableTemplateSignature" humanName="Owned Template Signature" humanType="Redefinable Template Signature" icon="index_files/icon_redefinabletemplatesignature_1318872564.jpg" name="" refid="_10_5_622020d_1132928313266_431409_7343"/><owner classType="Package" humanName="Owner" humanType="Package" icon="index_files/icon_package_2000410491.jpg" mode="s,e" name="util" refid="_9_5_f720368_1110473547799_165814_19031"/><owningPackage classType="Package" humanName="Owning Package" humanType="Package" icon="index_files/icon_package_2000410491.jpg" name="util" refid="_9_5_f720368_1110473547799_165814_19031"/><package classType="Package" humanName="Package" humanType="Package" icon="index_files/icon_package_2000410491.jpg" name="util" refid="_9_5_f720368_1110473547799_165814_19031"/><qualifiedName humanName="Qualified Name" mode="e">JDK 5.0 Classes::java::util::LinkedHashMap</qualifiedName><realizedInterfaces humanName="Realized Interface" mode="s,e"><interface classType="Interface" humanType="Interface" icon="index_files/icon_interface_118881143.jpg" name="Map&lt;K, V&gt;" refid="_10_5_622020d_1132928322259_617753_14428"/></realizedInterfaces><superClass humanName="Super Class"><class classType="Class" humanType="Class" icon="index_files/icon_class_1555793073.jpg" name="HashMap&lt;K, V&gt;" refid="_10_5_622020d_1132928322600_275131_15025"/></superClass><TO_DO humanName="To Do" mode="s,e"/><visibility humanName="Visibility" mode="e">public</visibility></class></magicdraw>