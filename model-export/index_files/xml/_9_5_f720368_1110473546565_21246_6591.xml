<?xml version="1.0" encoding="UTF-8"?><magicdraw><class classType="Class" humanType="Class" icon="index_files/icon_class_555864569.jpg" id="_9_5_f720368_1110473546565_21246_6591" refElementId="_9_5_f720368_1110473546565_21246_6591"><documentation humanName="Documentation" mode="s">An event which indicates that a mouse action occurred in a component.
A mouse action is considered to occur in a particular component if and only
if the mouse cursor is over the unobscured part of the component's bounds
when the action happens.
Component bounds can be obscurred by the visible component's children or by a
menu or by a top-level window.
This event is used both for mouse events (click, enter, exit) and mouse
motion events (moves and drags).
&lt;P&gt;
This low-level event is generated by a component object for:
&lt;ul&gt;
&lt;li&gt;Mouse Events
&lt;ul&gt;
&lt;li&gt;a mouse button is pressed
&lt;li&gt;a mouse button is released
&lt;li&gt;a mouse button is clicked (pressed and released)
&lt;li&gt;the mouse cursor enters the unobscured part of component's geometry
&lt;li&gt;the mouse cursor exits the unobscured part of component's geometry
&lt;/ul&gt;
&lt;li&gt; Mouse Motion Events
&lt;ul&gt;
&lt;li&gt;the mouse is moved
&lt;li&gt;the mouse is dragged
&lt;/ul&gt;
&lt;/ul&gt;
&lt;P&gt;
A &lt;code&gt;MouseEvent&lt;/code&gt; object is passed to every
&lt;code&gt;MouseListener&lt;/code&gt;
or &lt;code&gt;MouseAdapter&lt;/code&gt; object which is registered to receive
the "interesting" mouse events using the component's
&lt;code&gt;addMouseListener&lt;/code&gt; method.
(&lt;code&gt;MouseAdapter&lt;/code&gt; objects implement the
&lt;code&gt;MouseListener&lt;/code&gt; interface.) Each such listener object
gets a &lt;code&gt;MouseEvent&lt;/code&gt; containing the mouse event.
&lt;P&gt;
A &lt;code&gt;MouseEvent&lt;/code&gt; object is also passed to every
&lt;code&gt;MouseMotionListener&lt;/code&gt; or
&lt;code&gt;MouseMotionAdapter&lt;/code&gt; object which is registered to receive
mouse motion events using the component's
&lt;code&gt;addMouseMotionListener&lt;/code&gt;
method. (&lt;code&gt;MouseMotionAdapter&lt;/code&gt; objects implement the
&lt;code&gt;MouseMotionListener&lt;/code&gt; interface.) Each such listener object
gets a &lt;code&gt;MouseEvent&lt;/code&gt; containing the mouse motion event.
&lt;P&gt;
When a mouse button is clicked, events are generated and sent to the
registered &lt;code&gt;MouseListener&lt;/code&gt;s.
The state of modal keys can be retrieved using {@link InputEvent#getModifiers}
and {@link InputEvent#getModifiersEx}.
The button mask returned by {@link InputEvent#getModifiers} reflects
only the button that changed state, not the current state of all buttons.
(Note: Due to overlap in the values of ALT_MASK/BUTTON2_MASK and
META_MASK/BUTTON3_MASK, this is not always true for mouse events involving
modifier keys).
To get the state of all buttons and modifier keys, use
{@link InputEvent#getModifiersEx}.
The button which has changed state is returned by {@link MouseEvent#getButton}
&lt;P&gt;
For example, if the first mouse button is pressed, events are sent in the
following order:
&lt;PRE&gt;
&lt;b   &gt;id           &lt;/b   &gt;   &lt;b   &gt;modifiers   &lt;/b   &gt; &lt;b   &gt;button &lt;/b   &gt;
&lt;code&gt;MOUSE_PRESSED&lt;/code&gt;:  &lt;code&gt;BUTTON1_MASK&lt;/code&gt; &lt;code&gt;BUTTON1&lt;/code&gt;
&lt;code&gt;MOUSE_RELEASED&lt;/code&gt;: &lt;code&gt;BUTTON1_MASK&lt;/code&gt; &lt;code&gt;BUTTON1&lt;/code&gt;
&lt;code&gt;MOUSE_CLICKED&lt;/code&gt;:  &lt;code&gt;BUTTON1_MASK&lt;/code&gt; &lt;code&gt;BUTTON1&lt;/code&gt;
&lt;/PRE&gt;
When multiple mouse buttons are pressed, each press, release, and click
results in a separate event.
&lt;P&gt;
For example, if the user presses &lt;b&gt;button 1&lt;/b&gt; followed by
&lt;b&gt;button 2&lt;/b&gt;, and then releases them in the same order,
the following sequence of events is generated:
&lt;PRE&gt;
&lt;b   &gt;id           &lt;/b   &gt;   &lt;b   &gt;modifiers   &lt;/b   &gt; &lt;b   &gt;button &lt;/b   &gt;
&lt;code&gt;MOUSE_PRESSED&lt;/code&gt;:  &lt;code&gt;BUTTON1_MASK&lt;/code&gt; &lt;code&gt;BUTTON1&lt;/code&gt;
&lt;code&gt;MOUSE_PRESSED&lt;/code&gt;:  &lt;code&gt;BUTTON2_MASK&lt;/code&gt; &lt;code&gt;BUTTON2&lt;/code&gt;
&lt;code&gt;MOUSE_RELEASED&lt;/code&gt;: &lt;code&gt;BUTTON1_MASK&lt;/code&gt; &lt;code&gt;BUTTON1&lt;/code&gt;
&lt;code&gt;MOUSE_CLICKED&lt;/code&gt;:  &lt;code&gt;BUTTON1_MASK&lt;/code&gt; &lt;code&gt;BUTTON1&lt;/code&gt;
&lt;code&gt;MOUSE_RELEASED&lt;/code&gt;: &lt;code&gt;BUTTON2_MASK&lt;/code&gt; &lt;code&gt;BUTTON2&lt;/code&gt;
&lt;code&gt;MOUSE_CLICKED&lt;/code&gt;:  &lt;code&gt;BUTTON2_MASK&lt;/code&gt; &lt;code&gt;BUTTON2&lt;/code&gt;
&lt;/PRE&gt;
If &lt;b&gt;button 2&lt;/b&gt; is released first, the
&lt;code&gt;MOUSE_RELEASED&lt;/code&gt;/&lt;code&gt;MOUSE_CLICKED&lt;/code&gt; pair
for &lt;code&gt;BUTTON2_MASK&lt;/code&gt; arrives first,
followed by the pair for &lt;code&gt;BUTTON1_MASK&lt;/code&gt;.
&lt;p&gt;

&lt;code&gt;MOUSE_DRAGGED&lt;/code&gt; events are delivered to the &lt;code&gt;Component&lt;/code&gt;
in which the mouse button was pressed until the mouse button is released
(regardless of whether the mouse position is within the bounds of the
&lt;code&gt;Component&lt;/code&gt;).  Due to platform-dependent Drag&amp;Drop implementations,
&lt;code&gt;MOUSE_DRAGGED&lt;/code&gt; events may not be delivered during a native
Drag&amp;Drop operation.

In a multi-screen environment mouse drag events are delivered to the
&lt;code&gt;Component&lt;/code&gt; even if the mouse position is outside the bounds of the
&lt;code&gt;GraphicsConfiguration&lt;/code&gt; associated with that
&lt;code&gt;Component&lt;/code&gt;. However, the reported position for mouse drag events
in this case may differ from the actual mouse position:
&lt;ul&gt;
&lt;li&gt;In a multi-screen environment without a virtual device:
&lt;br&gt;
The reported coordinates for mouse drag events are clipped to fit within the
bounds of the &lt;code&gt;GraphicsConfiguration&lt;/code&gt; associated with
the &lt;code&gt;Component&lt;/code&gt;.
&lt;li&gt;In a multi-screen environment with a virtual device:
&lt;br&gt;
The reported coordinates for mouse drag events are clipped to fit within the
bounds of the virtual device associated with the &lt;code&gt;Component&lt;/code&gt;.
&lt;/ul&gt;

@author Carl Quinn
1.49, 12/19/03

@see MouseAdapter
@see MouseListener
@see MouseMotionAdapter
@see MouseMotionListener
@see MouseWheelListener
@see &lt;a href="http://java.sun.com/docs/books/tutorial/post1.0/ui/mouselistener.html"&gt;Tutorial: Writing a Mouse Listener&lt;/a&gt;
@see &lt;a href="http://java.sun.com/docs/books/tutorial/post1.0/ui/mousemotionlistener.html"&gt;Tutorial: Writing a Mouse Motion Listener&lt;/a&gt;
@see &lt;a href="http://www.awl.com/cp/javaseries/jcl1_2.html"&gt;Reference: The Java Class Libraries (update file)&lt;/a&gt;

@since 1.1
</documentation><generalization humanName="Generalization"><generalization classType="Generalization" humanType="Generalization" icon="index_files/icon_generalization_1454922150.jpg" isRelationship="true" name="Generalization[JDK 5.0 Classes::java::awt::event::MouseEvent -&gt; JDK 5.0 Classes::java::awt::event::InputEvent]" refElementId="_10_5_622020d_1132928320597_729042_12952" refid="_10_5_622020d_1132928320597_729042_12952"/></generalization><isAbstract humanName="Is Abstract" mode="s,e">false</isAbstract><isActive humanName="Is Active" mode="s,e">false</isActive><isFinalSpecialization humanName="Is Final Specialization" mode="e">false</isFinalSpecialization><isLeaf humanName="Is Leaf" mode="e">false</isLeaf><name humanName="Name" mode="s,e">MouseEvent</name><namespace classType="Package" humanName="Namespace" humanType="Package" icon="index_files/icon_package_1518868172.jpg" name="event" refElementId="_9_5_f720368_1110473547284_7684_16441" refid="_9_5_f720368_1110473547284_7684_16441"/><ownedComment humanName="Owned Comment"><comment classType="Comment" humanType="Comment" icon="index_files/icon_comment_841774062.jpg" name="An event which indicates that a mouse action occur..." refElementId="_10_5_622020d_1132928305756_674681_3743" refid="_10_5_622020d_1132928305756_674681_3743"/></ownedComment><ownedElement humanName="Owned Element"><generalization classType="Generalization" humanType="Generalization" icon="index_files/icon_generalization_1454922150.jpg" isRelationship="true" name="Generalization[JDK 5.0 Classes::java::awt::event::MouseEvent -&gt; JDK 5.0 Classes::java::awt::event::InputEvent]" refElementId="_10_5_622020d_1132928320597_729042_12952" refid="_10_5_622020d_1132928320597_729042_12952"/><comment classType="Comment" humanType="Comment" icon="index_files/icon_comment_841774062.jpg" name="An event which indicates that a mouse action occur..." refElementId="_10_5_622020d_1132928305756_674681_3743" refid="_10_5_622020d_1132928305756_674681_3743"/></ownedElement><owner classType="Package" humanName="Owner" humanType="Package" icon="index_files/icon_package_1518868172.jpg" mode="s,e" name="event" refElementId="_9_5_f720368_1110473547284_7684_16441" refid="_9_5_f720368_1110473547284_7684_16441"/><owningPackage classType="Package" humanName="Owning Package" humanType="Package" icon="index_files/icon_package_1518868172.jpg" name="event" refElementId="_9_5_f720368_1110473547284_7684_16441" refid="_9_5_f720368_1110473547284_7684_16441"/><package classType="Package" humanName="Package" humanType="Package" icon="index_files/icon_package_1518868172.jpg" name="event" refElementId="_9_5_f720368_1110473547284_7684_16441" refid="_9_5_f720368_1110473547284_7684_16441"/><qualifiedName humanName="Qualified Name" mode="e">JDK 5.0 Classes::java::awt::event::MouseEvent</qualifiedName><superClass humanName="Super Class"><class classType="Class" humanType="Class" icon="index_files/icon_class_795627831.jpg" name="InputEvent" refElementId="_9_5_f720368_1110473546565_876618_6571" refid="_9_5_f720368_1110473546565_876618_6571"/></superClass><TO_DO humanName="To Do" mode="s,e"/><visibility humanName="Visibility" mode="e">public</visibility></class></magicdraw>