<?xml version="1.0" encoding="UTF-8"?><magicdraw><comment classType="Comment" humanType="Comment" icon="index_files/icon_comment_841774062.jpg" id="_10_5_622020d_1132928307929_602694_4988" refElementId="_10_5_622020d_1132928307929_602694_4988"><annotatedElement humanName="Annotated Element" mode="s,e"><class classType="Class" humanType="Class" icon="index_files/icon_class_795627831.jpg" name="ClassLoader" refElementId="_9_5_f720368_1110473546612_433369_7581" refid="_9_5_f720368_1110473546612_433369_7581"/></annotatedElement><body humanName="Body" mode="s,e">A class loader is an object that is responsible for loading classes. The
class &lt;tt&gt;ClassLoader&lt;/tt&gt; is an abstract class.  Given the &lt;a
href="#name"&gt;binary name&lt;/a&gt; of a class, a class loader should attempt to
locate or generate data that constitutes a definition for the class.  A
typical strategy is to transform the name into a file name and then read a
"class file" of that name from a file system.

&lt;p&gt; Every {@link Class &lt;tt&gt;Class&lt;/tt&gt;} object contains a {@link
Class#getClassLoader() reference} to the &lt;tt&gt;ClassLoader&lt;/tt&gt; that defined
it.

&lt;p&gt; &lt;tt&gt;Class&lt;/tt&gt; objects for array classes are not created by class
loaders, but are created automatically as required by the Java runtime.
The class loader for an array class, as returned by {@link
Class#getClassLoader()} is the same as the class loader for its element
type; if the element type is a primitive type, then the array class has no
class loader.

&lt;p&gt; Applications implement subclasses of &lt;tt&gt;ClassLoader&lt;/tt&gt; in order to
extend the manner in which the Java virtual machine dynamically loads
classes.

&lt;p&gt; Class loaders may typically be used by security managers to indicate
security domains.

&lt;p&gt; The &lt;tt&gt;ClassLoader&lt;/tt&gt; class uses a delegation model to search for
classes and resources.  Each instance of &lt;tt&gt;ClassLoader&lt;/tt&gt; has an
associated parent class loader.  When requested to find a class or
resource, a &lt;tt&gt;ClassLoader&lt;/tt&gt; instance will delegate the search for the
class or resource to its parent class loader before attempting to find the
class or resource itself.  The virtual machine's built-in class loader,
called the "bootstrap class loader", does not itself have a parent but may
serve as the parent of a &lt;tt&gt;ClassLoader&lt;/tt&gt; instance.

&lt;p&gt; Normally, the Java virtual machine loads classes from the local file
system in a platform-dependent manner.  For example, on UNIX systems, the
virtual machine loads classes from the directory defined by the
&lt;tt&gt;CLASSPATH&lt;/tt&gt; environment variable.

&lt;p&gt; However, some classes may not originate from a file; they may originate
from other sources, such as the network, or they could be constructed by an
application.  The method {@link #defineClass(String, byte[], int, int)
&lt;tt&gt;defineClass&lt;/tt&gt;} converts an array of bytes into an instance of class
&lt;tt&gt;Class&lt;/tt&gt;. Instances of this newly defined class can be created using
{@link Class#newInstance &lt;tt&gt;Class.newInstance&lt;/tt&gt;}.

&lt;p&gt; The methods and constructors of objects created by a class loader may
reference other classes.  To determine the class(es) referred to, the Java
virtual machine invokes the {@link #loadClass &lt;tt&gt;loadClass&lt;/tt&gt;} method of
the class loader that originally created the class.

&lt;p&gt; For example, an application could create a network class loader to
download class files from a server.  Sample code might look like:

&lt;blockquote&gt;&lt;pre&gt;
ClassLoader loader&amp;nbsp;= new NetworkClassLoader(host,&amp;nbsp;port);
Object main&amp;nbsp;= loader.loadClass("Main", true).newInstance();
&amp;nbsp;.&amp;nbsp;.&amp;nbsp;.
&lt;/pre&gt;&lt;/blockquote&gt;

&lt;p&gt; The network class loader subclass must define the methods {@link
#findClass &lt;tt&gt;findClass&lt;/tt&gt;} and &lt;tt&gt;loadClassData&lt;/tt&gt; to load a class
from the network.  Once it has downloaded the bytes that make up the class,
it should use the method {@link #defineClass &lt;tt&gt;defineClass&lt;/tt&gt;} to
create a class instance.  A sample implementation is:

&lt;blockquote&gt;&lt;pre&gt;
class NetworkClassLoader extends ClassLoader {
String host;
int port;

public Class findClass(String name) {
byte[] b = loadClassData(name);
return defineClass(name, b, 0, b.length);
}

private byte[] loadClassData(String name) {
load the class data from the connection
&amp;nbsp;.&amp;nbsp;.&amp;nbsp;.
}
}
&lt;/pre&gt;&lt;/blockquote&gt;

&lt;h4&gt; &lt;a name="name"&gt;Binary names&lt;/a&gt; &lt;/h4&gt;

&lt;p&gt; Any class name provided as a {@link String} parameter to methods in
&lt;tt&gt;ClassLoader&lt;/tt&gt; must be a binary name as defined by the &lt;a
href="http://java.sun.com/docs/books/jls/"&gt;Java Language Specification&lt;/a&gt;.

&lt;p&gt; Examples of valid class names include:
&lt;blockquote&gt;&lt;pre&gt;
"java.lang.String"
"javax.swing.JSpinner$DefaultEditor"
"java.security.KeyStore$Builder$FileBuilder$1"
"java.net.URLClassLoader$3$1"
&lt;/pre&gt;&lt;/blockquote&gt;

@version  1.186, 08/02/04
@see      #resolveClass(Class)
@since 1.0
</body><documentation humanName="Documentation"/><owner classType="Class" humanName="Owner" humanType="Class" icon="index_files/icon_class_795627831.jpg" mode="s,e" name="ClassLoader" refElementId="_9_5_f720368_1110473546612_433369_7581" refid="_9_5_f720368_1110473546612_433369_7581"/><owningElement classType="Class" humanName="Owning Element" humanType="Class" icon="index_files/icon_class_795627831.jpg" name="ClassLoader" refElementId="_9_5_f720368_1110473546612_433369_7581" refid="_9_5_f720368_1110473546612_433369_7581"/><TO_DO humanName="To Do" mode="s,e"/></comment></magicdraw>