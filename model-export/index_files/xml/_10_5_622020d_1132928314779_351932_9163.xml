<?xml version="1.0" encoding="UTF-8"?><magicdraw><comment classType="Comment" humanType="Comment" icon="index_files/icon_comment_841774062.jpg" id="_10_5_622020d_1132928314779_351932_9163" refElementId="_10_5_622020d_1132928314779_351932_9163"><annotatedElement humanName="Annotated Element" mode="s,e"><class classType="Class" humanType="Class" icon="index_files/icon_class_795627831.jpg" name="IIOMetadata" refElementId="_9_5_f720368_1110473546706_158357_9009" refid="_9_5_f720368_1110473546706_158357_9009"/></annotatedElement><body humanName="Body" mode="s,e">An abstract class to be extended by objects that represent metadata
(non-image data) associated with images and streams.  Plug-ins
represent metadata using opaque, plug-in specific objects.  These
objects, however, provide the ability to access their internal
information as a tree of &lt;code&gt;IIOMetadataNode&lt;/code&gt; objects that
support the XML DOM interfaces as well as additional interfaces for
storing non-textual data and retrieving information about legal
data values.  The format of such trees is plug-in dependent, but
plug-ins may choose to support a plug-in neutral format described
below.  A single plug-in may support multiple metadata formats,
whose names maybe determined by calling
&lt;code&gt;getMetadataFormatNames&lt;/code&gt;.  The plug-in may also support
a single special format, referred to as the "native" format, which
is designed to encode its metadata losslessly.  This format will
typically be designed specifically to work with a specific file
format, so that images may be loaded and saved in the same format
with no loss of metadata, but may be less useful for transfering
metadata between an &lt;code&gt;ImageReader&lt;/code&gt; and an
&lt;code&gt;ImageWriter&lt;/code&gt; for different image formats.  To convert
between two native formats as losslessly as the image file formats
will allow, an &lt;code&gt;ImageTranscoder&lt;/code&gt; object must be used.

@see javax.imageio.ImageReader#getImageMetadata
@see javax.imageio.ImageReader#getStreamMetadata
@see javax.imageio.ImageReader#readAll
@see javax.imageio.ImageWriter#getDefaultStreamMetadata
@see javax.imageio.ImageWriter#getDefaultImageMetadata
@see javax.imageio.ImageWriter#write
@see javax.imageio.ImageWriter#convertImageMetadata
@see javax.imageio.ImageWriter#convertStreamMetadata
@see javax.imageio.IIOImage
@see javax.imageio.ImageTranscoder

@version 0.5
</body><documentation humanName="Documentation"/><owner classType="Class" humanName="Owner" humanType="Class" icon="index_files/icon_class_795627831.jpg" mode="s,e" name="IIOMetadata" refElementId="_9_5_f720368_1110473546706_158357_9009" refid="_9_5_f720368_1110473546706_158357_9009"/><owningElement classType="Class" humanName="Owning Element" humanType="Class" icon="index_files/icon_class_795627831.jpg" name="IIOMetadata" refElementId="_9_5_f720368_1110473546706_158357_9009" refid="_9_5_f720368_1110473546706_158357_9009"/><TO_DO humanName="To Do" mode="s,e"/></comment></magicdraw>