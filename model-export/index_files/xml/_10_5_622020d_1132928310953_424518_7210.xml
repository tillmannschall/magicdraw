<?xml version="1.0" encoding="UTF-8"?><magicdraw><comment classType="Comment" humanType="Comment" icon="index_files/icon_comment_2051026490.jpg" id="_10_5_622020d_1132928310953_424518_7210"><annotatedElement humanName="Annotated Element" mode="s,e"><class classType="Class" humanType="Class" icon="index_files/icon_class_1555793073.jpg" name="EnumMap" refid="_10_5_622020d_1132928310953_797967_7192"/></annotatedElement><body humanName="Body" mode="s,e">A specialized {@link Map} implementation for use with enum type keys.  All
of the keys in an enum map must come from a single enum type that is
specified, explicitly or implicitly, when the map is created.  Enum maps
are represented internally as arrays.  This representation is extremely
compact and efficient.

&lt;p&gt;Enum maps are maintained in the &lt;i&gt;natural order&lt;/i&gt; of their keys
(the order in which the enum constants are declared).  This is reflected
in the iterators returned by the collections views ({@link #keySet()},
{@link #entrySet()}, and {@link #values()}).

&lt;p&gt;Iterators returned by the collection views are &lt;i&gt;weakly consistent&lt;/i&gt;:
they will never throw {@link ConcurrentModificationException} and they may
or may not show the effects of any modifications to the map that occur while
the iteration is in progress.

&lt;p&gt;Null keys are not permitted.  Attempts to insert a null key will
throw {@link NullPointerException}.  Attempts to test for the
presence of a null key or to remove one will, however, function properly.
Null values are permitted.
&lt;P&gt;Like most collection implementations &lt;tt&gt;EnumMap&lt;/tt&gt; is not
synchronized. If multiple threads access an enum map concurrently, and at
least one of the threads modifies the map, it should be synchronized
externally.  This is typically accomplished by synchronizing on some
object that naturally encapsulates the enum map.  If no such object exists,
the map should be "wrapped" using the {@link Collections#synchronizedMap}
method.  This is best done at creation time, to prevent accidental
unsynchronized access:

&lt;pre&gt;
Map&lt;EnumKey, V&gt; m = Collections.synchronizedMap(new EnumMap(...));
&lt;/pre&gt;

&lt;p&gt;Implementation note: All basic operations execute in constant time.
They are likely (though not guaranteed) to be faster than their
{@link HashMap} counterparts.

&lt;p&gt;This class is a member of the
&lt;a href="{@docRoot}/../guide/collections/index.html"&gt;
Java Collections Framework&lt;/a&gt;.

@author Josh Bloch
@version 1.10, 07/15/04
@see EnumSet
@since 1.5
</body><documentation humanName="Documentation"/><owner classType="Class" humanName="Owner" humanType="Class" icon="index_files/icon_class_1555793073.jpg" mode="s,e" name="EnumMap" refid="_10_5_622020d_1132928310953_797967_7192"/><owningElement classType="Class" humanName="Owning Element" humanType="Class" icon="index_files/icon_class_1555793073.jpg" name="EnumMap" refid="_10_5_622020d_1132928310953_797967_7192"/><TO_DO humanName="To Do" mode="s,e"/></comment></magicdraw>