<?xml version="1.0" encoding="UTF-8"?><magicdraw><comment classType="Comment" humanType="Comment" icon="index_files/icon_comment_2051026490.jpg" id="_10_5_622020d_1132928308159_370438_5154"><annotatedElement humanName="Annotated Element" mode="s,e"><class classType="Class" humanType="Class" icon="index_files/icon_class_1555793073.jpg" name="StringBuffer" refid="_9_5_f720368_1110473546612_225069_7693"/></annotatedElement><body humanName="Body" mode="s,e">A thread-safe, mutable sequence of characters.
A string buffer is like a {@link String}, but can be modified. At any
point in time it contains some particular sequence of characters, but
the length and content of the sequence can be changed through certain
method calls.
&lt;p&gt;
String buffers are safe for use by multiple threads. The methods
are synchronized where necessary so that all the operations on any
particular instance behave as if they occur in some serial order
that is consistent with the order of the method calls made by each of
the individual threads involved.
&lt;p&gt;
The principal operations on a &lt;code&gt;StringBuffer&lt;/code&gt; are the
&lt;code&gt;append&lt;/code&gt; and &lt;code&gt;insert&lt;/code&gt; methods, which are
overloaded so as to accept data of any type. Each effectively
converts a given datum to a string and then appends or inserts the
characters of that string to the string buffer. The
&lt;code&gt;append&lt;/code&gt; method always adds these characters at the end
of the buffer; the &lt;code&gt;insert&lt;/code&gt; method adds the characters at
a specified point.
&lt;p&gt;
For example, if &lt;code&gt;z&lt;/code&gt; refers to a string buffer object
whose current contents are "&lt;code&gt;start&lt;/code&gt;", then
the method call &lt;code&gt;z.append("le")&lt;/code&gt; would cause the string
buffer to contain "&lt;code&gt;startle&lt;/code&gt;", whereas
&lt;code&gt;z.insert(4, "le")&lt;/code&gt; would alter the string buffer to
contain "&lt;code&gt;starlet&lt;/code&gt;".
&lt;p&gt;
In general, if sb refers to an instance of a &lt;code&gt;StringBuffer&lt;/code&gt;,
then &lt;code&gt;sb.append(x)&lt;/code&gt; has the same effect as
&lt;code&gt;sb.insert(sb.length(),&amp;nbsp;x)&lt;/code&gt;.
&lt;p&gt;
Whenever an operation occurs involving a source sequence (such as
appending or inserting from a source sequence) this class synchronizes
only on the string buffer performing the operation, not on the source.
&lt;p&gt;
Every string buffer has a capacity. As long as the length of the
character sequence contained in the string buffer does not exceed
the capacity, it is not necessary to allocate a new internal
buffer array. If the internal buffer overflows, it is
automatically made larger.

As of  release JDK 5, this class has been supplemented with an equivalent
class designed for use by a single thread, {@link StringBuilder}.  The
&lt;tt&gt;StringBuilder&lt;/tt&gt; class should generally be used in preference to
this one, as it supports all of the same operations but it is faster, as
it performs no synchronization.

@author	Arthur van Hoff
@version 	1.99, 07/15/04
@see     java.lang.StringBuilder
@see     java.lang.String
@since   JDK1.0
</body><documentation humanName="Documentation"/><owner classType="Class" humanName="Owner" humanType="Class" icon="index_files/icon_class_1555793073.jpg" mode="s,e" name="StringBuffer" refid="_9_5_f720368_1110473546612_225069_7693"/><owningElement classType="Class" humanName="Owning Element" humanType="Class" icon="index_files/icon_class_1555793073.jpg" name="StringBuffer" refid="_9_5_f720368_1110473546612_225069_7693"/><TO_DO humanName="To Do" mode="s,e"/></comment></magicdraw>