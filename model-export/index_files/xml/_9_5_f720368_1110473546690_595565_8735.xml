<?xml version="1.0" encoding="UTF-8"?><magicdraw><class classType="Class" humanType="Class" icon="index_files/icon_class_555864569.jpg" id="_9_5_f720368_1110473546690_595565_8735" refElementId="_9_5_f720368_1110473546690_595565_8735"><documentation humanName="Documentation" mode="s">There is a single global LogManager object that is used to
maintain a set of shared state about Loggers and log services.
&lt;p&gt;
This LogManager object:
&lt;ul&gt;
&lt;li&gt; Manages a hierarchical namespace of Logger objects.  All
named Loggers are stored in this namespace.
&lt;li&gt; Manages a set of logging control properties.  These are
simple key-value pairs that can be used by Handlers and
other logging objects to configure themselves.
&lt;/ul&gt;
&lt;p&gt;
The global LogManager object can be retrieved using LogManager.getLogManager().
The LogManager object is created during class initialization and
cannot subsequently be changed.
&lt;p&gt;
At startup the LogManager class is located using the
java.util.logging.manager system property.
&lt;p&gt;
By default, the LogManager reads its initial configuration from
a properties file "lib/logging.properties" in the JRE directory.
If you edit that property file you can change the default logging
configuration for all uses of that JRE.
&lt;p&gt;
In addition, the LogManager uses two optional system properties that
allow more control over reading the initial configuration:
&lt;ul&gt;
&lt;li&gt;"java.util.logging.config.class"
&lt;li&gt;"java.util.logging.config.file"
&lt;/ul&gt;
These two properties may be set via the Preferences API, or as
command line property definitions to the "java" command, or as
system property definitions passed to JNI_CreateJavaVM.
&lt;p&gt;
If the "java.util.logging.config.class" property is set, then the
property value is treated as a class name.  The given class will be
loaded, an object will be instantiated, and that object's constructor
is responsible for reading in the initial configuration.  (That object
may use other system properties to control its configuration.)  The
alternate configuration class can use &lt;tt&gt;readConfiguration(InputStream)&lt;/tt&gt;
to define properties in the LogManager.
&lt;p&gt;
If "java.util.logging.config.class" property is &lt;b&gt;not&lt;/b&gt; set,
then the "java.util.logging.config.file" system property can be used
to specify a properties file (in java.util.Properties format). The
initial logging configuration will be read from this file.
&lt;p&gt;
If neither of these properties is defined then, as described
above, the LogManager will read its initial configuration from
a properties file "lib/logging.properties" in the JRE directory.
&lt;p&gt;
The properties for loggers and Handlers will have names starting
with the dot-separated name for the handler or logger.
&lt;p&gt;
The global logging properties may include:
&lt;ul&gt;
&lt;li&gt;A property "handlers".  This defines a whitespace separated
list of class names for handler classes to load and register as
handlers on the root Logger (the Logger named "").  Each class
name must be for a Handler class which has a default constructor.
Note that these Handlers may be created lazily, when they are
first used.

&lt;li&gt;A property "&lt;logger&gt;.handlers". This defines a whitespace or
comma separated list of class names for handlers classes to
load and register as handlers to the specified logger. Each class
name must be for a Handler class which has a default constructor.
Note that these Handlers may be created lazily, when they are
first used.

&lt;li&gt;A property "&lt;logger&gt;.useParentHandlers". This defines a boolean
value. By default every logger calls its parent in addition to
handling the logging message itself, this often result in messages
being handled by the root logger as well. When setting this property
to false a Handler needs to be configured for this logger otherwise
no logging messages are delivered.

&lt;li&gt;A property "config".  This property is intended to allow
arbitrary configuration code to be run.  The property defines a
whitespace separated list of class names.  A new instance will be
created for each named class.  The default constructor of each class
may execute arbitrary code to update the logging configuration, such as
setting logger levels, adding handlers, adding filters, etc.
&lt;/ul&gt;
&lt;p&gt;
Note that all classes loaded during LogManager configuration are
first searched on the system class path before any user class path.
That includes the LogManager class, any config classes, and any
handler classes.
&lt;p&gt;
Loggers are organized into a naming hierarchy based on their
dot separated names.  Thus "a.b.c" is a child of "a.b", but
"a.b1" and a.b2" are peers.
&lt;p&gt;
All properties whose names end with ".level" are assumed to define
log levels for Loggers.  Thus "foo.level" defines a log level for
the logger called "foo" and (recursively) for any of its children
in the naming hierarchy.  Log Levels are applied in the order they
are defined in the properties file.  Thus level settings for child
nodes in the tree should come after settings for their parents.
The property name ".level" can be used to set the level for the
root of the tree.
&lt;p&gt;
All methods on the LogManager object are multi-thread safe.

@version 1.46, 06/07/04
@since 1.4
</documentation><isAbstract humanName="Is Abstract" mode="s,e">false</isAbstract><isActive humanName="Is Active" mode="s,e">false</isActive><isFinalSpecialization humanName="Is Final Specialization" mode="e">false</isFinalSpecialization><isLeaf humanName="Is Leaf" mode="e">false</isLeaf><member humanName="Member"><class classType="Class" humanType="Class" icon="index_files/icon_class_555864569.jpg" name="Cleaner" refElementId="_9_5_f720368_1110473547815_28826_19076" refid="_9_5_f720368_1110473547815_28826_19076"/><class classType="Class" humanType="Class" icon="index_files/icon_class_555864569.jpg" name="LogNode" refElementId="_9_5_f720368_1110473547815_624844_19077" refid="_9_5_f720368_1110473547815_624844_19077"/><class classType="Class" humanType="Class" icon="index_files/icon_class_555864569.jpg" name="RootLogger" refElementId="_9_5_f720368_1110473547815_661790_19079" refid="_9_5_f720368_1110473547815_661790_19079"/></member><name humanName="Name" mode="s,e">LogManager</name><namespace classType="Package" humanName="Namespace" humanType="Package" icon="index_files/icon_package_1518868172.jpg" name="logging" refElementId="_9_5_f720368_1110473547799_233532_19062" refid="_9_5_f720368_1110473547799_233532_19062"/><nestedClassifier humanName="Nested Classifier"><class classType="Class" humanType="Class" icon="index_files/icon_class_555864569.jpg" name="Cleaner" refElementId="_9_5_f720368_1110473547815_28826_19076" refid="_9_5_f720368_1110473547815_28826_19076"/><class classType="Class" humanType="Class" icon="index_files/icon_class_555864569.jpg" name="LogNode" refElementId="_9_5_f720368_1110473547815_624844_19077" refid="_9_5_f720368_1110473547815_624844_19077"/><class classType="Class" humanType="Class" icon="index_files/icon_class_555864569.jpg" name="RootLogger" refElementId="_9_5_f720368_1110473547815_661790_19079" refid="_9_5_f720368_1110473547815_661790_19079"/></nestedClassifier><ownedComment humanName="Owned Comment"><comment classType="Comment" humanType="Comment" icon="index_files/icon_comment_841774062.jpg" name="There is a single global LogManager object that is..." refElementId="_10_5_622020d_1132928310372_95748_6765" refid="_10_5_622020d_1132928310372_95748_6765"/></ownedComment><ownedElement humanName="Owned Element"><comment classType="Comment" humanType="Comment" icon="index_files/icon_comment_841774062.jpg" name="There is a single global LogManager object that is..." refElementId="_10_5_622020d_1132928310372_95748_6765" refid="_10_5_622020d_1132928310372_95748_6765"/><class classType="Class" humanType="Class" icon="index_files/icon_class_555864569.jpg" name="Cleaner" refElementId="_9_5_f720368_1110473547815_28826_19076" refid="_9_5_f720368_1110473547815_28826_19076"/><class classType="Class" humanType="Class" icon="index_files/icon_class_555864569.jpg" name="LogNode" refElementId="_9_5_f720368_1110473547815_624844_19077" refid="_9_5_f720368_1110473547815_624844_19077"/><class classType="Class" humanType="Class" icon="index_files/icon_class_555864569.jpg" name="RootLogger" refElementId="_9_5_f720368_1110473547815_661790_19079" refid="_9_5_f720368_1110473547815_661790_19079"/></ownedElement><ownedMember humanName="Owned Member"><class classType="Class" humanType="Class" icon="index_files/icon_class_555864569.jpg" name="Cleaner" refElementId="_9_5_f720368_1110473547815_28826_19076" refid="_9_5_f720368_1110473547815_28826_19076"/><class classType="Class" humanType="Class" icon="index_files/icon_class_555864569.jpg" name="LogNode" refElementId="_9_5_f720368_1110473547815_624844_19077" refid="_9_5_f720368_1110473547815_624844_19077"/><class classType="Class" humanType="Class" icon="index_files/icon_class_555864569.jpg" name="RootLogger" refElementId="_9_5_f720368_1110473547815_661790_19079" refid="_9_5_f720368_1110473547815_661790_19079"/></ownedMember><owner classType="Package" humanName="Owner" humanType="Package" icon="index_files/icon_package_1518868172.jpg" mode="s,e" name="logging" refElementId="_9_5_f720368_1110473547799_233532_19062" refid="_9_5_f720368_1110473547799_233532_19062"/><owningPackage classType="Package" humanName="Owning Package" humanType="Package" icon="index_files/icon_package_1518868172.jpg" name="logging" refElementId="_9_5_f720368_1110473547799_233532_19062" refid="_9_5_f720368_1110473547799_233532_19062"/><package classType="Package" humanName="Package" humanType="Package" icon="index_files/icon_package_1518868172.jpg" name="logging" refElementId="_9_5_f720368_1110473547799_233532_19062" refid="_9_5_f720368_1110473547799_233532_19062"/><qualifiedName humanName="Qualified Name" mode="e">JDK 5.0 Classes::java::util::logging::LogManager</qualifiedName><TO_DO humanName="To Do" mode="s,e"/><visibility humanName="Visibility" mode="e">public</visibility></class></magicdraw>