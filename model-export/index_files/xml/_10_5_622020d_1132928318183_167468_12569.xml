<?xml version="1.0" encoding="UTF-8"?><magicdraw><comment classType="Comment" humanType="Comment" icon="index_files/icon_comment_841774062.jpg" id="_10_5_622020d_1132928318183_167468_12569" refElementId="_10_5_622020d_1132928318183_167468_12569"><annotatedElement humanName="Annotated Element" mode="s,e"><class classType="Class" humanType="Class" icon="index_files/icon_class_555864569.jpg" name="JViewport" refElementId="_9_5_f720368_1110473546799_135285_10793" refid="_9_5_f720368_1110473546799_135285_10793"/></annotatedElement><body humanName="Body" mode="s,e">The "viewport" or "porthole" through which you see the underlying
information. When you scroll, what moves is the viewport. It is like
peering through a camera's viewfinder. Moving the viewfinder upwards
brings new things into view at the top of the picture and loses
things that were at the bottom.
&lt;p&gt;
By default, &lt;code&gt;JViewport&lt;/code&gt; is opaque. To change this, use the
&lt;code&gt;setOpaque&lt;/code&gt; method.
&lt;p&gt;
&lt;b&gt;NOTE:&lt;/b&gt;We have implemented a faster scrolling algorithm that
does not require a buffer to draw in. The algorithm works as follows:
&lt;ol&gt;&lt;li&gt;The view and parent view and checked to see if they are
&lt;code&gt;JComponents&lt;/code&gt;,
if they aren't, stop and repaint the whole viewport.
&lt;li&gt;If the viewport is obscured by an ancestor, stop and repaint the whole
viewport.
&lt;li&gt;Compute the region that will become visible, if it is as big as
the viewport, stop and repaint the whole view region.
&lt;li&gt;Obtain the ancestor &lt;code&gt;Window&lt;/code&gt;'s graphics and
do a &lt;code&gt;copyArea&lt;/code&gt; on the scrolled region.
&lt;li&gt;Message the view to repaint the newly visible region.
&lt;li&gt;The next time paint is invoked on the viewport, if the clip region
is smaller than the viewport size a timer is kicked off to repaint the
whole region.
&lt;/ol&gt;
In general this approach is much faster. Compared to the backing store
approach this avoids the overhead of maintaining an offscreen buffer and
having to do two &lt;code&gt;copyArea&lt;/code&gt;s.
Compared to the non backing store case this
approach will greatly reduce the painted region.
&lt;p&gt;
This approach can cause slower times than the backing store approach
when the viewport is obscured by another window, or partially offscreen.
When another window
obscures the viewport the copyArea will copy garbage and a
paint event will be generated by the system to inform us we need to
paint the newly exposed region. The only way to handle this is to
repaint the whole viewport, which can cause slower performance than the
backing store case. In most applications very rarely will the user be
scrolling while the viewport is obscured by another window or offscreen,
so this optimization is usually worth the performance hit when obscured.
&lt;p&gt;
&lt;strong&gt;Warning:&lt;/strong&gt;
Serialized objects of this class will not be compatible with
future Swing releases. The current serialization support is
appropriate for short term storage or RMI between applications running
the same version of Swing.  As of 1.4, support for long term storage
of all JavaBeans&lt;sup&gt;&lt;font size="-2"&gt;TM&lt;/font&gt;&lt;/sup&gt;
has been added to the &lt;code&gt;java.beans&lt;/code&gt; package.
Please see {@link java.beans.XMLEncoder}.

@version 1.114 05/18/04
@author Hans Muller
@author Philip Milne
@see JScrollPane
</body><documentation humanName="Documentation"/><owner classType="Class" humanName="Owner" humanType="Class" icon="index_files/icon_class_555864569.jpg" mode="s,e" name="JViewport" refElementId="_9_5_f720368_1110473546799_135285_10793" refid="_9_5_f720368_1110473546799_135285_10793"/><owningElement classType="Class" humanName="Owning Element" humanType="Class" icon="index_files/icon_class_555864569.jpg" name="JViewport" refElementId="_9_5_f720368_1110473546799_135285_10793" refid="_9_5_f720368_1110473546799_135285_10793"/><TO_DO humanName="To Do" mode="s,e"/></comment></magicdraw>