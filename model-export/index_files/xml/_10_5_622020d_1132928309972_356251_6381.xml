<?xml version="1.0" encoding="UTF-8"?><magicdraw><comment classType="Comment" humanType="Comment" icon="index_files/icon_comment_2051026490.jpg" id="_10_5_622020d_1132928309972_356251_6381"><annotatedElement humanName="Annotated Element" mode="s,e"><class classType="Class" humanType="Class" icon="index_files/icon_class_303957224.jpg" name="AbstractQueuedSynchronizer" refid="_10_5_622020d_1132928309932_406456_6375"/></annotatedElement><body humanName="Body" mode="s,e">Provides a framework for implementing blocking locks and related
synchronizers (semaphores, events, etc) that rely on
first-in-first-out (FIFO) wait queues.  This class is designed to
be a useful basis for most kinds of synchronizers that rely on a
single atomic &lt;tt&gt;int&lt;/tt&gt; value to represent state. Subclasses
must define the protected methods that change this state, and which
define what that state means in terms of this object being acquired
or released.  Given these, the other methods in this class carry
out all queuing and blocking mechanics. Subclasses can maintain
other state fields, but only the atomically updated &lt;tt&gt;int&lt;/tt&gt;
value manipulated using methods {@link #getState}, {@link
#setState} and {@link #compareAndSetState} is tracked with respect
to synchronization.

&lt;p&gt;Subclasses should be defined as non-public internal helper
classes that are used to implement the synchronization properties
of their enclosing class.  Class
&lt;tt&gt;AbstractQueuedSynchronizer&lt;/tt&gt; does not implement any
synchronization interface.  Instead it defines methods such as
{@link #acquireInterruptibly} that can be invoked as
appropriate by concrete locks and related synchronizers to
implement their public methods.

&lt;p&gt;This class supports either or both a default &lt;em&gt;exclusive&lt;/em&gt;
mode and a &lt;em&gt;shared&lt;/em&gt; mode. When acquired in exclusive mode,
attempted acquires by other threads cannot succeed. Shared mode
acquires by multiple threads may (but need not) succeed. This class
does not "understand" these differences except in the
mechanical sense that when a shared mode acquire succeeds, the next
waiting thread (if one exists) must also determine whether it can
acquire as well. Threads waiting in the different modes share the
same FIFO queue. Usually, implementation subclasses support only
one of these modes, but both can come into play for example in a
{@link ReadWriteLock}. Subclasses that support only exclusive or
only shared modes need not define the methods supporting the unused mode.

&lt;p&gt;This class defines a nested {@link ConditionObject} class that
can be used as a {@link Condition} implementation by subclasses
supporting exclusive mode for which method {@link
#isHeldExclusively} reports whether synchronization is exclusively
held with respect to the current thread, method {@link #release}
invoked with the current {@link #getState} value fully releases
this object, and {@link #acquire}, given this saved state value,
eventually restores this object to its previous acquired state.  No
&lt;tt&gt;AbstractQueuedSynchronizer&lt;/tt&gt; method otherwise creates such a
condition, so if this constraint cannot be met, do not use it.  The
behavior of {@link ConditionObject} depends of course on the
semantics of its synchronizer implementation.

&lt;p&gt; This class provides inspection, instrumentation, and monitoring
methods for the internal queue, as well as similar methods for
condition objects. These can be exported as desired into classes
using an &lt;tt&gt;AbstractQueuedSynchronizer&lt;/tt&gt; for their
synchronization mechanics.

&lt;p&gt; Serialization of this class stores only the underlying atomic
integer maintaining state, so deserialized objects have empty
thread queues. Typical subclasses requiring serializability will
define a &lt;tt&gt;readObject&lt;/tt&gt; method that restores this to a known
initial state upon deserialization.

&lt;h3&gt;Usage&lt;/h3&gt;

&lt;p&gt; To use this class as the basis of a synchronizer, redefine the
following methods, as applicable, by inspecting and/or modifying
the synchronization state using {@link #getState}, {@link
#setState} and/or {@link #compareAndSetState}:

&lt;ul&gt;
&lt;li&gt; {@link #tryAcquire}
&lt;li&gt; {@link #tryRelease}
&lt;li&gt; {@link #tryAcquireShared}
&lt;li&gt; {@link #tryReleaseShared}
&lt;li&gt; {@link #isHeldExclusively}
&lt;/ul&gt;

Each of these methods by default throws {@link
UnsupportedOperationException}.  Implementations of these methods
must be internally thread-safe, and should in general be short and
not block. Defining these methods is the &lt;em&gt;only&lt;/em&gt; supported
means of using this class. All other methods are declared
&lt;tt&gt;final&lt;/tt&gt; because they cannot be independently varied.

&lt;p&gt; Even though this class is based on an internal FIFO queue, it
does not automatically enforce FIFO acquisition policies.  The core
of exclusive synchronization takes the form:

&lt;pre&gt;
Acquire:
while (!tryAcquire(arg)) {
&lt;em&gt;enqueue thread if it is not already queued&lt;/em&gt;;
&lt;em&gt;possibly block current thread&lt;/em&gt;;
}

Release:
if (tryRelease(arg))
&lt;em&gt;unblock the first queued thread&lt;/em&gt;;
&lt;/pre&gt;

(Shared mode is similar but may involve cascading signals.)

&lt;p&gt; Because checks in acquire are invoked before enqueuing, a newly
acquiring thread may &lt;em&gt;barge&lt;/em&gt; ahead of others that are
blocked and queued. However, you can, if desired, define
&lt;tt&gt;tryAcquire&lt;/tt&gt; and/or &lt;tt&gt;tryAcquireShared&lt;/tt&gt; to disable
barging by internally invoking one or more of the inspection
methods. In particular, a strict FIFO lock can define
&lt;tt&gt;tryAcquire&lt;/tt&gt; to immediately return &lt;tt&gt;false&lt;/tt&gt; if {@link
#getFirstQueuedThread} does not return the current thread.  A
normally preferable non-strict fair version can immediately return
&lt;tt&gt;false&lt;/tt&gt; only if {@link #hasQueuedThreads} returns
&lt;tt&gt;true&lt;/tt&gt; and &lt;tt&gt;getFirstQueuedThread&lt;/tt&gt; is not the current
thread; or equivalently, that &lt;tt&gt;getFirstQueuedThread&lt;/tt&gt; is both
non-null and not the current thread.  Further variations are
possible.

&lt;p&gt; Throughput and scalability are generally highest for the
default barging (also known as &lt;em&gt;greedy&lt;/em&gt;,
&lt;em&gt;renouncement&lt;/em&gt;, and &lt;em&gt;convoy-avoidance&lt;/em&gt;) strategy.
While this is not guaranteed to be fair or starvation-free, earlier
queued threads are allowed to recontend before later queued
threads, and each recontention has an unbiased chance to succeed
against incoming threads.  Also, while acquires do not
"spin" in the usual sense, they may perform multiple
invocations of &lt;tt&gt;tryAcquire&lt;/tt&gt; interspersed with other
computations before blocking.  This gives most of the benefits of
spins when exclusive synchronization is only briefly held, without
most of the liabilities when it isn't. If so desired, you can
augment this by preceding calls to acquire methods with
"fast-path" checks, possibly prechecking {@link #hasContended}
and/or {@link #hasQueuedThreads} to only do so if the synchronizer
is likely not to be contended.

&lt;p&gt; This class provides an efficient and scalable basis for
synchronization in part by specializing its range of use to
synchronizers that can rely on &lt;tt&gt;int&lt;/tt&gt; state, acquire, and
release parameters, and an internal FIFO wait queue. When this does
not suffice, you can build synchronizers from a lower level using
{@link java.util.concurrent.atomic atomic} classes, your own custom
{@link java.util.Queue} classes, and {@link LockSupport} blocking
support.

&lt;h3&gt;Usage Examples&lt;/h3&gt;

&lt;p&gt;Here is a non-reentrant mutual exclusion lock class that uses
the value zero to represent the unlocked state, and one to
represent the locked state. It also supports conditions and exposes
one of the instrumentation methods:

&lt;pre&gt;
class Mutex implements Lock, java.io.Serializable {

Our internal helper class
private static class Sync extends AbstractQueuedSynchronizer {
Report whether in locked state
protected boolean isHeldExclusively() {
return getState() == 1;
}

Acquire the lock if state is zero
public boolean tryAcquire(int acquires) {
assert acquires == 1; // Otherwise unused
return compareAndSetState(0, 1);
}

Release the lock by setting state to zero
protected boolean tryRelease(int releases) {
assert releases == 1; // Otherwise unused
if (getState() == 0) throw new IllegalMonitorStateException();
setState(0);
return true;
}

Provide a Condition
Condition newCondition() { return new ConditionObject(); }

Deserialize properly
private void readObject(ObjectInputStream s) throws IOException, ClassNotFoundException {
s.defaultReadObject();
setState(0); // reset to unlocked state
}
}

The sync object does all the hard work. We just forward to it.
private final Sync sync = new Sync();

public void lock()                { sync.acquire(1); }
public boolean tryLock()          { return sync.tryAcquire(1); }
public void unlock()              { sync.release(1); }
public Condition newCondition()   { return sync.newCondition(); }
public boolean isLocked()         { return sync.isHeldExclusively(); }
public boolean hasQueuedThreads() { return sync.hasQueuedThreads(); }
public void lockInterruptibly() throws InterruptedException {
sync.acquireInterruptibly(1);
}
public boolean tryLock(long timeout, TimeUnit unit) throws InterruptedException {
return sync.tryAcquireNanos(1, unit.toNanos(timeout));
}
}
&lt;/pre&gt;

&lt;p&gt; Here is a latch class that is like a {@link CountDownLatch}
except that it only requires a single &lt;tt&gt;signal&lt;/tt&gt; to
fire. Because a latch is non-exclusive, it uses the &lt;tt&gt;shared&lt;/tt&gt;
acquire and release methods.

&lt;pre&gt;
class BooleanLatch {

private static class Sync extends AbstractQueuedSynchronizer {
boolean isSignalled() { return getState() != 0; }

protected int tryAcquireShared(int ignore) {
return isSignalled()? 1 : -1;
}

protected boolean tryReleaseShared(int ignore) {
setState(1);
return true;
}
}

private final Sync sync = new Sync();
public boolean isSignalled() { return sync.isSignalled(); }
public void signal()         { sync.releaseShared(1); }
public void await() throws InterruptedException {
sync.acquireSharedInterruptibly(1);
}
}

&lt;/pre&gt;

@since 1.5
@author Doug Lea
</body><documentation humanName="Documentation"/><owner classType="Class" humanName="Owner" humanType="Class" icon="index_files/icon_class_303957224.jpg" mode="s,e" name="AbstractQueuedSynchronizer" refid="_10_5_622020d_1132928309932_406456_6375"/><owningElement classType="Class" humanName="Owning Element" humanType="Class" icon="index_files/icon_class_303957224.jpg" name="AbstractQueuedSynchronizer" refid="_10_5_622020d_1132928309932_406456_6375"/><TO_DO humanName="To Do" mode="s,e"/></comment></magicdraw>