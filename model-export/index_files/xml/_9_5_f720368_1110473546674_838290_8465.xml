<?xml version="1.0" encoding="UTF-8"?><magicdraw><class classType="Class" humanType="Class" icon="index_files/icon_class_555864569.jpg" id="_9_5_f720368_1110473546674_838290_8465" refElementId="_9_5_f720368_1110473546674_838290_8465"><documentation humanName="Documentation" mode="s">Key factories are used to convert &lt;I&gt;keys&lt;/I&gt; (opaque
cryptographic keys of type &lt;code&gt;Key&lt;/code&gt;) into &lt;I&gt;key specifications&lt;/I&gt;
(transparent representations of the underlying key material), and vice
versa.

&lt;P&gt; Key factories are bi-directional. That is, they allow you to build an
opaque key object from a given key specification (key material), or to
retrieve the underlying key material of a key object in a suitable format.

&lt;P&gt; Multiple compatible key specifications may exist for the same key.
For example, a DSA public key may be specified using
&lt;code&gt;DSAPublicKeySpec&lt;/code&gt; or
&lt;code&gt;X509EncodedKeySpec&lt;/code&gt;. A key factory can be used to translate
between compatible key specifications.

&lt;P&gt; The following is an example of how to use a key factory in order to
instantiate a DSA public key from its encoding.
Assume Alice has received a digital signature from Bob.
Bob also sent her his public key (in encoded format) to verify
his signature. Alice then performs the following actions:

&lt;pre&gt;
X509EncodedKeySpec bobPubKeySpec = new X509EncodedKeySpec(bobEncodedPubKey);
KeyFactory keyFactory = KeyFactory.getInstance("DSA");
PublicKey bobPubKey = keyFactory.generatePublic(bobPubKeySpec);
Signature sig = Signature.getInstance("DSA");
sig.initVerify(bobPubKey);
sig.update(data);
sig.verify(signature);
&lt;/pre&gt;

@author Jan Luehe

@version 1.32, 05/05/04

@see Key
@see PublicKey
@see PrivateKey
@see java.security.spec.KeySpec
@see java.security.spec.DSAPublicKeySpec
@see java.security.spec.X509EncodedKeySpec

@since 1.2
</documentation><isAbstract humanName="Is Abstract" mode="s,e">false</isAbstract><isActive humanName="Is Active" mode="s,e">false</isActive><isFinalSpecialization humanName="Is Final Specialization" mode="e">false</isFinalSpecialization><isLeaf humanName="Is Leaf" mode="e">false</isLeaf><name humanName="Name" mode="s,e">KeyFactory</name><namespace classType="Package" humanName="Namespace" humanType="Package" icon="index_files/icon_package_1518868172.jpg" name="security" refElementId="_9_5_f720368_1110473547706_6534_18577" refid="_9_5_f720368_1110473547706_6534_18577"/><ownedComment humanName="Owned Comment"><comment classType="Comment" humanType="Comment" icon="index_files/icon_comment_841774062.jpg" name="Key factories are used to convert &lt;I&gt;keys&lt;/I&gt; (opa..." refElementId="_10_5_622020d_1132928309321_906272_6023" refid="_10_5_622020d_1132928309321_906272_6023"/></ownedComment><ownedElement humanName="Owned Element"><comment classType="Comment" humanType="Comment" icon="index_files/icon_comment_841774062.jpg" name="Key factories are used to convert &lt;I&gt;keys&lt;/I&gt; (opa..." refElementId="_10_5_622020d_1132928309321_906272_6023" refid="_10_5_622020d_1132928309321_906272_6023"/></ownedElement><owner classType="Package" humanName="Owner" humanType="Package" icon="index_files/icon_package_1518868172.jpg" mode="s,e" name="security" refElementId="_9_5_f720368_1110473547706_6534_18577" refid="_9_5_f720368_1110473547706_6534_18577"/><owningPackage classType="Package" humanName="Owning Package" humanType="Package" icon="index_files/icon_package_1518868172.jpg" name="security" refElementId="_9_5_f720368_1110473547706_6534_18577" refid="_9_5_f720368_1110473547706_6534_18577"/><package classType="Package" humanName="Package" humanType="Package" icon="index_files/icon_package_1518868172.jpg" name="security" refElementId="_9_5_f720368_1110473547706_6534_18577" refid="_9_5_f720368_1110473547706_6534_18577"/><qualifiedName humanName="Qualified Name" mode="e">JDK 5.0 Classes::java::security::KeyFactory</qualifiedName><TO_DO humanName="To Do" mode="s,e"/><visibility humanName="Visibility" mode="e">public</visibility></class></magicdraw>