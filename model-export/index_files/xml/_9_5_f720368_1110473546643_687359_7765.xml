<?xml version="1.0" encoding="UTF-8"?><magicdraw><class classType="Class" humanType="Class" icon="index_files/icon_class_555864569.jpg" id="_9_5_f720368_1110473546643_687359_7765" refElementId="_9_5_f720368_1110473546643_687359_7765"><documentation humanName="Documentation" mode="s">This class represents an Internet Protocol version 6 (IPv6) address.
Defined by &lt;a href="http://www.ietf.org/rfc/rfc2373.txt"&gt;
&lt;i&gt;RFC&amp;nbsp;2373: IP Version 6 Addressing Architecture&lt;/i&gt;&lt;/a&gt;.

&lt;h4&gt; &lt;A NAME="format"&gt;Textual representation of IP addresses&lt;/a&gt; &lt;/h4&gt;

Textual representation of IPv6 address used as input to methods
takes one of the following forms:

&lt;ol&gt;
&lt;li&gt;&lt;p&gt; &lt;A NAME="lform"&gt;The preferred form&lt;/a&gt; is x:x:x:x:x:x:x:x,
where the 'x's are
the hexadecimal values of the eight 16-bit pieces of the
address. This is the full form.  For example,

&lt;blockquote&gt;&lt;table cellpadding=0 cellspacing=0 summary="layout"&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt&gt;1080:0:0:0:8:800:200C:417A&lt;/tt&gt;&lt;td&gt;&lt;/tr&gt;
&lt;/table&gt;&lt;/blockquote&gt;

&lt;p&gt; Note that it is not necessary to write the leading zeros in
an individual field. However, there must be at least one numeral
in every field, except as described below.&lt;/li&gt;

&lt;li&gt;&lt;p&gt; Due to some methods of allocating certain styles of IPv6
addresses, it will be common for addresses to contain long
strings of zero bits. In order to make writing addresses
containing zero bits easier, a special syntax is available to
compress the zeros. The use of "::" indicates multiple groups
of 16-bits of zeros. The "::" can only appear once in an address.
The "::" can also be used to compress the leading and/or trailing
zeros in an address. For example,

&lt;blockquote&gt;&lt;table cellpadding=0 cellspacing=0 summary="layout"&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt&gt;1080::8:800:200C:417A&lt;/tt&gt;&lt;td&gt;&lt;/tr&gt;
&lt;/table&gt;&lt;/blockquote&gt;

&lt;li&gt;&lt;p&gt; An alternative form that is sometimes more convenient
when dealing with a mixed environment of IPv4 and IPv6 nodes is
x:x:x:x:x:x:d.d.d.d, where the 'x's are the hexadecimal values
of the six high-order 16-bit pieces of the address, and the 'd's
are the decimal values of the four low-order 8-bit pieces of the
standard IPv4 representation address, for example,

&lt;blockquote&gt;&lt;table cellpadding=0 cellspacing=0 summary="layout"&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt&gt;::FFFF:129.144.52.38&lt;/tt&gt;&lt;td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt&gt;::129.144.52.38&lt;/tt&gt;&lt;td&gt;&lt;/tr&gt;
&lt;/table&gt;&lt;/blockquote&gt;

&lt;p&gt; where "::FFFF:d.d.d.d" and "::d.d.d.d" are, respectively, the
general forms of an IPv4-mapped IPv6 address and an
IPv4-compatible IPv6 address. Note that the IPv4 portion must be
in the "d.d.d.d" form. The following forms are invalid:

&lt;blockquote&gt;&lt;table cellpadding=0 cellspacing=0 summary="layout"&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt&gt;::FFFF:d.d.d&lt;/tt&gt;&lt;td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt&gt;::FFFF:d.d&lt;/tt&gt;&lt;td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt&gt;::d.d.d&lt;/tt&gt;&lt;td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt&gt;::d.d&lt;/tt&gt;&lt;td&gt;&lt;/tr&gt;
&lt;/table&gt;&lt;/blockquote&gt;

&lt;p&gt; The following form:

&lt;blockquote&gt;&lt;table cellpadding=0 cellspacing=0 summary="layout"&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt&gt;::FFFF:d&lt;/tt&gt;&lt;td&gt;&lt;/tr&gt;
&lt;/table&gt;&lt;/blockquote&gt;

&lt;p&gt; is valid, however it is an unconventional representation of
the IPv4-compatible IPv6 address,

&lt;blockquote&gt;&lt;table cellpadding=0 cellspacing=0 summary="layout"&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt&gt;::255.255.0.d&lt;/tt&gt;&lt;td&gt;&lt;/tr&gt;
&lt;/table&gt;&lt;/blockquote&gt;

&lt;p&gt; while "::d" corresponds to the general IPv6 address
"0:0:0:0:0:0:0:d".&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt; For methods that return a textual representation as output
value, the full form is used. Inet6Address will return the full
form because it is unambiguous when used in combination with other
textual data.

&lt;h4&gt; Special IPv6 address &lt;/h4&gt;

&lt;blockquote&gt;
&lt;table cellspacing=2 summary="Description of IPv4-mapped address"&gt; &lt;tr&gt;&lt;th valign=top&gt;&lt;i&gt;IPv4-mapped address&lt;/i&gt;&lt;/th&gt;
&lt;td&gt;Of the form::ffff:w.x.y.z, this IPv6 address is used to
represent an IPv4 address. It allows the native program to
use the same address data structure and also the same
socket when communicating with both IPv4 and IPv6 nodes.

&lt;p&gt;In InetAddress and Inet6Address, it is used for internal
representation; it has no functional role. Java will never
return an IPv4-mapped address.  These classes can take an
IPv4-mapped address as input, both in byte array and text
representation. However, it will be converted into an IPv4
address.&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;&lt;/blockquote&gt;
&lt;p&gt;
&lt;h4&gt; &lt;A NAME="scoped"&gt;Textual representation of IPv6 scoped addresses&lt;/a&gt; &lt;/h4&gt;
&lt;p&gt;
The textual representation of IPv6 addresses as described above can be extended
to specify IPv6 scoped addresses. This extension to the basic addressing architecture
is described in [draft-ietf-ipngwg-scoping-arch-04.txt].
&lt;p&gt;
Because link-local and site-local addresses are non-global, it is possible that different hosts
may have the same destination address and may be reachable through different interfaces on the
same originating system. In this case, the originating system is said to be connected
to multiple zones of the same scope. In order to disambiguate which is the intended destination
zone, it is possible to append a zone identifier (or &lt;i&gt;scope_id&lt;/i&gt;) to an IPv6 address.
&lt;p&gt;
The general format for specifying the &lt;i&gt;scope_id&lt;/i&gt; is the following:
&lt;p&gt;&lt;blockquote&gt;&lt;i&gt;IPv6-address&lt;/i&gt;%&lt;i&gt;scope_id&lt;/i&gt;&lt;/blockquote&gt;
&lt;p&gt; The IPv6-address is a literal IPv6 address as described above.
The &lt;i&gt;scope_id&lt;/i&gt; refers to an interface on the local system, and it can be specified
in two ways.
&lt;p&gt;&lt;ol&gt;&lt;li&gt;&lt;i&gt;As a numeric identifier.&lt;/i&gt; This must be a positive integer that identifies the
particular interface and scope as understood by the system. Usually, the numeric
values can be determined through administration tools on the system. Each interface may
have multiple values, one for each scope. If the scope is unspecified, then the default value
used is zero.&lt;/li&gt;&lt;p&gt;
&lt;li&gt;&lt;i&gt;As a string.&lt;/i&gt; This must be the exact string that is returned by
{@link java.net.NetworkInterface#getName()} for the particular interface in question.
When an Inet6Address is created in this way, the numeric scope-id is determined at the time
the object is created by querying the relevant NetworkInterface.&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;
Note also, that the numeric &lt;i&gt;scope_id&lt;/i&gt; can be retrieved from Inet6Address instances returned from the
NetworkInterface class. This can be used to find out the current scope ids configured on the system.
</documentation><generalization humanName="Generalization"><generalization classType="Generalization" humanType="Generalization" icon="index_files/icon_generalization_1454922150.jpg" isRelationship="true" name="Generalization[JDK 5.0 Classes::java::net::Inet6Address -&gt; JDK 5.0 Classes::java::net::InetAddress]" refElementId="_10_5_622020d_1132928321719_415445_13793" refid="_10_5_622020d_1132928321719_415445_13793"/></generalization><inheritedMember humanName="Inherited Member"><class classType="Class" humanType="Class" icon="index_files/icon_class_555864569.jpg" name="CacheEntry" refElementId="_9_5_f720368_1110473547549_668174_18063" refid="_9_5_f720368_1110473547549_668174_18063"/><class classType="Class" humanType="Class" icon="index_files/icon_class_555864569.jpg" name="Cache" refElementId="_9_5_f720368_1110473547549_544193_18066" refid="_9_5_f720368_1110473547549_544193_18066"/></inheritedMember><isAbstract humanName="Is Abstract" mode="s,e">false</isAbstract><isActive humanName="Is Active" mode="s,e">false</isActive><isFinalSpecialization humanName="Is Final Specialization" mode="e">true</isFinalSpecialization><isLeaf humanName="Is Leaf" mode="e">true</isLeaf><member humanName="Member"><class classType="Class" humanType="Class" icon="index_files/icon_class_555864569.jpg" name="CacheEntry" refElementId="_9_5_f720368_1110473547549_668174_18063" refid="_9_5_f720368_1110473547549_668174_18063"/><class classType="Class" humanType="Class" icon="index_files/icon_class_555864569.jpg" name="Cache" refElementId="_9_5_f720368_1110473547549_544193_18066" refid="_9_5_f720368_1110473547549_544193_18066"/></member><name humanName="Name" mode="s,e">Inet6Address</name><namespace classType="Package" humanName="Namespace" humanType="Package" icon="index_files/icon_package_1518868172.jpg" name="net" refElementId="_9_5_f720368_1110473547549_109314_18048" refid="_9_5_f720368_1110473547549_109314_18048"/><ownedComment humanName="Owned Comment"><comment classType="Comment" humanType="Comment" icon="index_files/icon_comment_841774062.jpg" name="This class represents an Internet Protocol version..." refElementId="_10_5_622020d_1132928308339_521625_5268" refid="_10_5_622020d_1132928308339_521625_5268"/></ownedComment><ownedElement humanName="Owned Element"><generalization classType="Generalization" humanType="Generalization" icon="index_files/icon_generalization_1454922150.jpg" isRelationship="true" name="Generalization[JDK 5.0 Classes::java::net::Inet6Address -&gt; JDK 5.0 Classes::java::net::InetAddress]" refElementId="_10_5_622020d_1132928321719_415445_13793" refid="_10_5_622020d_1132928321719_415445_13793"/><comment classType="Comment" humanType="Comment" icon="index_files/icon_comment_841774062.jpg" name="This class represents an Internet Protocol version..." refElementId="_10_5_622020d_1132928308339_521625_5268" refid="_10_5_622020d_1132928308339_521625_5268"/></ownedElement><owner classType="Package" humanName="Owner" humanType="Package" icon="index_files/icon_package_1518868172.jpg" mode="s,e" name="net" refElementId="_9_5_f720368_1110473547549_109314_18048" refid="_9_5_f720368_1110473547549_109314_18048"/><owningPackage classType="Package" humanName="Owning Package" humanType="Package" icon="index_files/icon_package_1518868172.jpg" name="net" refElementId="_9_5_f720368_1110473547549_109314_18048" refid="_9_5_f720368_1110473547549_109314_18048"/><package classType="Package" humanName="Package" humanType="Package" icon="index_files/icon_package_1518868172.jpg" name="net" refElementId="_9_5_f720368_1110473547549_109314_18048" refid="_9_5_f720368_1110473547549_109314_18048"/><qualifiedName humanName="Qualified Name" mode="e">JDK 5.0 Classes::java::net::Inet6Address</qualifiedName><superClass humanName="Super Class"><class classType="Class" humanType="Class" icon="index_files/icon_class_555864569.jpg" name="InetAddress" refElementId="_9_5_f720368_1110473546643_279990_7769" refid="_9_5_f720368_1110473546643_279990_7769"/></superClass><TO_DO humanName="To Do" mode="s,e"/><visibility humanName="Visibility" mode="e">public</visibility></class></magicdraw>