<?xml version="1.0" encoding="UTF-8"?><magicdraw><comment classType="Comment" humanType="Comment" icon="index_files/icon_comment_841774062.jpg" id="_10_5_622020d_1132928309561_305986_6222" refElementId="_10_5_622020d_1132928309561_305986_6222"><annotatedElement humanName="Annotated Element" mode="s,e"><interface classType="Interface" humanType="Interface" icon="index_files/icon_interface_1046467249.jpg" name="CharacterIterator" refElementId="_9_5_f720368_1110473546690_140017_8623" refid="_9_5_f720368_1110473546690_140017_8623"/></annotatedElement><body humanName="Body" mode="s,e">This interface defines a protocol for bidirectional iteration over text.
The iterator iterates over a bounded sequence of characters.  Characters
are indexed with values beginning with the value returned by getBeginIndex() and
continuing through the value returned by getEndIndex()-1.
&lt;p&gt;
Iterators maintain a current character index, whose valid range is from
getBeginIndex() to getEndIndex(); the value getEndIndex() is included to allow
handling of zero-length text ranges and for historical reasons.
The current index can be retrieved by calling getIndex() and set directly
by calling setIndex(), first(), and last().
&lt;p&gt;
The methods previous() and next() are used for iteration. They return DONE if
they would move outside the range from getBeginIndex() to getEndIndex() -1,
signaling that the iterator has reached the end of the sequence. DONE is
also returned by other methods to indicate that the current index is
outside this range.

&lt;P&gt;Examples:&lt;P&gt;

Traverse the text from start to finish
&lt;pre&gt;
public void traverseForward(CharacterIterator iter) {
for(char c = iter.first(); c != CharacterIterator.DONE; c = iter.next()) {
processChar(c);
}
}
&lt;/pre&gt;

Traverse the text backwards, from end to start
&lt;pre&gt;
public void traverseBackward(CharacterIterator iter) {
for(char c = iter.last(); c != CharacterIterator.DONE; c = iter.previous()) {
processChar(c);
}
}
&lt;/pre&gt;

Traverse both forward and backward from a given position in the text.
Calls to notBoundary() in this example represents some
additional stopping criteria.
&lt;pre&gt;
public void traverseOut(CharacterIterator iter, int pos) {
for (char c = iter.setIndex(pos);
c != CharacterIterator.DONE &amp;&amp; notBoundary(c);
c = iter.next()) {
}
int end = iter.getIndex();
for (char c = iter.setIndex(pos);
c != CharacterIterator.DONE &amp;&amp; notBoundary(c);
c = iter.previous()) {
}
int start = iter.getIndex();
processSection(start, end);
}
&lt;/pre&gt;

@see StringCharacterIterator
@see AttributedCharacterIterator
</body><documentation humanName="Documentation"/><owner classType="Interface" humanName="Owner" humanType="Interface" icon="index_files/icon_interface_1046467249.jpg" mode="s,e" name="CharacterIterator" refElementId="_9_5_f720368_1110473546690_140017_8623" refid="_9_5_f720368_1110473546690_140017_8623"/><owningElement classType="Interface" humanName="Owning Element" humanType="Interface" icon="index_files/icon_interface_1046467249.jpg" name="CharacterIterator" refElementId="_9_5_f720368_1110473546690_140017_8623" refid="_9_5_f720368_1110473546690_140017_8623"/><TO_DO humanName="To Do" mode="s,e"/></comment></magicdraw>