<?xml version="1.0" encoding="UTF-8"?><magicdraw><comment classType="Comment" humanType="Comment" icon="index_files/icon_comment_841774062.jpg" id="_10_5_622020d_1132928307408_81925_4690" refElementId="_10_5_622020d_1132928307408_81925_4690"><annotatedElement humanName="Annotated Element" mode="s,e"><interface classType="Interface" humanType="Interface" icon="index_files/icon_interface_1046467249.jpg" name="Serializable" refElementId="_9_5_f720368_1110473546612_364919_7481" refid="_9_5_f720368_1110473546612_364919_7481"/></annotatedElement><body humanName="Body" mode="s,e">Serializability of a class is enabled by the class implementing the
java.io.Serializable interface. Classes that do not implement this
interface will not have any of their state serialized or
deserialized.  All subtypes of a serializable class are themselves
serializable.  The serialization interface has no methods or fields
and serves only to identify the semantics of being serializable. &lt;p&gt;

To allow subtypes of non-serializable classes to be serialized, the
subtype may assume responsibility for saving and restoring the
state of the supertype's public, protected, and (if accessible)
package fields.  The subtype may assume this responsibility only if
the class it extends has an accessible no-arg constructor to
initialize the class's state.  It is an error to declare a class
Serializable if this is not the case.  The error will be detected at runtime. &lt;p&gt;

During deserialization, the fields of non-serializable classes will
be initialized using the public or protected no-arg constructor of
the class.  A no-arg constructor must be accessible to the subclass
that is serializable.  The fields of serializable subclasses will
be restored from the stream. &lt;p&gt;

When traversing a graph, an object may be encountered that does not
support the Serializable interface. In this case the
NotSerializableException will be thrown and will identify the class
of the non-serializable object. &lt;p&gt;

Classes that require special handling during the serialization and
deserialization process must implement special methods with these exact
signatures: &lt;p&gt;

&lt;PRE&gt;
private void writeObject(java.io.ObjectOutputStream out)
throws IOException
private void readObject(java.io.ObjectInputStream in)
throws IOException, ClassNotFoundException;
&lt;/PRE&gt;&lt;p&gt;

The writeObject method is responsible for writing the state of the
object for its particular class so that the corresponding
readObject method can restore it.  The default mechanism for saving
the Object's fields can be invoked by calling
out.defaultWriteObject. The method does not need to concern
itself with the state belonging to its superclasses or subclasses.
State is saved by writing the individual fields to the
ObjectOutputStream using the writeObject method or by using the
methods for primitive data types supported by DataOutput. &lt;p&gt;

The readObject method is responsible for reading from the stream and
restoring the classes fields. It may call in.defaultReadObject to invoke
the default mechanism for restoring the object's non-static and non-transient
fields.  The defaultReadObject method uses information in the stream to
assign the fields of the object saved in the stream with the correspondingly
named fields in the current object.  This handles the case when the class
has evolved to add new fields. The method does not need to concern
itself with the state belonging to its superclasses or subclasses.
State is saved by writing the individual fields to the
ObjectOutputStream using the writeObject method or by using the
methods for primitive data types supported by DataOutput. &lt;p&gt;

Serializable classes that need to designate an alternative object to be
used when writing an object to the stream should implement this
special method with the exact signature: &lt;p&gt;

&lt;PRE&gt;
ANY-ACCESS-MODIFIER Object writeReplace() throws ObjectStreamException;
&lt;/PRE&gt;&lt;p&gt;

This writeReplace method is invoked by serialization if the method
exists and it would be accessible from a method defined within the
class of the object being serialized. Thus, the method can have private,
protected and package-private access. Subclass access to this method
follows java accessibility rules. &lt;p&gt;

Classes that need to designate a replacement when an instance of it
is read from the stream should implement this special method with the
exact signature.&lt;p&gt;

&lt;PRE&gt;
ANY-ACCESS-MODIFIER Object readResolve() throws ObjectStreamException;
&lt;/PRE&gt;&lt;p&gt;

This readResolve method follows the same invocation rules and
accessibility rules as writeReplace.&lt;p&gt;

The serialization runtime associates with each serializable class a version
number, called a serialVersionUID, which is used during deserialization to
verify that the sender and receiver of a serialized object have loaded
classes for that object that are compatible with respect to serialization.
If the receiver has loaded a class for the object that has a different
serialVersionUID than that of the corresponding sender's class, then
deserialization will result in an {@link InvalidClassException}.  A
serializable class can declare its own serialVersionUID explicitly by
declaring a field named &lt;code&gt;"serialVersionUID"&lt;/code&gt; that must be static,
final, and of type &lt;code&gt;long&lt;/code&gt;:&lt;p&gt;

&lt;PRE&gt;
ANY-ACCESS-MODIFIER static final long serialVersionUID = 42L;
&lt;/PRE&gt;

If a serializable class does not explicitly declare a serialVersionUID, then
the serialization runtime will calculate a default serialVersionUID value
for that class based on various aspects of the class, as described in the
Java(TM) Object Serialization Specification.  However, it is &lt;em&gt;strongly
recommended&lt;/em&gt; that all serializable classes explicitly declare
serialVersionUID values, since the default serialVersionUID computation is
highly sensitive to class details that may vary depending on compiler
implementations, and can thus result in unexpected
&lt;code&gt;InvalidClassException&lt;/code&gt;s during deserialization.  Therefore, to
guarantee a consistent serialVersionUID value across different java compiler
implementations, a serializable class must declare an explicit
serialVersionUID value.  It is also strongly advised that explicit
serialVersionUID declarations use the &lt;code&gt;private&lt;/code&gt; modifier where
possible, since such declarations apply only to the immediately declaring
class--serialVersionUID fields are not useful as inherited members.

@author  unascribed
@version 1.22, 12/19/03
@see java.io.ObjectOutputStream
@see java.io.ObjectInputStream
@see java.io.ObjectOutput
@see java.io.ObjectInput
@see java.io.Externalizable
@since   JDK1.1
</body><documentation humanName="Documentation"/><owner classType="Interface" humanName="Owner" humanType="Interface" icon="index_files/icon_interface_1046467249.jpg" mode="s,e" name="Serializable" refElementId="_9_5_f720368_1110473546612_364919_7481" refid="_9_5_f720368_1110473546612_364919_7481"/><owningElement classType="Interface" humanName="Owning Element" humanType="Interface" icon="index_files/icon_interface_1046467249.jpg" name="Serializable" refElementId="_9_5_f720368_1110473546612_364919_7481" refid="_9_5_f720368_1110473546612_364919_7481"/><TO_DO humanName="To Do" mode="s,e"/></comment></magicdraw>