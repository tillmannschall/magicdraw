<?xml version="1.0" encoding="UTF-8"?><magicdraw><class classType="Class" humanType="Class" icon="index_files/icon_class_303957224.jpg" id="_9_5_f720368_1110473546690_833550_8665"><documentation humanName="Documentation" mode="standard">&lt;code&gt;NumberFormat&lt;/code&gt; is the abstract base class for all number
formats. This class provides the interface for formatting and parsing
numbers. &lt;code&gt;NumberFormat&lt;/code&gt; also provides methods for determining
which locales have number formats, and what their names are.

&lt;p&gt;
&lt;code&gt;NumberFormat&lt;/code&gt; helps you to format and parse numbers for any locale.
Your code can be completely independent of the locale conventions for
decimal points, thousands-separators, or even the particular decimal
digits used, or whether the number format is even decimal.

&lt;p&gt;
To format a number for the current Locale, use one of the factory
class methods:
&lt;blockquote&gt;
&lt;pre&gt;
myString = NumberFormat.getInstance().format(myNumber);
&lt;/pre&gt;
&lt;/blockquote&gt;
If you are formatting multiple numbers, it is
more efficient to get the format and use it multiple times so that
the system doesn't have to fetch the information about the local
language and country conventions multiple times.
&lt;blockquote&gt;
&lt;pre&gt;
NumberFormat nf = NumberFormat.getInstance();
for (int i = 0; i &lt; a.length; ++i) {
output.println(nf.format(myNumber[i]) + "; ");
}
&lt;/pre&gt;
&lt;/blockquote&gt;
To format a number for a different Locale, specify it in the
call to &lt;code&gt;getInstance&lt;/code&gt;.
&lt;blockquote&gt;
&lt;pre&gt;
NumberFormat nf = NumberFormat.getInstance(Locale.FRENCH);
&lt;/pre&gt;
&lt;/blockquote&gt;
You can also use a &lt;code&gt;NumberFormat&lt;/code&gt; to parse numbers:
&lt;blockquote&gt;
&lt;pre&gt;
myNumber = nf.parse(myString);
&lt;/pre&gt;
&lt;/blockquote&gt;
Use &lt;code&gt;getInstance&lt;/code&gt; or &lt;code&gt;getNumberInstance&lt;/code&gt; to get the
normal number format. Use &lt;code&gt;getIntegerInstance&lt;/code&gt; to get an
integer number format. Use &lt;code&gt;getCurrencyInstance&lt;/code&gt; to get the
currency number format. And use &lt;code&gt;getPercentInstance&lt;/code&gt; to get a
format for displaying percentages. With this format, a fraction like
0.53 is displayed as 53%.

&lt;p&gt;
You can also control the display of numbers with such methods as
&lt;code&gt;setMinimumFractionDigits&lt;/code&gt;.
If you want even more control over the format or parsing,
or want to give your users more control,
you can try casting the &lt;code&gt;NumberFormat&lt;/code&gt; you get from the factory methods
to a &lt;code&gt;DecimalFormat&lt;/code&gt;. This will work for the vast majority
of locales; just remember to put it in a &lt;code&gt;try&lt;/code&gt; block in case you
encounter an unusual one.

&lt;p&gt;
NumberFormat and DecimalFormat are designed such that some controls
work for formatting and others work for parsing.  The following is
the detailed description for each these control methods,
&lt;p&gt;
setParseIntegerOnly : only affects parsing, e.g.
if true,  "3456.78" -&gt; 3456 (and leaves the parse position just after index 6)
if false, "3456.78" -&gt; 3456.78 (and leaves the parse position just after index 8)
This is independent of formatting.  If you want to not show a decimal point
where there might be no digits after the decimal point, use
setDecimalSeparatorAlwaysShown.
&lt;p&gt;
setDecimalSeparatorAlwaysShown : only affects formatting, and only where
there might be no digits after the decimal point, such as with a pattern
like "#,##0.##", e.g.,
if true,  3456.00 -&gt; "3,456."
if false, 3456.00 -&gt; "3456"
This is independent of parsing.  If you want parsing to stop at the decimal
point, use setParseIntegerOnly.

&lt;p&gt;
You can also use forms of the &lt;code&gt;parse&lt;/code&gt; and &lt;code&gt;format&lt;/code&gt;
methods with &lt;code&gt;ParsePosition&lt;/code&gt; and &lt;code&gt;FieldPosition&lt;/code&gt; to
allow you to:
&lt;ul&gt;
&lt;li&gt; progressively parse through pieces of a string
&lt;li&gt; align the decimal point and other areas
&lt;/ul&gt;
For example, you can align numbers in two ways:
&lt;ol&gt;
&lt;li&gt; If you are using a monospaced font with spacing for alignment,
you can pass the &lt;code&gt;FieldPosition&lt;/code&gt; in your format call, with
&lt;code&gt;field&lt;/code&gt; = &lt;code&gt;INTEGER_FIELD&lt;/code&gt;. On output,
&lt;code&gt;getEndIndex&lt;/code&gt; will be set to the offset between the
last character of the integer and the decimal. Add
(desiredSpaceCount - getEndIndex) spaces at the front of the string.

&lt;li&gt; If you are using proportional fonts,
instead of padding with spaces, measure the width
of the string in pixels from the start to &lt;code&gt;getEndIndex&lt;/code&gt;.
Then move the pen by
(desiredPixelWidth - widthToAlignmentPoint) before drawing the text.
It also works where there is no decimal, but possibly additional
characters at the end, e.g., with parentheses in negative
numbers: "(12)" for -12.
&lt;/ol&gt;

&lt;h4&gt;&lt;a name="synchronization"&gt;Synchronization&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;
Number formats are generally not synchronized.
It is recommended to create separate format instances for each thread.
If multiple threads access a format concurrently, it must be synchronized
externally.

@see          DecimalFormat
@see          ChoiceFormat
@version      1.65, 05/10/04
@author       Mark Davis
@author       Helena Shih
</documentation><generalization humanName="Generalization"><generalization classType="Generalization" humanType="Generalization" icon="index_files/icon_generalization_99042020.jpg" isRelationship="true" refid="_10_5_622020d_1132928321959_440622_14300"/></generalization><inheritedMember humanName="Inherited Member"><class classType="Class" humanType="Class" icon="index_files/icon_class_1555793073.jpg" name="Field" refid="_9_5_f720368_1110473547784_45961_18947"/><interface classType="Interface" humanType="Interface" icon="index_files/icon_interface_118881143.jpg" name="FieldDelegate" refid="_9_5_f720368_1110473547784_970079_18950"/></inheritedMember><isAbstract humanName="Is Abstract" mode="s,e">true</isAbstract><isActive humanName="Is Active" mode="s,e">false</isActive><isFinalSpecialization humanName="Is Final Specialization" mode="e">false</isFinalSpecialization><isLeaf humanName="Is Leaf" mode="e">false</isLeaf><member humanName="Member"><class classType="Class" humanType="Class" icon="index_files/icon_class_1555793073.jpg" name="Field" refid="_9_5_f720368_1110473547784_792738_18959"/><class classType="Class" humanType="Class" icon="index_files/icon_class_1555793073.jpg" name="Field" refid="_9_5_f720368_1110473547784_45961_18947"/><interface classType="Interface" humanType="Interface" icon="index_files/icon_interface_118881143.jpg" name="FieldDelegate" refid="_9_5_f720368_1110473547784_970079_18950"/></member><name humanName="Name" mode="s,e">NumberFormat</name><namespace classType="Package" humanName="Namespace" humanType="Package" icon="index_files/icon_package_2000410491.jpg" name="text" refid="_9_5_f720368_1110473547768_615400_18906"/><nestedClassifier humanName="Nested Classifier"><class classType="Class" humanType="Class" icon="index_files/icon_class_1555793073.jpg" name="Field" refid="_9_5_f720368_1110473547784_792738_18959"/></nestedClassifier><ownedComment humanName="Owned Comment"><comment classType="Comment" humanType="Comment" icon="index_files/icon_comment_2051026490.jpg" refid="_10_5_622020d_1132928309761_2177_6266"/></ownedComment><ownedElement humanName="Owned Element"><generalization classType="Generalization" humanType="Generalization" icon="index_files/icon_generalization_99042020.jpg" isRelationship="true" refid="_10_5_622020d_1132928321959_440622_14300"/><comment classType="Comment" humanType="Comment" icon="index_files/icon_comment_2051026490.jpg" refid="_10_5_622020d_1132928309761_2177_6266"/><class classType="Class" humanType="Class" icon="index_files/icon_class_1555793073.jpg" name="Field" refid="_9_5_f720368_1110473547784_792738_18959"/></ownedElement><ownedMember humanName="Owned Member"><class classType="Class" humanType="Class" icon="index_files/icon_class_1555793073.jpg" name="Field" refid="_9_5_f720368_1110473547784_792738_18959"/></ownedMember><owner classType="Package" humanName="Owner" humanType="Package" icon="index_files/icon_package_2000410491.jpg" mode="s,e" name="text" refid="_9_5_f720368_1110473547768_615400_18906"/><owningPackage classType="Package" humanName="Owning Package" humanType="Package" icon="index_files/icon_package_2000410491.jpg" name="text" refid="_9_5_f720368_1110473547768_615400_18906"/><package classType="Package" humanName="Package" humanType="Package" icon="index_files/icon_package_2000410491.jpg" name="text" refid="_9_5_f720368_1110473547768_615400_18906"/><qualifiedName humanName="Qualified Name" mode="e">JDK 5.0 Classes::java::text::NumberFormat</qualifiedName><superClass humanName="Super Class"><class classType="Class" humanType="Class" icon="index_files/icon_class_303957224.jpg" name="Format" refid="_9_5_f720368_1110473546690_941980_8657"/></superClass><TO_DO humanName="To Do" mode="s,e"/><visibility humanName="Visibility" mode="e">public</visibility></class></magicdraw>